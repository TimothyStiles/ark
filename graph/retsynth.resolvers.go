package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/TimothyStiles/allbase/pkg/retsynth"
)

// SearchCompounds is the resolver for the searchCompounds field.
func (r *queryResolver) SearchCompounds(ctx context.Context, searchTerm *string) ([]*retsynth.Compound, error) {
	// Do the search query
	compounds := retsynth.GetCompoundBySearchTerm(*searchTerm)
	if compounds == nil {
		return nil, fmt.Errorf("no compounds found for the term %s", *searchTerm)
	}
	// Convert the compounds to the graphql return type
	retcompounds := []*retsynth.Compound{}
	for index := range compounds {
		retcompounds = append(retcompounds, &compounds[index])
	}
	return retcompounds, nil
}

// SearchOrganisms is the resolver for the searchOrganisms field.
func (r *queryResolver) SearchOrganisms(ctx context.Context, searchTerm *string) ([]*retsynth.Model, error) {
	// Do the search query
	organisms := retsynth.GetOrganismBySearchTerm(*searchTerm)
	if organisms == nil {
		return nil, fmt.Errorf("no organisms found for the term %s", *searchTerm)
	}
	// Convert the compounds to the graphql return type
	retorganisms := []*retsynth.Model{}
	for index := range organisms {
		retorganisms = append(retorganisms, &organisms[index])
	}
	return retorganisms, nil
}

// UniqueMetabolicClusters is the resolver for the uniqueMetabolicClusters field.
func (r *queryResolver) UniqueMetabolicClusters(ctx context.Context) ([]*string, error) {
	clusters := retsynth.GetUniqueMetabolicClusters()
	if clusters == nil {
		return nil, fmt.Errorf("no clusters found")
	}
	// Convert the compounds to the graphql return type
	retclusters := []*string{}
	for index := range clusters {
		retclusters = append(retclusters, &clusters[index])
	}
	return retclusters, nil
}

// ModelIDsFromCluster is the resolver for the modelIDsFromCluster field.
func (r *queryResolver) ModelIDsFromCluster(ctx context.Context, cluster *string) ([]*string, error) {
	modelIDs := retsynth.GetModelIDsFromCluster(*cluster)
	if modelIDs == nil {
		return nil, fmt.Errorf("no models found for cluster %s", *cluster)
	}
	// Convert the compounds to the graphql return type
	retmodelIDs := []*string{}
	for index := range modelIDs {
		retmodelIDs = append(retmodelIDs, &modelIDs[index])
	}
	return retmodelIDs, nil
}

// AllModelIDs is the resolver for the allModelIDs field.
func (r *queryResolver) AllModelIDs(ctx context.Context) ([]*string, error) {
	modelIDs := retsynth.GetAllModelIDs()
	if modelIDs == nil {
		return nil, fmt.Errorf("no models found")
	}
	// Convert the compounds to the graphql return type
	retmodelIDs := []*string{}
	for index := range modelIDs {
		retmodelIDs = append(retmodelIDs, &modelIDs[index])
	}
	return retmodelIDs, nil
}

// OrganismName is the resolver for the organismName field.
func (r *queryResolver) OrganismName(ctx context.Context, organismID *string) (*string, error) {
	organismname := retsynth.GetOrganismName(*organismID)
	if organismname.Valid == false {
		return nil, fmt.Errorf("no organism found for ID %s", *organismID)
	} else {
		return &organismname.String, nil
	}
}

// OrganismID is the resolver for the organismID field.
func (r *queryResolver) OrganismID(ctx context.Context, organismName *string) (*string, error) {
	organismID := retsynth.GetOrganismID(*organismName)
	if organismID.Valid == false {
		return nil, fmt.Errorf("no organism found for name %s", *organismName)
	} else {
		return &organismID.String, nil
	}
}

// CompoundID is the resolver for the compoundID field.
func (r *queryResolver) CompoundID(ctx context.Context, compoundName *string) (*string, error) {
	compoundID := retsynth.GetCompoundID(*compoundName)
	if compoundID.Valid == false {
		return nil, fmt.Errorf("no compound found for name %s", *compoundName)
	} else {
		return &compoundID.String, nil
	}
}

// LikeCompoundID is the resolver for the likeCompoundID field.
func (r *queryResolver) LikeCompoundID(ctx context.Context, compoundName *string) (*string, error) {
	compoundID := retsynth.GetLikeCompoundID(*compoundName)
	if compoundID.Valid == false {
		return nil, fmt.Errorf("no compound found for name %s", *compoundName)
	} else {
		return &compoundID.String, nil
	}
}

// CompoundIDFromInchi is the resolver for the compoundIDFromInchi field.
func (r *queryResolver) CompoundIDFromInchi(ctx context.Context, inchi *string) (*string, error) {
	compoundID := retsynth.GetCompoundIDFromInchi(*inchi)
	if compoundID.Valid == false {
		return nil, fmt.Errorf("no compound found for inchi %s", *inchi)
	} else {
		return &compoundID.String, nil
	}
}

// CompoundInchi is the resolver for the compoundInchi field.
func (r *queryResolver) CompoundInchi(ctx context.Context, compoundID *string) (*string, error) {
	inchi := retsynth.GetCompoundInchi(*compoundID)
	if inchi.Valid == false {
		return nil, fmt.Errorf("no compound found for ID %s", *compoundID)
	} else {
		return &inchi.String, nil
	}
}

// CompoundNameFromInchi is the resolver for the compoundNameFromInchi field.
func (r *queryResolver) CompoundNameFromInchi(ctx context.Context, inchi *string) (*string, error) {
	compoundName := retsynth.GetCompoundNameFromInchi(*inchi)
	if compoundName.Valid == false {
		return nil, fmt.Errorf("no compound found for inchi %s", *inchi)
	} else {
		return &compoundName.String, nil
	}
}

// CompoundName is the resolver for the compoundName field.
func (r *queryResolver) CompoundName(ctx context.Context, compoundID *string) (*string, error) {
	compoundName := retsynth.GetCompoundName(*compoundID)
	if compoundName.Valid == false {
		return nil, fmt.Errorf("no compound found for ID %s", *compoundID)
	} else {
		return &compoundName.String, nil
	}
}

// CompoundCompartment is the resolver for the compoundCompartment field.
func (r *queryResolver) CompoundCompartment(ctx context.Context, compoundID *string) (*string, error) {
	compartment := retsynth.GetCompoundCompartment(*compoundID)
	if compartment.Valid == false {
		return nil, fmt.Errorf("no compartment found for compound ID %s", *compoundID)
	} else {
		return &compartment.String, nil
	}
}

// ReactionName is the resolver for the reactionName field.
func (r *queryResolver) ReactionName(ctx context.Context, reactionID *string) (*string, error) {
	reactionName := retsynth.GetReactionName(*reactionID)
	if reactionName.Valid == false {
		return nil, fmt.Errorf("no reaction found for ID %s", *reactionID)
	} else {
		return &reactionName.String, nil
	}
}

// ReactionID is the resolver for the reactionID field.
func (r *queryResolver) ReactionID(ctx context.Context, reactionName *string) (*string, error) {
	panic(fmt.Errorf("not implemented: ReactionID - reactionID"))
}

// ReactionIDsFromCompound is the resolver for the reactionIDsFromCompound field.
func (r *queryResolver) ReactionIDsFromCompound(ctx context.Context, compoundID *string, isProduct *bool) ([]*string, error) {
	reactionIDs := retsynth.GetReactionIDsFromCompound(*compoundID, *isProduct)
	if reactionIDs == nil {
		return nil, fmt.Errorf("no reactions found for ID %s", *compoundID)
	}
	retReactionIDs := []*string{}
	for index := range reactionIDs {
		retReactionIDs = append(retReactionIDs, &reactionIDs[index])
	}

	return retReactionIDs, nil
}

// ReactionSpecies is the resolver for the reactionSpecies field.
func (r *queryResolver) ReactionSpecies(ctx context.Context, reactionID *string) ([]*string, error) {
	species := retsynth.GetReactionSpecies(*reactionID)
	if species == nil {
		return nil, fmt.Errorf("no data found for ID %s", *reactionID)
	}
	retspecies := []*string{}
	for index := range retspecies {
		retspecies = append(retspecies, &species[index])
	}
	return retspecies, nil
}

// ReactantCompoundIDs is the resolver for the reactantCompoundIDs field.
func (r *queryResolver) ReactantCompoundIDs(ctx context.Context, reactionID *string) ([]*string, error) {
	compoundIDs := retsynth.GetReactantCompoundIDs(*reactionID)
	if compoundIDs == nil {
		return nil, fmt.Errorf("no data found for ID %s", *reactionID)
	}
	retCompoundIDs := []*string{}
	for index := range compoundIDs {
		retCompoundIDs = append(retCompoundIDs, &compoundIDs[index])
	}
	return retCompoundIDs, nil
}

// GetReactionsWithProduct is the resolver for the getReactionsWithProduct field.
func (r *queryResolver) GetReactionsWithProduct(ctx context.Context, compoundID *string) ([]*string, error) {
	reactionIDs := retsynth.GetReactionsWithProduct(*compoundID)
	if reactionIDs == nil {
		return nil, fmt.Errorf("no data found for ID %s", *compoundID)
	}
	retReactionIDs := []*string{}
	for index := range reactionIDs {
		retReactionIDs = append(retReactionIDs, &reactionIDs[index])
	}
	return retReactionIDs, nil
}

// ModelCompounds is the resolver for the modelCompounds field.
func (r *queryResolver) ModelCompounds(ctx context.Context, modelID *string) ([]*string, error) {
	panic(fmt.Errorf("not implemented: ModelCompounds - modelCompounds"))
}

// CompoundIDs is the resolver for the compoundIDs field.
func (r *queryResolver) CompoundIDs(ctx context.Context) ([]*string, error) {
	compoundIDs := retsynth.GetAllCompoundIDs()
	if compoundIDs == nil {
		return nil, fmt.Errorf("no data found")
	}
	retCompoundIDs := []*string{}
	for index := range compoundIDs {
		retCompoundIDs = append(retCompoundIDs, &compoundIDs[index])
	}
	return retCompoundIDs, nil
}

// CompoundInchiStrings is the resolver for the compoundInchiStrings field.
func (r *queryResolver) CompoundInchiStrings(ctx context.Context) ([]*string, error) {
	inchiStrings := retsynth.GetAllCompoundInchiStrings()
	if inchiStrings == nil {
		return nil, fmt.Errorf("no reaction found")
	}
	retInchiStrings := []*string{}
	for index := range inchiStrings {
		retInchiStrings = append(retInchiStrings, &inchiStrings[index])
	}
	return retInchiStrings, nil
}

// ModelReactions is the resolver for the modelReactions field.
func (r *queryResolver) ModelReactions(ctx context.Context, modelID *string) ([]*string, error) {
	reactions := retsynth.GetModelReactions(*modelID)
	if reactions == nil {
		return nil, fmt.Errorf("no reaction found for ID %s", *modelID)
	}
	retReactions := []*string{}
	for index := range reactions {
		retReactions = append(retReactions, &reactions[index])
	}
	return retReactions, nil
}

// ReactionIDs is the resolver for the reactionIDs field.
func (r *queryResolver) ReactionIDs(ctx context.Context) ([]*string, error) {
	reactionIDs := retsynth.GetAllReactions()
	if reactionIDs == nil {
		return nil, fmt.Errorf("no data found")
	}
	retReactionIDs := []*string{}
	for index := range reactionIDs {
		retReactionIDs = append(retReactionIDs, &reactionIDs[index])
	}
	return retReactionIDs, nil
}

// ReactionReversibility is the resolver for the reactionReversibility field.
func (r *queryResolver) ReactionReversibility(ctx context.Context, reactionID *string, modelID *string) (*bool, error) {
	reversibility := retsynth.GetReactionReversibility(*reactionID, *modelID)
	if reversibility.Valid == false {
		return nil, fmt.Errorf("no reaction found for ID %s", *reactionID)
	} else {
		return &reversibility.Bool, nil
	}
}

// ReactionReversibilityGlobal is the resolver for the reactionReversibilityGlobal field.
func (r *queryResolver) ReactionReversibilityGlobal(ctx context.Context, reactionID *string) (*bool, error) {
	reversibility := retsynth.GetReactionReversibilityGlobal(*reactionID)
	if reversibility.Valid == false {
		return nil, fmt.Errorf("no reaction found for ID %s", *reactionID)
	} else {
		return &reversibility.Bool, nil
	}
}

// ReactionGeneAssociations is the resolver for the reactionGeneAssociations field.
func (r *queryResolver) ReactionGeneAssociations(ctx context.Context, reactionID *string, modelID *string) ([]*string, error) {
	associations := retsynth.GetReactionGeneAssociations(*reactionID, *modelID)
	if associations == nil {
		return nil, fmt.Errorf("no reaction found for ID %s", *reactionID)
	}
	retAssociations := []*string{}
	for index := range associations {
		retAssociations = append(retAssociations, &associations[index])
	}
	return retAssociations, nil
}

// ReactionProteinAssociations is the resolver for the reactionProteinAssociations field.
func (r *queryResolver) ReactionProteinAssociations(ctx context.Context, reactionID *string, modelID *string) ([]*string, error) {
	associations := retsynth.GetReactionProteinAssociations(*reactionID, *modelID)
	if associations == nil {
		return nil, fmt.Errorf("no reaction found for ID %s", *reactionID)
	}
	retAssociations := []*string{}
	for index := range associations {
		retAssociations = append(retAssociations, &associations[index])
	}
	return retAssociations, nil
}

// Stoichiometry is the resolver for the stoichiometry field.
func (r *queryResolver) Stoichiometry(ctx context.Context, reactionID *string, compoundID *string, isProduct *bool) (*float64, error) {
	stoichiometry := retsynth.GetStoichiometry(*reactionID, *compoundID, *isProduct)
	if stoichiometry.Valid == false {
		return nil, fmt.Errorf("no data found for ID %s", *reactionID)
	} else {
		return &stoichiometry.Float64, nil
	}
}

// ReactionCatalysts is the resolver for the reactionCatalysts field.
func (r *queryResolver) ReactionCatalysts(ctx context.Context, reactionID *string) ([]*string, error) {
	catalysts := retsynth.GetReactionCatalysts(*reactionID)
	if catalysts == nil {
		return nil, fmt.Errorf("no catalysts found for ID %s", *reactionID)
	}
	retCatalysts := []*string{}
	for index := range catalysts {
		retCatalysts = append(retCatalysts, &catalysts[index])
	}
	return retCatalysts, nil
}

// CompartmentID is the resolver for the compartmentID field.
func (r *queryResolver) CompartmentID(ctx context.Context, compartmentName *string) (*string, error) {
	compartmentID := retsynth.GetCompartmentID(*compartmentName)
	if compartmentID.Valid == false {
		return nil, fmt.Errorf("no compartment found for name %s", *compartmentName)
	} else {
		return &compartmentID.String, nil
	}
}

// ReactionSolvents is the resolver for the reactionSolvents field.
func (r *queryResolver) ReactionSolvents(ctx context.Context, reactionID *string) ([]*string, error) {
	solvents := retsynth.GetReactionSolvents(*reactionID)
	if solvents == nil {
		return nil, fmt.Errorf("no solvents found for ID %s", *reactionID)
	}
	retSolvents := []*string{}
	for index := range solvents {
		retSolvents = append(retSolvents, &solvents[index])
	}
	return retSolvents, nil
}

// ReactionTemperature is the resolver for the reactionTemperature field.
func (r *queryResolver) ReactionTemperature(ctx context.Context, reactionID *string) (*float64, error) {
	temperature := retsynth.GetReactionTemperature(*reactionID)
	if temperature.Valid == false {
		return nil, fmt.Errorf("no temperature found for ID %s", *reactionID)
	} else {
		return &temperature.Float64, nil
	}
}

// ReactionPressure is the resolver for the reactionPressure field.
func (r *queryResolver) ReactionPressure(ctx context.Context, reactionID *string) (*float64, error) {
	pressure := retsynth.GetReactionPressure(*reactionID)
	if pressure.Valid == false {
		return nil, fmt.Errorf("no pressure found for ID %s", *reactionID)
	} else {
		return &pressure.Float64, nil
	}
}

// ReactionTime is the resolver for the reactionTime field.
func (r *queryResolver) ReactionTime(ctx context.Context, reactionID *string) (*float64, error) {
	reactiontime := retsynth.GetReactionTime(*reactionID)
	if reactiontime.Valid == false {
		return nil, fmt.Errorf("no time found for ID %s", *reactionID)
	} else {
		return &reactiontime.Float64, nil
	}
}

// ReactionYield is the resolver for the reactionYield field.
func (r *queryResolver) ReactionYield(ctx context.Context, reactionID *string) (*float64, error) {
	yield := retsynth.GetReactionYield(*reactionID)
	if yield.Valid == false {
		return nil, fmt.Errorf("no yield found for ID %s", *reactionID)
	} else {
		return &yield.Float64, nil
	}
}

// ReactionReference is the resolver for the reactionReference field.
func (r *queryResolver) ReactionReference(ctx context.Context, reactionID *string) (*string, error) {
	reference := retsynth.GetReactionReference(*reactionID)
	if reference.Valid == false {
		return nil, fmt.Errorf("no reference found for ID %s", *reactionID)
	} else {
		return &reference.String, nil
	}
}

// ReactionByType is the resolver for the reactionByType field.
func (r *queryResolver) ReactionByType(ctx context.Context, reactionType *string) ([]*string, error) {
	reactions := retsynth.GetReactionsByType(*reactionType)
	if reactions == nil {
		return nil, fmt.Errorf("no reactions found for type %s", *reactionType)
	}
	retReactions := []*string{}
	for index := range reactions {
		retReactions = append(retReactions, &reactions[index])
	}
	return retReactions, nil
}

// ReactionType is the resolver for the reactionType field.
func (r *queryResolver) ReactionType(ctx context.Context, reactionID *string) (*string, error) {
	reactionType := retsynth.GetReactionType(*reactionID)
	if reactionType.Valid == false {
		return nil, fmt.Errorf("no reaction type found for ID %s", *reactionID)
	} else {
		return &reactionType.String, nil
	}
}

// ReactionKEGGIDs is the resolver for the reactionKEGGIDs field.
func (r *queryResolver) ReactionKEGGIDs(ctx context.Context) ([]*string, error) {
	keggids := retsynth.GetAllReactionKEGGIDs()
	if keggids == nil {
		return nil, fmt.Errorf("no reaction KEGG IDs found")
	}
	retKeggids := []*string{}
	for index := range keggids {
		retKeggids = append(retKeggids, &keggids[index])
	}
	return retKeggids, nil
}

// ReactionKeggid is the resolver for the reactionKEGGID field.
func (r *queryResolver) ReactionKeggid(ctx context.Context, reactionID *string) (*string, error) {
	keggid := retsynth.GetReactionKEGGID(*reactionID)
	if keggid.Valid == false {
		return nil, fmt.Errorf("no reaction KEGG ID found for ID %s", *reactionID)
	} else {
		return &keggid.String, nil
	}
}

// CompoundKeggid is the resolver for the compoundKEGGID field.
func (r *queryResolver) CompoundKeggid(ctx context.Context, compoundID *string) (*string, error) {
	keggid := retsynth.GetCompoundKEGGID(*compoundID)
	if keggid.Valid == false {
		return nil, fmt.Errorf("no compound KEGG ID found for ID %s", *compoundID)
	} else {
		return &keggid.String, nil
	}
}

// CompoundKEGGIDs is the resolver for the compoundKEGGIDs field.
func (r *queryResolver) CompoundKEGGIDs(ctx context.Context) ([]*string, error) {
	keggids := retsynth.GetAllCompoundKEGGIDs()
	if keggids == nil {
		return nil, fmt.Errorf("no compound KEGG IDs found")
	}
	retKeggids := []*string{}
	for index := range keggids {
		retKeggids = append(retKeggids, &keggids[index])
	}
	return retKeggids, nil
}

// ChemicalFormulas is the resolver for the chemicalFormulas field.
func (r *queryResolver) ChemicalFormulas(ctx context.Context) ([]*string, error) {
	forumlas := retsynth.GetAllChemicalFormulas()
	if forumlas == nil {
		return nil, fmt.Errorf("no chemical formulas found")
	}
	retFormulas := []*string{}
	for index := range forumlas {
		retFormulas = append(retFormulas, &forumlas[index])
	}
	return retFormulas, nil
}

// ChemicalFormula is the resolver for the chemicalFormula field.
func (r *queryResolver) ChemicalFormula(ctx context.Context, compoundID *string) (*string, error) {
	forumla := retsynth.GetChemicalFormula(*compoundID)
	if forumla.Valid == false {
		return nil, fmt.Errorf("no chemical formula found for ID %s", *compoundID)
	} else {
		return &forumla.String, nil
	}
}

// CompoundCASNumbers is the resolver for the compoundCASNumbers field.
func (r *queryResolver) CompoundCASNumbers(ctx context.Context) ([]*string, error) {
	casNumbers := retsynth.GetAllCASNumbers()
	if casNumbers == nil {
		return nil, fmt.Errorf("no compound CAS numbers found")
	}
	retCasNumbers := []*string{}
	for index := range casNumbers {
		retCasNumbers = append(retCasNumbers, &casNumbers[index])
	}
	return retCasNumbers, nil
}

// CompoundCASNumber is the resolver for the compoundCASNumber field.
func (r *queryResolver) CompoundCASNumber(ctx context.Context, compoundID *string) (*string, error) {
	casNumber := retsynth.GetCASNumber(*compoundID)
	if casNumber.Valid == false {
		return nil, fmt.Errorf("no compound CAS number found for ID %s", *compoundID)
	} else {
		return &casNumber.String, nil
	}
}

// CompoundIDByFormula is the resolver for the compoundIDByFormula field.
func (r *queryResolver) CompoundIDByFormula(ctx context.Context, formula *string) ([]*string, error) {
	compoundIDs := retsynth.GetCompoundIDByFormula(*formula)
	if compoundIDs == nil {
		return nil, fmt.Errorf("no compound IDs found for formula %s", *formula)
	}
	retCompoundIDs := []*string{}
	for index := range compoundIDs {
		retCompoundIDs = append(retCompoundIDs, &compoundIDs[index])
	}
	return retCompoundIDs, nil
}

// CompoundCompoundsBySearchTerm is the resolver for the compoundCompoundsBySearchTerm field.
func (r *queryResolver) CompoundCompoundsBySearchTerm(ctx context.Context, searchTerm *string) ([]*retsynth.Compound, error) {
	compounds := retsynth.GetCompoundBySearchTerm(*searchTerm)
	if compounds == nil {
		return nil, fmt.Errorf("no compounds found for search term %s", *searchTerm)
	}
	retCompounds := []*retsynth.Compound{}
	for index := range compounds {
		retCompounds = append(retCompounds, &compounds[index])
	}
	return retCompounds, nil
}

// ModedByFileName is the resolver for the modedByFileName field.
func (r *queryResolver) ModedByFileName(ctx context.Context, fileName *string) ([]*retsynth.Model, error) {
	models := retsynth.GetOrganismBySearchTerm(*fileName)
	if models == nil {
		return nil, fmt.Errorf("no models found for file name %s", *fileName)
	}
	retModels := []*retsynth.Model{}
	for index := range models {
		retModels = append(retModels, &models[index])
	}
	return retModels, nil
}

// FbaModelIDs is the resolver for the fbaModelIDs field.
func (r *queryResolver) FbaModelIDs(ctx context.Context) ([]*string, error) {
	modelIDs := retsynth.GetAllFBAModelIDs()
	if modelIDs == nil {
		return nil, fmt.Errorf("no FBA model IDs found")
	}
	retModelIDs := []*string{}
	for index := range modelIDs {
		retModelIDs = append(retModelIDs, &modelIDs[index])
	}
	return retModelIDs, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) ModedIDByFileName(ctx context.Context, fileName *string) (*string, error) {
	panic(fmt.Errorf("not implemented: ModedIDByFileName - modedIDByFileName"))
}
func (r *queryResolver) CompoundNameBySearchTerm(ctx context.Context, searchTerm *string) ([]*string, error) {
	panic(fmt.Errorf("not implemented: CompoundNameBySearchTerm - compoundNameBySearchTerm"))
}
