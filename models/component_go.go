// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ComponentGo is an object representing the database table.
type ComponentGo struct {
	CompGoID    int64  `boil:"comp_go_id" json:"comp_go_id" toml:"comp_go_id" yaml:"comp_go_id"`
	ComponentID int64  `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	GoID        string `boil:"go_id" json:"go_id" toml:"go_id" yaml:"go_id"`

	R *componentGoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentGoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentGoColumns = struct {
	CompGoID    string
	ComponentID string
	GoID        string
}{
	CompGoID:    "comp_go_id",
	ComponentID: "component_id",
	GoID:        "go_id",
}

var ComponentGoTableColumns = struct {
	CompGoID    string
	ComponentID string
	GoID        string
}{
	CompGoID:    "component_go.comp_go_id",
	ComponentID: "component_go.component_id",
	GoID:        "component_go.go_id",
}

// Generated where

var ComponentGoWhere = struct {
	CompGoID    whereHelperint64
	ComponentID whereHelperint64
	GoID        whereHelperstring
}{
	CompGoID:    whereHelperint64{field: "\"component_go\".\"comp_go_id\""},
	ComponentID: whereHelperint64{field: "\"component_go\".\"component_id\""},
	GoID:        whereHelperstring{field: "\"component_go\".\"go_id\""},
}

// ComponentGoRels is where relationship names are stored.
var ComponentGoRels = struct {
	Go        string
	Component string
}{
	Go:        "Go",
	Component: "Component",
}

// componentGoR is where relationships are stored.
type componentGoR struct {
	Go        *GoClassification  `boil:"Go" json:"Go" toml:"Go" yaml:"Go"`
	Component *ComponentSequence `boil:"Component" json:"Component" toml:"Component" yaml:"Component"`
}

// NewStruct creates a new relationship struct
func (*componentGoR) NewStruct() *componentGoR {
	return &componentGoR{}
}

func (r *componentGoR) GetGo() *GoClassification {
	if r == nil {
		return nil
	}
	return r.Go
}

func (r *componentGoR) GetComponent() *ComponentSequence {
	if r == nil {
		return nil
	}
	return r.Component
}

// componentGoL is where Load methods for each relationship are stored.
type componentGoL struct{}

var (
	componentGoAllColumns            = []string{"comp_go_id", "component_id", "go_id"}
	componentGoColumnsWithoutDefault = []string{"comp_go_id", "component_id", "go_id"}
	componentGoColumnsWithDefault    = []string{}
	componentGoPrimaryKeyColumns     = []string{"comp_go_id"}
	componentGoGeneratedColumns      = []string{}
)

type (
	// ComponentGoSlice is an alias for a slice of pointers to ComponentGo.
	// This should almost always be used instead of []ComponentGo.
	ComponentGoSlice []*ComponentGo
	// ComponentGoHook is the signature for custom ComponentGo hook methods
	ComponentGoHook func(context.Context, boil.ContextExecutor, *ComponentGo) error

	componentGoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentGoType                 = reflect.TypeOf(&ComponentGo{})
	componentGoMapping              = queries.MakeStructMapping(componentGoType)
	componentGoPrimaryKeyMapping, _ = queries.BindMapping(componentGoType, componentGoMapping, componentGoPrimaryKeyColumns)
	componentGoInsertCacheMut       sync.RWMutex
	componentGoInsertCache          = make(map[string]insertCache)
	componentGoUpdateCacheMut       sync.RWMutex
	componentGoUpdateCache          = make(map[string]updateCache)
	componentGoUpsertCacheMut       sync.RWMutex
	componentGoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentGoAfterSelectHooks []ComponentGoHook

var componentGoBeforeInsertHooks []ComponentGoHook
var componentGoAfterInsertHooks []ComponentGoHook

var componentGoBeforeUpdateHooks []ComponentGoHook
var componentGoAfterUpdateHooks []ComponentGoHook

var componentGoBeforeDeleteHooks []ComponentGoHook
var componentGoAfterDeleteHooks []ComponentGoHook

var componentGoBeforeUpsertHooks []ComponentGoHook
var componentGoAfterUpsertHooks []ComponentGoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentGo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentGo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentGo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentGo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentGo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentGo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentGo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentGo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentGo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentGoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentGoHook registers your hook function for all future operations.
func AddComponentGoHook(hookPoint boil.HookPoint, componentGoHook ComponentGoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentGoAfterSelectHooks = append(componentGoAfterSelectHooks, componentGoHook)
	case boil.BeforeInsertHook:
		componentGoBeforeInsertHooks = append(componentGoBeforeInsertHooks, componentGoHook)
	case boil.AfterInsertHook:
		componentGoAfterInsertHooks = append(componentGoAfterInsertHooks, componentGoHook)
	case boil.BeforeUpdateHook:
		componentGoBeforeUpdateHooks = append(componentGoBeforeUpdateHooks, componentGoHook)
	case boil.AfterUpdateHook:
		componentGoAfterUpdateHooks = append(componentGoAfterUpdateHooks, componentGoHook)
	case boil.BeforeDeleteHook:
		componentGoBeforeDeleteHooks = append(componentGoBeforeDeleteHooks, componentGoHook)
	case boil.AfterDeleteHook:
		componentGoAfterDeleteHooks = append(componentGoAfterDeleteHooks, componentGoHook)
	case boil.BeforeUpsertHook:
		componentGoBeforeUpsertHooks = append(componentGoBeforeUpsertHooks, componentGoHook)
	case boil.AfterUpsertHook:
		componentGoAfterUpsertHooks = append(componentGoAfterUpsertHooks, componentGoHook)
	}
}

// One returns a single componentGo record from the query.
func (q componentGoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentGo, error) {
	o := &ComponentGo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_go")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentGo records from the query.
func (q componentGoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentGoSlice, error) {
	var o []*ComponentGo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentGo slice")
	}

	if len(componentGoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentGo records in the query.
func (q componentGoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_go rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentGoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_go exists")
	}

	return count > 0, nil
}

// Go pointed to by the foreign key.
func (o *ComponentGo) Go(mods ...qm.QueryMod) goClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"go_id\" = ?", o.GoID),
	}

	queryMods = append(queryMods, mods...)

	return GoClassifications(queryMods...)
}

// Component pointed to by the foreign key.
func (o *ComponentGo) Component(mods ...qm.QueryMod) componentSequenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"component_id\" = ?", o.ComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentSequences(queryMods...)
}

// LoadGo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentGoL) LoadGo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentGo interface{}, mods queries.Applicator) error {
	var slice []*ComponentGo
	var object *ComponentGo

	if singular {
		object = maybeComponentGo.(*ComponentGo)
	} else {
		slice = *maybeComponentGo.(*[]*ComponentGo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentGoR{}
		}
		args = append(args, object.GoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentGoR{}
			}

			for _, a := range args {
				if a == obj.GoID {
					continue Outer
				}
			}

			args = append(args, obj.GoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`go_classification`),
		qm.WhereIn(`go_classification.go_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoClassification")
	}

	var resultSlice []*GoClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for go_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for go_classification")
	}

	if len(componentGoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Go = foreign
		if foreign.R == nil {
			foreign.R = &goClassificationR{}
		}
		foreign.R.GoComponentGos = append(foreign.R.GoComponentGos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GoID == foreign.GoID {
				local.R.Go = foreign
				if foreign.R == nil {
					foreign.R = &goClassificationR{}
				}
				foreign.R.GoComponentGos = append(foreign.R.GoComponentGos, local)
				break
			}
		}
	}

	return nil
}

// LoadComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentGoL) LoadComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentGo interface{}, mods queries.Applicator) error {
	var slice []*ComponentGo
	var object *ComponentGo

	if singular {
		object = maybeComponentGo.(*ComponentGo)
	} else {
		slice = *maybeComponentGo.(*[]*ComponentGo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentGoR{}
		}
		args = append(args, object.ComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentGoR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_sequences`),
		qm.WhereIn(`component_sequences.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentSequence")
	}

	var resultSlice []*ComponentSequence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentSequence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_sequences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_sequences")
	}

	if len(componentGoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Component = foreign
		if foreign.R == nil {
			foreign.R = &componentSequenceR{}
		}
		foreign.R.ComponentComponentGos = append(foreign.R.ComponentComponentGos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentID == foreign.ComponentID {
				local.R.Component = foreign
				if foreign.R == nil {
					foreign.R = &componentSequenceR{}
				}
				foreign.R.ComponentComponentGos = append(foreign.R.ComponentComponentGos, local)
				break
			}
		}
	}

	return nil
}

// SetGo of the componentGo to the related item.
// Sets o.R.Go to related.
// Adds o to related.R.GoComponentGos.
func (o *ComponentGo) SetGo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_go\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"go_id"}),
		strmangle.WhereClause("\"", "\"", 0, componentGoPrimaryKeyColumns),
	)
	values := []interface{}{related.GoID, o.CompGoID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GoID = related.GoID
	if o.R == nil {
		o.R = &componentGoR{
			Go: related,
		}
	} else {
		o.R.Go = related
	}

	if related.R == nil {
		related.R = &goClassificationR{
			GoComponentGos: ComponentGoSlice{o},
		}
	} else {
		related.R.GoComponentGos = append(related.R.GoComponentGos, o)
	}

	return nil
}

// SetComponent of the componentGo to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentComponentGos.
func (o *ComponentGo) SetComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentSequence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_go\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
		strmangle.WhereClause("\"", "\"", 0, componentGoPrimaryKeyColumns),
	)
	values := []interface{}{related.ComponentID, o.CompGoID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentID = related.ComponentID
	if o.R == nil {
		o.R = &componentGoR{
			Component: related,
		}
	} else {
		o.R.Component = related
	}

	if related.R == nil {
		related.R = &componentSequenceR{
			ComponentComponentGos: ComponentGoSlice{o},
		}
	} else {
		related.R.ComponentComponentGos = append(related.R.ComponentComponentGos, o)
	}

	return nil
}

// ComponentGos retrieves all the records using an executor.
func ComponentGos(mods ...qm.QueryMod) componentGoQuery {
	mods = append(mods, qm.From("\"component_go\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_go\".*"})
	}

	return componentGoQuery{q}
}

// FindComponentGo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentGo(ctx context.Context, exec boil.ContextExecutor, compGoID int64, selectCols ...string) (*ComponentGo, error) {
	componentGoObj := &ComponentGo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_go\" where \"comp_go_id\"=?", sel,
	)

	q := queries.Raw(query, compGoID)

	err := q.Bind(ctx, exec, componentGoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_go")
	}

	if err = componentGoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentGoObj, err
	}

	return componentGoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentGo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_go provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentGoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentGoInsertCacheMut.RLock()
	cache, cached := componentGoInsertCache[key]
	componentGoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentGoAllColumns,
			componentGoColumnsWithDefault,
			componentGoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentGoType, componentGoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentGoType, componentGoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_go\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_go\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_go")
	}

	if !cached {
		componentGoInsertCacheMut.Lock()
		componentGoInsertCache[key] = cache
		componentGoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentGo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentGo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentGoUpdateCacheMut.RLock()
	cache, cached := componentGoUpdateCache[key]
	componentGoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentGoAllColumns,
			componentGoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_go, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_go\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, componentGoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentGoType, componentGoMapping, append(wl, componentGoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_go row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_go")
	}

	if !cached {
		componentGoUpdateCacheMut.Lock()
		componentGoUpdateCache[key] = cache
		componentGoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentGoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_go")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_go")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentGoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentGoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_go\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentGoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentGo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentGo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentGo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_go provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentGoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentGoUpsertCacheMut.RLock()
	cache, cached := componentGoUpsertCache[key]
	componentGoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentGoAllColumns,
			componentGoColumnsWithDefault,
			componentGoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			componentGoAllColumns,
			componentGoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_go, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentGoPrimaryKeyColumns))
			copy(conflict, componentGoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"component_go\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentGoType, componentGoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentGoType, componentGoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_go")
	}

	if !cached {
		componentGoUpsertCacheMut.Lock()
		componentGoUpsertCache[key] = cache
		componentGoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ComponentGo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentGo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentGo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentGoPrimaryKeyMapping)
	sql := "DELETE FROM \"component_go\" WHERE \"comp_go_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_go")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_go")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentGoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentGoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_go")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_go")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentGoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentGoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentGoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_go\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentGoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentGo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_go")
	}

	if len(componentGoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentGo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentGo(ctx, exec, o.CompGoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentGoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentGoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentGoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_go\".* FROM \"component_go\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentGoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentGoSlice")
	}

	*o = slice

	return nil
}

// ComponentGoExists checks if the ComponentGo row exists.
func ComponentGoExists(ctx context.Context, exec boil.ContextExecutor, compGoID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_go\" where \"comp_go_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, compGoID)
	}
	row := exec.QueryRowContext(ctx, sql, compGoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_go exists")
	}

	return exists, nil
}
