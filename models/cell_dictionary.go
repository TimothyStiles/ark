// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CellDictionary is an object representing the database table.
type CellDictionary struct {
	CellID             int64       `boil:"cell_id" json:"cell_id" toml:"cell_id" yaml:"cell_id"`
	CellName           string      `boil:"cell_name" json:"cell_name" toml:"cell_name" yaml:"cell_name"`
	CellDescription    null.String `boil:"cell_description" json:"cell_description,omitempty" toml:"cell_description" yaml:"cell_description,omitempty"`
	CellSourceTissue   null.String `boil:"cell_source_tissue" json:"cell_source_tissue,omitempty" toml:"cell_source_tissue" yaml:"cell_source_tissue,omitempty"`
	CellSourceOrganism null.String `boil:"cell_source_organism" json:"cell_source_organism,omitempty" toml:"cell_source_organism" yaml:"cell_source_organism,omitempty"`
	CellSourceTaxID    null.Int64  `boil:"cell_source_tax_id" json:"cell_source_tax_id,omitempty" toml:"cell_source_tax_id" yaml:"cell_source_tax_id,omitempty"`
	CloID              null.String `boil:"clo_id" json:"clo_id,omitempty" toml:"clo_id" yaml:"clo_id,omitempty"`
	EfoID              null.String `boil:"efo_id" json:"efo_id,omitempty" toml:"efo_id" yaml:"efo_id,omitempty"`
	CellosaurusID      null.String `boil:"cellosaurus_id" json:"cellosaurus_id,omitempty" toml:"cellosaurus_id" yaml:"cellosaurus_id,omitempty"`
	CLLincsID          null.String `boil:"cl_lincs_id" json:"cl_lincs_id,omitempty" toml:"cl_lincs_id" yaml:"cl_lincs_id,omitempty"`
	ChemblID           null.String `boil:"chembl_id" json:"chembl_id,omitempty" toml:"chembl_id" yaml:"chembl_id,omitempty"`
	CellOntologyID     null.String `boil:"cell_ontology_id" json:"cell_ontology_id,omitempty" toml:"cell_ontology_id" yaml:"cell_ontology_id,omitempty"`

	R *cellDictionaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cellDictionaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CellDictionaryColumns = struct {
	CellID             string
	CellName           string
	CellDescription    string
	CellSourceTissue   string
	CellSourceOrganism string
	CellSourceTaxID    string
	CloID              string
	EfoID              string
	CellosaurusID      string
	CLLincsID          string
	ChemblID           string
	CellOntologyID     string
}{
	CellID:             "cell_id",
	CellName:           "cell_name",
	CellDescription:    "cell_description",
	CellSourceTissue:   "cell_source_tissue",
	CellSourceOrganism: "cell_source_organism",
	CellSourceTaxID:    "cell_source_tax_id",
	CloID:              "clo_id",
	EfoID:              "efo_id",
	CellosaurusID:      "cellosaurus_id",
	CLLincsID:          "cl_lincs_id",
	ChemblID:           "chembl_id",
	CellOntologyID:     "cell_ontology_id",
}

var CellDictionaryTableColumns = struct {
	CellID             string
	CellName           string
	CellDescription    string
	CellSourceTissue   string
	CellSourceOrganism string
	CellSourceTaxID    string
	CloID              string
	EfoID              string
	CellosaurusID      string
	CLLincsID          string
	ChemblID           string
	CellOntologyID     string
}{
	CellID:             "cell_dictionary.cell_id",
	CellName:           "cell_dictionary.cell_name",
	CellDescription:    "cell_dictionary.cell_description",
	CellSourceTissue:   "cell_dictionary.cell_source_tissue",
	CellSourceOrganism: "cell_dictionary.cell_source_organism",
	CellSourceTaxID:    "cell_dictionary.cell_source_tax_id",
	CloID:              "cell_dictionary.clo_id",
	EfoID:              "cell_dictionary.efo_id",
	CellosaurusID:      "cell_dictionary.cellosaurus_id",
	CLLincsID:          "cell_dictionary.cl_lincs_id",
	ChemblID:           "cell_dictionary.chembl_id",
	CellOntologyID:     "cell_dictionary.cell_ontology_id",
}

// Generated where

var CellDictionaryWhere = struct {
	CellID             whereHelperint64
	CellName           whereHelperstring
	CellDescription    whereHelpernull_String
	CellSourceTissue   whereHelpernull_String
	CellSourceOrganism whereHelpernull_String
	CellSourceTaxID    whereHelpernull_Int64
	CloID              whereHelpernull_String
	EfoID              whereHelpernull_String
	CellosaurusID      whereHelpernull_String
	CLLincsID          whereHelpernull_String
	ChemblID           whereHelpernull_String
	CellOntologyID     whereHelpernull_String
}{
	CellID:             whereHelperint64{field: "\"cell_dictionary\".\"cell_id\""},
	CellName:           whereHelperstring{field: "\"cell_dictionary\".\"cell_name\""},
	CellDescription:    whereHelpernull_String{field: "\"cell_dictionary\".\"cell_description\""},
	CellSourceTissue:   whereHelpernull_String{field: "\"cell_dictionary\".\"cell_source_tissue\""},
	CellSourceOrganism: whereHelpernull_String{field: "\"cell_dictionary\".\"cell_source_organism\""},
	CellSourceTaxID:    whereHelpernull_Int64{field: "\"cell_dictionary\".\"cell_source_tax_id\""},
	CloID:              whereHelpernull_String{field: "\"cell_dictionary\".\"clo_id\""},
	EfoID:              whereHelpernull_String{field: "\"cell_dictionary\".\"efo_id\""},
	CellosaurusID:      whereHelpernull_String{field: "\"cell_dictionary\".\"cellosaurus_id\""},
	CLLincsID:          whereHelpernull_String{field: "\"cell_dictionary\".\"cl_lincs_id\""},
	ChemblID:           whereHelpernull_String{field: "\"cell_dictionary\".\"chembl_id\""},
	CellOntologyID:     whereHelpernull_String{field: "\"cell_dictionary\".\"cell_ontology_id\""},
}

// CellDictionaryRels is where relationship names are stored.
var CellDictionaryRels = struct {
	Chembl     string
	CellAssays string
}{
	Chembl:     "Chembl",
	CellAssays: "CellAssays",
}

// cellDictionaryR is where relationships are stored.
type cellDictionaryR struct {
	Chembl     *ChemblIDLookup `boil:"Chembl" json:"Chembl" toml:"Chembl" yaml:"Chembl"`
	CellAssays AssaySlice      `boil:"CellAssays" json:"CellAssays" toml:"CellAssays" yaml:"CellAssays"`
}

// NewStruct creates a new relationship struct
func (*cellDictionaryR) NewStruct() *cellDictionaryR {
	return &cellDictionaryR{}
}

func (r *cellDictionaryR) GetChembl() *ChemblIDLookup {
	if r == nil {
		return nil
	}
	return r.Chembl
}

func (r *cellDictionaryR) GetCellAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.CellAssays
}

// cellDictionaryL is where Load methods for each relationship are stored.
type cellDictionaryL struct{}

var (
	cellDictionaryAllColumns            = []string{"cell_id", "cell_name", "cell_description", "cell_source_tissue", "cell_source_organism", "cell_source_tax_id", "clo_id", "efo_id", "cellosaurus_id", "cl_lincs_id", "chembl_id", "cell_ontology_id"}
	cellDictionaryColumnsWithoutDefault = []string{"cell_id", "cell_name"}
	cellDictionaryColumnsWithDefault    = []string{"cell_description", "cell_source_tissue", "cell_source_organism", "cell_source_tax_id", "clo_id", "efo_id", "cellosaurus_id", "cl_lincs_id", "chembl_id", "cell_ontology_id"}
	cellDictionaryPrimaryKeyColumns     = []string{"cell_id"}
	cellDictionaryGeneratedColumns      = []string{}
)

type (
	// CellDictionarySlice is an alias for a slice of pointers to CellDictionary.
	// This should almost always be used instead of []CellDictionary.
	CellDictionarySlice []*CellDictionary
	// CellDictionaryHook is the signature for custom CellDictionary hook methods
	CellDictionaryHook func(context.Context, boil.ContextExecutor, *CellDictionary) error

	cellDictionaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cellDictionaryType                 = reflect.TypeOf(&CellDictionary{})
	cellDictionaryMapping              = queries.MakeStructMapping(cellDictionaryType)
	cellDictionaryPrimaryKeyMapping, _ = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, cellDictionaryPrimaryKeyColumns)
	cellDictionaryInsertCacheMut       sync.RWMutex
	cellDictionaryInsertCache          = make(map[string]insertCache)
	cellDictionaryUpdateCacheMut       sync.RWMutex
	cellDictionaryUpdateCache          = make(map[string]updateCache)
	cellDictionaryUpsertCacheMut       sync.RWMutex
	cellDictionaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cellDictionaryAfterSelectHooks []CellDictionaryHook

var cellDictionaryBeforeInsertHooks []CellDictionaryHook
var cellDictionaryAfterInsertHooks []CellDictionaryHook

var cellDictionaryBeforeUpdateHooks []CellDictionaryHook
var cellDictionaryAfterUpdateHooks []CellDictionaryHook

var cellDictionaryBeforeDeleteHooks []CellDictionaryHook
var cellDictionaryAfterDeleteHooks []CellDictionaryHook

var cellDictionaryBeforeUpsertHooks []CellDictionaryHook
var cellDictionaryAfterUpsertHooks []CellDictionaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CellDictionary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CellDictionary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CellDictionary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CellDictionary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CellDictionary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CellDictionary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CellDictionary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CellDictionary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CellDictionary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cellDictionaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCellDictionaryHook registers your hook function for all future operations.
func AddCellDictionaryHook(hookPoint boil.HookPoint, cellDictionaryHook CellDictionaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cellDictionaryAfterSelectHooks = append(cellDictionaryAfterSelectHooks, cellDictionaryHook)
	case boil.BeforeInsertHook:
		cellDictionaryBeforeInsertHooks = append(cellDictionaryBeforeInsertHooks, cellDictionaryHook)
	case boil.AfterInsertHook:
		cellDictionaryAfterInsertHooks = append(cellDictionaryAfterInsertHooks, cellDictionaryHook)
	case boil.BeforeUpdateHook:
		cellDictionaryBeforeUpdateHooks = append(cellDictionaryBeforeUpdateHooks, cellDictionaryHook)
	case boil.AfterUpdateHook:
		cellDictionaryAfterUpdateHooks = append(cellDictionaryAfterUpdateHooks, cellDictionaryHook)
	case boil.BeforeDeleteHook:
		cellDictionaryBeforeDeleteHooks = append(cellDictionaryBeforeDeleteHooks, cellDictionaryHook)
	case boil.AfterDeleteHook:
		cellDictionaryAfterDeleteHooks = append(cellDictionaryAfterDeleteHooks, cellDictionaryHook)
	case boil.BeforeUpsertHook:
		cellDictionaryBeforeUpsertHooks = append(cellDictionaryBeforeUpsertHooks, cellDictionaryHook)
	case boil.AfterUpsertHook:
		cellDictionaryAfterUpsertHooks = append(cellDictionaryAfterUpsertHooks, cellDictionaryHook)
	}
}

// One returns a single cellDictionary record from the query.
func (q cellDictionaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CellDictionary, error) {
	o := &CellDictionary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cell_dictionary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CellDictionary records from the query.
func (q cellDictionaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CellDictionarySlice, error) {
	var o []*CellDictionary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CellDictionary slice")
	}

	if len(cellDictionaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CellDictionary records in the query.
func (q cellDictionaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cell_dictionary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cellDictionaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cell_dictionary exists")
	}

	return count > 0, nil
}

// Chembl pointed to by the foreign key.
func (o *CellDictionary) Chembl(mods ...qm.QueryMod) chemblIDLookupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return ChemblIDLookups(queryMods...)
}

// CellAssays retrieves all the assay's Assays with an executor via cell_id column.
func (o *CellDictionary) CellAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"cell_id\"=?", o.CellID),
	)

	return Assays(queryMods...)
}

// LoadChembl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cellDictionaryL) LoadChembl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCellDictionary interface{}, mods queries.Applicator) error {
	var slice []*CellDictionary
	var object *CellDictionary

	if singular {
		object = maybeCellDictionary.(*CellDictionary)
	} else {
		slice = *maybeCellDictionary.(*[]*CellDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cellDictionaryR{}
		}
		if !queries.IsNil(object.ChemblID) {
			args = append(args, object.ChemblID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cellDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChemblID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChemblID) {
				args = append(args, obj.ChemblID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chembl_id_lookup`),
		qm.WhereIn(`chembl_id_lookup.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChemblIDLookup")
	}

	var resultSlice []*ChemblIDLookup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChemblIDLookup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chembl_id_lookup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chembl_id_lookup")
	}

	if len(cellDictionaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chembl = foreign
		if foreign.R == nil {
			foreign.R = &chemblIDLookupR{}
		}
		foreign.R.ChemblCellDictionary = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChemblID, foreign.ChemblID) {
				local.R.Chembl = foreign
				if foreign.R == nil {
					foreign.R = &chemblIDLookupR{}
				}
				foreign.R.ChemblCellDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadCellAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cellDictionaryL) LoadCellAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCellDictionary interface{}, mods queries.Applicator) error {
	var slice []*CellDictionary
	var object *CellDictionary

	if singular {
		object = maybeCellDictionary.(*CellDictionary)
	} else {
		slice = *maybeCellDictionary.(*[]*CellDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cellDictionaryR{}
		}
		args = append(args, object.CellID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cellDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CellID) {
					continue Outer
				}
			}

			args = append(args, obj.CellID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.cell_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CellAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.Cell = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CellID, foreign.CellID) {
				local.R.CellAssays = append(local.R.CellAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.Cell = local
				break
			}
		}
	}

	return nil
}

// SetChembl of the cellDictionary to the related item.
// Sets o.R.Chembl to related.
// Adds o to related.R.ChemblCellDictionary.
func (o *CellDictionary) SetChembl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChemblIDLookup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cell_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
		strmangle.WhereClause("\"", "\"", 0, cellDictionaryPrimaryKeyColumns),
	)
	values := []interface{}{related.ChemblID, o.CellID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChemblID, related.ChemblID)
	if o.R == nil {
		o.R = &cellDictionaryR{
			Chembl: related,
		}
	} else {
		o.R.Chembl = related
	}

	if related.R == nil {
		related.R = &chemblIDLookupR{
			ChemblCellDictionary: o,
		}
	} else {
		related.R.ChemblCellDictionary = o
	}

	return nil
}

// RemoveChembl relationship.
// Sets o.R.Chembl to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CellDictionary) RemoveChembl(ctx context.Context, exec boil.ContextExecutor, related *ChemblIDLookup) error {
	var err error

	queries.SetScanner(&o.ChemblID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("chembl_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Chembl = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ChemblCellDictionary = nil
	return nil
}

// AddCellAssays adds the given related objects to the existing relationships
// of the cell_dictionary, optionally inserting them as new records.
// Appends related to o.R.CellAssays.
// Sets related.R.Cell appropriately.
func (o *CellDictionary) AddCellAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CellID, o.CellID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"cell_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.CellID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CellID, o.CellID)
		}
	}

	if o.R == nil {
		o.R = &cellDictionaryR{
			CellAssays: related,
		}
	} else {
		o.R.CellAssays = append(o.R.CellAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				Cell: o,
			}
		} else {
			rel.R.Cell = o
		}
	}
	return nil
}

// SetCellAssays removes all previously related items of the
// cell_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Cell's CellAssays accordingly.
// Replaces o.R.CellAssays with related.
// Sets related.R.Cell's CellAssays accordingly.
func (o *CellDictionary) SetCellAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"cell_id\" = null where \"cell_id\" = ?"
	values := []interface{}{o.CellID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CellAssays {
			queries.SetScanner(&rel.CellID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Cell = nil
		}
		o.R.CellAssays = nil
	}

	return o.AddCellAssays(ctx, exec, insert, related...)
}

// RemoveCellAssays relationships from objects passed in.
// Removes related items from R.CellAssays (uses pointer comparison, removal does not keep order)
// Sets related.R.Cell.
func (o *CellDictionary) RemoveCellAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CellID, nil)
		if rel.R != nil {
			rel.R.Cell = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("cell_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CellAssays {
			if rel != ri {
				continue
			}

			ln := len(o.R.CellAssays)
			if ln > 1 && i < ln-1 {
				o.R.CellAssays[i] = o.R.CellAssays[ln-1]
			}
			o.R.CellAssays = o.R.CellAssays[:ln-1]
			break
		}
	}

	return nil
}

// CellDictionaries retrieves all the records using an executor.
func CellDictionaries(mods ...qm.QueryMod) cellDictionaryQuery {
	mods = append(mods, qm.From("\"cell_dictionary\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cell_dictionary\".*"})
	}

	return cellDictionaryQuery{q}
}

// FindCellDictionary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCellDictionary(ctx context.Context, exec boil.ContextExecutor, cellID int64, selectCols ...string) (*CellDictionary, error) {
	cellDictionaryObj := &CellDictionary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cell_dictionary\" where \"cell_id\"=?", sel,
	)

	q := queries.Raw(query, cellID)

	err := q.Bind(ctx, exec, cellDictionaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cell_dictionary")
	}

	if err = cellDictionaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cellDictionaryObj, err
	}

	return cellDictionaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CellDictionary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cell_dictionary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cellDictionaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cellDictionaryInsertCacheMut.RLock()
	cache, cached := cellDictionaryInsertCache[key]
	cellDictionaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cellDictionaryAllColumns,
			cellDictionaryColumnsWithDefault,
			cellDictionaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cell_dictionary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cell_dictionary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cell_dictionary")
	}

	if !cached {
		cellDictionaryInsertCacheMut.Lock()
		cellDictionaryInsertCache[key] = cache
		cellDictionaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CellDictionary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CellDictionary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cellDictionaryUpdateCacheMut.RLock()
	cache, cached := cellDictionaryUpdateCache[key]
	cellDictionaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cellDictionaryAllColumns,
			cellDictionaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cell_dictionary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cell_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, cellDictionaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, append(wl, cellDictionaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cell_dictionary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cell_dictionary")
	}

	if !cached {
		cellDictionaryUpdateCacheMut.Lock()
		cellDictionaryUpdateCache[key] = cache
		cellDictionaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cellDictionaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cell_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cell_dictionary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CellDictionarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cell_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cellDictionaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cellDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cellDictionary")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CellDictionary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cell_dictionary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cellDictionaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cellDictionaryUpsertCacheMut.RLock()
	cache, cached := cellDictionaryUpsertCache[key]
	cellDictionaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cellDictionaryAllColumns,
			cellDictionaryColumnsWithDefault,
			cellDictionaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cellDictionaryAllColumns,
			cellDictionaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cell_dictionary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cellDictionaryPrimaryKeyColumns))
			copy(conflict, cellDictionaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"cell_dictionary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cellDictionaryType, cellDictionaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cell_dictionary")
	}

	if !cached {
		cellDictionaryUpsertCacheMut.Lock()
		cellDictionaryUpsertCache[key] = cache
		cellDictionaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CellDictionary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CellDictionary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CellDictionary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cellDictionaryPrimaryKeyMapping)
	sql := "DELETE FROM \"cell_dictionary\" WHERE \"cell_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cell_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cell_dictionary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cellDictionaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cellDictionaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cell_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cell_dictionary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CellDictionarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cellDictionaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cell_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cellDictionaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cellDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cell_dictionary")
	}

	if len(cellDictionaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CellDictionary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCellDictionary(ctx, exec, o.CellID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CellDictionarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CellDictionarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cellDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cell_dictionary\".* FROM \"cell_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cellDictionaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CellDictionarySlice")
	}

	*o = slice

	return nil
}

// CellDictionaryExists checks if the CellDictionary row exists.
func CellDictionaryExists(ctx context.Context, exec boil.ContextExecutor, cellID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cell_dictionary\" where \"cell_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cellID)
	}
	row := exec.QueryRowContext(ctx, sql, cellID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cell_dictionary exists")
	}

	return exists, nil
}
