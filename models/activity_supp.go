// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ActivitySupp is an object representing the database table.
type ActivitySupp struct {
	AsID              int64             `boil:"as_id" json:"as_id" toml:"as_id" yaml:"as_id"`
	Rgid              int64             `boil:"rgid" json:"rgid" toml:"rgid" yaml:"rgid"`
	Smid              null.Int64        `boil:"smid" json:"smid,omitempty" toml:"smid" yaml:"smid,omitempty"`
	Type              string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	Relation          null.String       `boil:"relation" json:"relation,omitempty" toml:"relation" yaml:"relation,omitempty"`
	Value             types.NullDecimal `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Units             null.String       `boil:"units" json:"units,omitempty" toml:"units" yaml:"units,omitempty"`
	TextValue         null.String       `boil:"text_value" json:"text_value,omitempty" toml:"text_value" yaml:"text_value,omitempty"`
	StandardType      null.String       `boil:"standard_type" json:"standard_type,omitempty" toml:"standard_type" yaml:"standard_type,omitempty"`
	StandardRelation  null.String       `boil:"standard_relation" json:"standard_relation,omitempty" toml:"standard_relation" yaml:"standard_relation,omitempty"`
	StandardValue     types.NullDecimal `boil:"standard_value" json:"standard_value,omitempty" toml:"standard_value" yaml:"standard_value,omitempty"`
	StandardUnits     null.String       `boil:"standard_units" json:"standard_units,omitempty" toml:"standard_units" yaml:"standard_units,omitempty"`
	StandardTextValue null.String       `boil:"standard_text_value" json:"standard_text_value,omitempty" toml:"standard_text_value" yaml:"standard_text_value,omitempty"`
	Comments          null.String       `boil:"comments" json:"comments,omitempty" toml:"comments" yaml:"comments,omitempty"`

	R *activitySuppR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activitySuppL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActivitySuppColumns = struct {
	AsID              string
	Rgid              string
	Smid              string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
}{
	AsID:              "as_id",
	Rgid:              "rgid",
	Smid:              "smid",
	Type:              "type",
	Relation:          "relation",
	Value:             "value",
	Units:             "units",
	TextValue:         "text_value",
	StandardType:      "standard_type",
	StandardRelation:  "standard_relation",
	StandardValue:     "standard_value",
	StandardUnits:     "standard_units",
	StandardTextValue: "standard_text_value",
	Comments:          "comments",
}

var ActivitySuppTableColumns = struct {
	AsID              string
	Rgid              string
	Smid              string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
}{
	AsID:              "activity_supp.as_id",
	Rgid:              "activity_supp.rgid",
	Smid:              "activity_supp.smid",
	Type:              "activity_supp.type",
	Relation:          "activity_supp.relation",
	Value:             "activity_supp.value",
	Units:             "activity_supp.units",
	TextValue:         "activity_supp.text_value",
	StandardType:      "activity_supp.standard_type",
	StandardRelation:  "activity_supp.standard_relation",
	StandardValue:     "activity_supp.standard_value",
	StandardUnits:     "activity_supp.standard_units",
	StandardTextValue: "activity_supp.standard_text_value",
	Comments:          "activity_supp.comments",
}

// Generated where

var ActivitySuppWhere = struct {
	AsID              whereHelperint64
	Rgid              whereHelperint64
	Smid              whereHelpernull_Int64
	Type              whereHelperstring
	Relation          whereHelpernull_String
	Value             whereHelpertypes_NullDecimal
	Units             whereHelpernull_String
	TextValue         whereHelpernull_String
	StandardType      whereHelpernull_String
	StandardRelation  whereHelpernull_String
	StandardValue     whereHelpertypes_NullDecimal
	StandardUnits     whereHelpernull_String
	StandardTextValue whereHelpernull_String
	Comments          whereHelpernull_String
}{
	AsID:              whereHelperint64{field: "\"activity_supp\".\"as_id\""},
	Rgid:              whereHelperint64{field: "\"activity_supp\".\"rgid\""},
	Smid:              whereHelpernull_Int64{field: "\"activity_supp\".\"smid\""},
	Type:              whereHelperstring{field: "\"activity_supp\".\"type\""},
	Relation:          whereHelpernull_String{field: "\"activity_supp\".\"relation\""},
	Value:             whereHelpertypes_NullDecimal{field: "\"activity_supp\".\"value\""},
	Units:             whereHelpernull_String{field: "\"activity_supp\".\"units\""},
	TextValue:         whereHelpernull_String{field: "\"activity_supp\".\"text_value\""},
	StandardType:      whereHelpernull_String{field: "\"activity_supp\".\"standard_type\""},
	StandardRelation:  whereHelpernull_String{field: "\"activity_supp\".\"standard_relation\""},
	StandardValue:     whereHelpertypes_NullDecimal{field: "\"activity_supp\".\"standard_value\""},
	StandardUnits:     whereHelpernull_String{field: "\"activity_supp\".\"standard_units\""},
	StandardTextValue: whereHelpernull_String{field: "\"activity_supp\".\"standard_text_value\""},
	Comments:          whereHelpernull_String{field: "\"activity_supp\".\"comments\""},
}

// ActivitySuppRels is where relationship names are stored.
var ActivitySuppRels = struct {
	SmidActivitySmid string
}{
	SmidActivitySmid: "SmidActivitySmid",
}

// activitySuppR is where relationships are stored.
type activitySuppR struct {
	SmidActivitySmid *ActivitySmid `boil:"SmidActivitySmid" json:"SmidActivitySmid" toml:"SmidActivitySmid" yaml:"SmidActivitySmid"`
}

// NewStruct creates a new relationship struct
func (*activitySuppR) NewStruct() *activitySuppR {
	return &activitySuppR{}
}

func (r *activitySuppR) GetSmidActivitySmid() *ActivitySmid {
	if r == nil {
		return nil
	}
	return r.SmidActivitySmid
}

// activitySuppL is where Load methods for each relationship are stored.
type activitySuppL struct{}

var (
	activitySuppAllColumns            = []string{"as_id", "rgid", "smid", "type", "relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments"}
	activitySuppColumnsWithoutDefault = []string{"as_id", "rgid", "type"}
	activitySuppColumnsWithDefault    = []string{"smid", "relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments"}
	activitySuppPrimaryKeyColumns     = []string{"as_id"}
	activitySuppGeneratedColumns      = []string{}
)

type (
	// ActivitySuppSlice is an alias for a slice of pointers to ActivitySupp.
	// This should almost always be used instead of []ActivitySupp.
	ActivitySuppSlice []*ActivitySupp
	// ActivitySuppHook is the signature for custom ActivitySupp hook methods
	ActivitySuppHook func(context.Context, boil.ContextExecutor, *ActivitySupp) error

	activitySuppQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activitySuppType                 = reflect.TypeOf(&ActivitySupp{})
	activitySuppMapping              = queries.MakeStructMapping(activitySuppType)
	activitySuppPrimaryKeyMapping, _ = queries.BindMapping(activitySuppType, activitySuppMapping, activitySuppPrimaryKeyColumns)
	activitySuppInsertCacheMut       sync.RWMutex
	activitySuppInsertCache          = make(map[string]insertCache)
	activitySuppUpdateCacheMut       sync.RWMutex
	activitySuppUpdateCache          = make(map[string]updateCache)
	activitySuppUpsertCacheMut       sync.RWMutex
	activitySuppUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activitySuppAfterSelectHooks []ActivitySuppHook

var activitySuppBeforeInsertHooks []ActivitySuppHook
var activitySuppAfterInsertHooks []ActivitySuppHook

var activitySuppBeforeUpdateHooks []ActivitySuppHook
var activitySuppAfterUpdateHooks []ActivitySuppHook

var activitySuppBeforeDeleteHooks []ActivitySuppHook
var activitySuppAfterDeleteHooks []ActivitySuppHook

var activitySuppBeforeUpsertHooks []ActivitySuppHook
var activitySuppAfterUpsertHooks []ActivitySuppHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActivitySupp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActivitySupp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActivitySupp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActivitySupp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActivitySupp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActivitySupp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActivitySupp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActivitySupp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActivitySupp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActivitySuppHook registers your hook function for all future operations.
func AddActivitySuppHook(hookPoint boil.HookPoint, activitySuppHook ActivitySuppHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activitySuppAfterSelectHooks = append(activitySuppAfterSelectHooks, activitySuppHook)
	case boil.BeforeInsertHook:
		activitySuppBeforeInsertHooks = append(activitySuppBeforeInsertHooks, activitySuppHook)
	case boil.AfterInsertHook:
		activitySuppAfterInsertHooks = append(activitySuppAfterInsertHooks, activitySuppHook)
	case boil.BeforeUpdateHook:
		activitySuppBeforeUpdateHooks = append(activitySuppBeforeUpdateHooks, activitySuppHook)
	case boil.AfterUpdateHook:
		activitySuppAfterUpdateHooks = append(activitySuppAfterUpdateHooks, activitySuppHook)
	case boil.BeforeDeleteHook:
		activitySuppBeforeDeleteHooks = append(activitySuppBeforeDeleteHooks, activitySuppHook)
	case boil.AfterDeleteHook:
		activitySuppAfterDeleteHooks = append(activitySuppAfterDeleteHooks, activitySuppHook)
	case boil.BeforeUpsertHook:
		activitySuppBeforeUpsertHooks = append(activitySuppBeforeUpsertHooks, activitySuppHook)
	case boil.AfterUpsertHook:
		activitySuppAfterUpsertHooks = append(activitySuppAfterUpsertHooks, activitySuppHook)
	}
}

// One returns a single activitySupp record from the query.
func (q activitySuppQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActivitySupp, error) {
	o := &ActivitySupp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for activity_supp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActivitySupp records from the query.
func (q activitySuppQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActivitySuppSlice, error) {
	var o []*ActivitySupp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActivitySupp slice")
	}

	if len(activitySuppAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActivitySupp records in the query.
func (q activitySuppQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count activity_supp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q activitySuppQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if activity_supp exists")
	}

	return count > 0, nil
}

// SmidActivitySmid pointed to by the foreign key.
func (o *ActivitySupp) SmidActivitySmid(mods ...qm.QueryMod) activitySmidQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"smid\" = ?", o.Smid),
	}

	queryMods = append(queryMods, mods...)

	return ActivitySmids(queryMods...)
}

// LoadSmidActivitySmid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activitySuppL) LoadSmidActivitySmid(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivitySupp interface{}, mods queries.Applicator) error {
	var slice []*ActivitySupp
	var object *ActivitySupp

	if singular {
		object = maybeActivitySupp.(*ActivitySupp)
	} else {
		slice = *maybeActivitySupp.(*[]*ActivitySupp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activitySuppR{}
		}
		if !queries.IsNil(object.Smid) {
			args = append(args, object.Smid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activitySuppR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Smid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Smid) {
				args = append(args, obj.Smid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activity_smid`),
		qm.WhereIn(`activity_smid.smid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActivitySmid")
	}

	var resultSlice []*ActivitySmid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActivitySmid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activity_smid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activity_smid")
	}

	if len(activitySuppAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SmidActivitySmid = foreign
		if foreign.R == nil {
			foreign.R = &activitySmidR{}
		}
		foreign.R.SmidActivitySupps = append(foreign.R.SmidActivitySupps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Smid, foreign.Smid) {
				local.R.SmidActivitySmid = foreign
				if foreign.R == nil {
					foreign.R = &activitySmidR{}
				}
				foreign.R.SmidActivitySupps = append(foreign.R.SmidActivitySupps, local)
				break
			}
		}
	}

	return nil
}

// SetSmidActivitySmid of the activitySupp to the related item.
// Sets o.R.SmidActivitySmid to related.
// Adds o to related.R.SmidActivitySupps.
func (o *ActivitySupp) SetSmidActivitySmid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActivitySmid) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"activity_supp\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"smid"}),
		strmangle.WhereClause("\"", "\"", 0, activitySuppPrimaryKeyColumns),
	)
	values := []interface{}{related.Smid, o.AsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Smid, related.Smid)
	if o.R == nil {
		o.R = &activitySuppR{
			SmidActivitySmid: related,
		}
	} else {
		o.R.SmidActivitySmid = related
	}

	if related.R == nil {
		related.R = &activitySmidR{
			SmidActivitySupps: ActivitySuppSlice{o},
		}
	} else {
		related.R.SmidActivitySupps = append(related.R.SmidActivitySupps, o)
	}

	return nil
}

// RemoveSmidActivitySmid relationship.
// Sets o.R.SmidActivitySmid to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ActivitySupp) RemoveSmidActivitySmid(ctx context.Context, exec boil.ContextExecutor, related *ActivitySmid) error {
	var err error

	queries.SetScanner(&o.Smid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("smid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SmidActivitySmid = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SmidActivitySupps {
		if queries.Equal(o.Smid, ri.Smid) {
			continue
		}

		ln := len(related.R.SmidActivitySupps)
		if ln > 1 && i < ln-1 {
			related.R.SmidActivitySupps[i] = related.R.SmidActivitySupps[ln-1]
		}
		related.R.SmidActivitySupps = related.R.SmidActivitySupps[:ln-1]
		break
	}
	return nil
}

// ActivitySupps retrieves all the records using an executor.
func ActivitySupps(mods ...qm.QueryMod) activitySuppQuery {
	mods = append(mods, qm.From("\"activity_supp\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"activity_supp\".*"})
	}

	return activitySuppQuery{q}
}

// FindActivitySupp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActivitySupp(ctx context.Context, exec boil.ContextExecutor, asID int64, selectCols ...string) (*ActivitySupp, error) {
	activitySuppObj := &ActivitySupp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"activity_supp\" where \"as_id\"=?", sel,
	)

	q := queries.Raw(query, asID)

	err := q.Bind(ctx, exec, activitySuppObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from activity_supp")
	}

	if err = activitySuppObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activitySuppObj, err
	}

	return activitySuppObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActivitySupp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_supp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySuppColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activitySuppInsertCacheMut.RLock()
	cache, cached := activitySuppInsertCache[key]
	activitySuppInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activitySuppAllColumns,
			activitySuppColumnsWithDefault,
			activitySuppColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activitySuppType, activitySuppMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activitySuppType, activitySuppMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"activity_supp\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"activity_supp\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into activity_supp")
	}

	if !cached {
		activitySuppInsertCacheMut.Lock()
		activitySuppInsertCache[key] = cache
		activitySuppInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActivitySupp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActivitySupp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activitySuppUpdateCacheMut.RLock()
	cache, cached := activitySuppUpdateCache[key]
	activitySuppUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activitySuppAllColumns,
			activitySuppPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update activity_supp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"activity_supp\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, activitySuppPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activitySuppType, activitySuppMapping, append(wl, activitySuppPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update activity_supp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for activity_supp")
	}

	if !cached {
		activitySuppUpdateCacheMut.Lock()
		activitySuppUpdateCache[key] = cache
		activitySuppUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q activitySuppQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for activity_supp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for activity_supp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActivitySuppSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"activity_supp\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activitySupp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activitySupp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActivitySupp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_supp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySuppColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activitySuppUpsertCacheMut.RLock()
	cache, cached := activitySuppUpsertCache[key]
	activitySuppUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activitySuppAllColumns,
			activitySuppColumnsWithDefault,
			activitySuppColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			activitySuppAllColumns,
			activitySuppPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert activity_supp, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(activitySuppPrimaryKeyColumns))
			copy(conflict, activitySuppPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"activity_supp\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(activitySuppType, activitySuppMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activitySuppType, activitySuppMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert activity_supp")
	}

	if !cached {
		activitySuppUpsertCacheMut.Lock()
		activitySuppUpsertCache[key] = cache
		activitySuppUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActivitySupp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActivitySupp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActivitySupp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activitySuppPrimaryKeyMapping)
	sql := "DELETE FROM \"activity_supp\" WHERE \"as_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from activity_supp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for activity_supp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q activitySuppQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activitySuppQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activity_supp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_supp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActivitySuppSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activitySuppBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"activity_supp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activitySupp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_supp")
	}

	if len(activitySuppAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActivitySupp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActivitySupp(ctx, exec, o.AsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActivitySuppSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActivitySuppSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"activity_supp\".* FROM \"activity_supp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActivitySuppSlice")
	}

	*o = slice

	return nil
}

// ActivitySuppExists checks if the ActivitySupp row exists.
func ActivitySuppExists(ctx context.Context, exec boil.ContextExecutor, asID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"activity_supp\" where \"as_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, asID)
	}
	row := exec.QueryRowContext(ctx, sql, asID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if activity_supp exists")
	}

	return exists, nil
}
