// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Biotherapeutic is an object representing the database table.
type Biotherapeutic struct {
	Molregno     int64       `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	HelmNotation null.String `boil:"helm_notation" json:"helm_notation,omitempty" toml:"helm_notation" yaml:"helm_notation,omitempty"`

	R *biotherapeuticR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L biotherapeuticL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BiotherapeuticColumns = struct {
	Molregno     string
	Description  string
	HelmNotation string
}{
	Molregno:     "molregno",
	Description:  "description",
	HelmNotation: "helm_notation",
}

var BiotherapeuticTableColumns = struct {
	Molregno     string
	Description  string
	HelmNotation string
}{
	Molregno:     "biotherapeutics.molregno",
	Description:  "biotherapeutics.description",
	HelmNotation: "biotherapeutics.helm_notation",
}

// Generated where

var BiotherapeuticWhere = struct {
	Molregno     whereHelperint64
	Description  whereHelpernull_String
	HelmNotation whereHelpernull_String
}{
	Molregno:     whereHelperint64{field: "\"biotherapeutics\".\"molregno\""},
	Description:  whereHelpernull_String{field: "\"biotherapeutics\".\"description\""},
	HelmNotation: whereHelpernull_String{field: "\"biotherapeutics\".\"helm_notation\""},
}

// BiotherapeuticRels is where relationship names are stored.
var BiotherapeuticRels = struct {
	MolregnoMoleculeDictionary       string
	MolregnoBiotherapeuticComponents string
}{
	MolregnoMoleculeDictionary:       "MolregnoMoleculeDictionary",
	MolregnoBiotherapeuticComponents: "MolregnoBiotherapeuticComponents",
}

// biotherapeuticR is where relationships are stored.
type biotherapeuticR struct {
	MolregnoMoleculeDictionary       *MoleculeDictionary          `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	MolregnoBiotherapeuticComponents BiotherapeuticComponentSlice `boil:"MolregnoBiotherapeuticComponents" json:"MolregnoBiotherapeuticComponents" toml:"MolregnoBiotherapeuticComponents" yaml:"MolregnoBiotherapeuticComponents"`
}

// NewStruct creates a new relationship struct
func (*biotherapeuticR) NewStruct() *biotherapeuticR {
	return &biotherapeuticR{}
}

func (r *biotherapeuticR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *biotherapeuticR) GetMolregnoBiotherapeuticComponents() BiotherapeuticComponentSlice {
	if r == nil {
		return nil
	}
	return r.MolregnoBiotherapeuticComponents
}

// biotherapeuticL is where Load methods for each relationship are stored.
type biotherapeuticL struct{}

var (
	biotherapeuticAllColumns            = []string{"molregno", "description", "helm_notation"}
	biotherapeuticColumnsWithoutDefault = []string{"molregno"}
	biotherapeuticColumnsWithDefault    = []string{"description", "helm_notation"}
	biotherapeuticPrimaryKeyColumns     = []string{"molregno"}
	biotherapeuticGeneratedColumns      = []string{}
)

type (
	// BiotherapeuticSlice is an alias for a slice of pointers to Biotherapeutic.
	// This should almost always be used instead of []Biotherapeutic.
	BiotherapeuticSlice []*Biotherapeutic
	// BiotherapeuticHook is the signature for custom Biotherapeutic hook methods
	BiotherapeuticHook func(context.Context, boil.ContextExecutor, *Biotherapeutic) error

	biotherapeuticQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	biotherapeuticType                 = reflect.TypeOf(&Biotherapeutic{})
	biotherapeuticMapping              = queries.MakeStructMapping(biotherapeuticType)
	biotherapeuticPrimaryKeyMapping, _ = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, biotherapeuticPrimaryKeyColumns)
	biotherapeuticInsertCacheMut       sync.RWMutex
	biotherapeuticInsertCache          = make(map[string]insertCache)
	biotherapeuticUpdateCacheMut       sync.RWMutex
	biotherapeuticUpdateCache          = make(map[string]updateCache)
	biotherapeuticUpsertCacheMut       sync.RWMutex
	biotherapeuticUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var biotherapeuticAfterSelectHooks []BiotherapeuticHook

var biotherapeuticBeforeInsertHooks []BiotherapeuticHook
var biotherapeuticAfterInsertHooks []BiotherapeuticHook

var biotherapeuticBeforeUpdateHooks []BiotherapeuticHook
var biotherapeuticAfterUpdateHooks []BiotherapeuticHook

var biotherapeuticBeforeDeleteHooks []BiotherapeuticHook
var biotherapeuticAfterDeleteHooks []BiotherapeuticHook

var biotherapeuticBeforeUpsertHooks []BiotherapeuticHook
var biotherapeuticAfterUpsertHooks []BiotherapeuticHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Biotherapeutic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Biotherapeutic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Biotherapeutic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Biotherapeutic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Biotherapeutic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Biotherapeutic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Biotherapeutic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Biotherapeutic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Biotherapeutic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biotherapeuticAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBiotherapeuticHook registers your hook function for all future operations.
func AddBiotherapeuticHook(hookPoint boil.HookPoint, biotherapeuticHook BiotherapeuticHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		biotherapeuticAfterSelectHooks = append(biotherapeuticAfterSelectHooks, biotherapeuticHook)
	case boil.BeforeInsertHook:
		biotherapeuticBeforeInsertHooks = append(biotherapeuticBeforeInsertHooks, biotherapeuticHook)
	case boil.AfterInsertHook:
		biotherapeuticAfterInsertHooks = append(biotherapeuticAfterInsertHooks, biotherapeuticHook)
	case boil.BeforeUpdateHook:
		biotherapeuticBeforeUpdateHooks = append(biotherapeuticBeforeUpdateHooks, biotherapeuticHook)
	case boil.AfterUpdateHook:
		biotherapeuticAfterUpdateHooks = append(biotherapeuticAfterUpdateHooks, biotherapeuticHook)
	case boil.BeforeDeleteHook:
		biotherapeuticBeforeDeleteHooks = append(biotherapeuticBeforeDeleteHooks, biotherapeuticHook)
	case boil.AfterDeleteHook:
		biotherapeuticAfterDeleteHooks = append(biotherapeuticAfterDeleteHooks, biotherapeuticHook)
	case boil.BeforeUpsertHook:
		biotherapeuticBeforeUpsertHooks = append(biotherapeuticBeforeUpsertHooks, biotherapeuticHook)
	case boil.AfterUpsertHook:
		biotherapeuticAfterUpsertHooks = append(biotherapeuticAfterUpsertHooks, biotherapeuticHook)
	}
}

// One returns a single biotherapeutic record from the query.
func (q biotherapeuticQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Biotherapeutic, error) {
	o := &Biotherapeutic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for biotherapeutics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Biotherapeutic records from the query.
func (q biotherapeuticQuery) All(ctx context.Context, exec boil.ContextExecutor) (BiotherapeuticSlice, error) {
	var o []*Biotherapeutic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Biotherapeutic slice")
	}

	if len(biotherapeuticAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Biotherapeutic records in the query.
func (q biotherapeuticQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count biotherapeutics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q biotherapeuticQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if biotherapeutics exists")
	}

	return count > 0, nil
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *Biotherapeutic) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// MolregnoBiotherapeuticComponents retrieves all the biotherapeutic_component's BiotherapeuticComponents with an executor via molregno column.
func (o *Biotherapeutic) MolregnoBiotherapeuticComponents(mods ...qm.QueryMod) biotherapeuticComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"biotherapeutic_components\".\"molregno\"=?", o.Molregno),
	)

	return BiotherapeuticComponents(queryMods...)
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (biotherapeuticL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiotherapeutic interface{}, mods queries.Applicator) error {
	var slice []*Biotherapeutic
	var object *Biotherapeutic

	if singular {
		object = maybeBiotherapeutic.(*Biotherapeutic)
	} else {
		slice = *maybeBiotherapeutic.(*[]*Biotherapeutic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &biotherapeuticR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biotherapeuticR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(biotherapeuticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoBiotherapeutic = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoBiotherapeutic = local
				break
			}
		}
	}

	return nil
}

// LoadMolregnoBiotherapeuticComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (biotherapeuticL) LoadMolregnoBiotherapeuticComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiotherapeutic interface{}, mods queries.Applicator) error {
	var slice []*Biotherapeutic
	var object *Biotherapeutic

	if singular {
		object = maybeBiotherapeutic.(*Biotherapeutic)
	} else {
		slice = *maybeBiotherapeutic.(*[]*Biotherapeutic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &biotherapeuticR{}
		}
		args = append(args, object.Molregno)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biotherapeuticR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`biotherapeutic_components`),
		qm.WhereIn(`biotherapeutic_components.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load biotherapeutic_components")
	}

	var resultSlice []*BiotherapeuticComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice biotherapeutic_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on biotherapeutic_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biotherapeutic_components")
	}

	if len(biotherapeuticComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MolregnoBiotherapeuticComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &biotherapeuticComponentR{}
			}
			foreign.R.MolregnoBiotherapeutic = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoBiotherapeuticComponents = append(local.R.MolregnoBiotherapeuticComponents, foreign)
				if foreign.R == nil {
					foreign.R = &biotherapeuticComponentR{}
				}
				foreign.R.MolregnoBiotherapeutic = local
				break
			}
		}
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the biotherapeutic to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoBiotherapeutic.
func (o *Biotherapeutic) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"biotherapeutics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, biotherapeuticPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.Molregno}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &biotherapeuticR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoBiotherapeutic: o,
		}
	} else {
		related.R.MolregnoBiotherapeutic = o
	}

	return nil
}

// AddMolregnoBiotherapeuticComponents adds the given related objects to the existing relationships
// of the biotherapeutic, optionally inserting them as new records.
// Appends related to o.R.MolregnoBiotherapeuticComponents.
// Sets related.R.MolregnoBiotherapeutic appropriately.
func (o *Biotherapeutic) AddMolregnoBiotherapeuticComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BiotherapeuticComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Molregno = o.Molregno
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"biotherapeutic_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
				strmangle.WhereClause("\"", "\"", 0, biotherapeuticComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.Molregno, rel.BiocompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Molregno = o.Molregno
		}
	}

	if o.R == nil {
		o.R = &biotherapeuticR{
			MolregnoBiotherapeuticComponents: related,
		}
	} else {
		o.R.MolregnoBiotherapeuticComponents = append(o.R.MolregnoBiotherapeuticComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &biotherapeuticComponentR{
				MolregnoBiotherapeutic: o,
			}
		} else {
			rel.R.MolregnoBiotherapeutic = o
		}
	}
	return nil
}

// Biotherapeutics retrieves all the records using an executor.
func Biotherapeutics(mods ...qm.QueryMod) biotherapeuticQuery {
	mods = append(mods, qm.From("\"biotherapeutics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"biotherapeutics\".*"})
	}

	return biotherapeuticQuery{q}
}

// FindBiotherapeutic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBiotherapeutic(ctx context.Context, exec boil.ContextExecutor, molregno int64, selectCols ...string) (*Biotherapeutic, error) {
	biotherapeuticObj := &Biotherapeutic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"biotherapeutics\" where \"molregno\"=?", sel,
	)

	q := queries.Raw(query, molregno)

	err := q.Bind(ctx, exec, biotherapeuticObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from biotherapeutics")
	}

	if err = biotherapeuticObj.doAfterSelectHooks(ctx, exec); err != nil {
		return biotherapeuticObj, err
	}

	return biotherapeuticObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Biotherapeutic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no biotherapeutics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biotherapeuticColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	biotherapeuticInsertCacheMut.RLock()
	cache, cached := biotherapeuticInsertCache[key]
	biotherapeuticInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			biotherapeuticAllColumns,
			biotherapeuticColumnsWithDefault,
			biotherapeuticColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"biotherapeutics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"biotherapeutics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into biotherapeutics")
	}

	if !cached {
		biotherapeuticInsertCacheMut.Lock()
		biotherapeuticInsertCache[key] = cache
		biotherapeuticInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Biotherapeutic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Biotherapeutic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	biotherapeuticUpdateCacheMut.RLock()
	cache, cached := biotherapeuticUpdateCache[key]
	biotherapeuticUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			biotherapeuticAllColumns,
			biotherapeuticPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update biotherapeutics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"biotherapeutics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, biotherapeuticPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, append(wl, biotherapeuticPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update biotherapeutics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for biotherapeutics")
	}

	if !cached {
		biotherapeuticUpdateCacheMut.Lock()
		biotherapeuticUpdateCache[key] = cache
		biotherapeuticUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q biotherapeuticQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for biotherapeutics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for biotherapeutics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BiotherapeuticSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biotherapeuticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"biotherapeutics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biotherapeuticPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in biotherapeutic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all biotherapeutic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Biotherapeutic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no biotherapeutics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biotherapeuticColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	biotherapeuticUpsertCacheMut.RLock()
	cache, cached := biotherapeuticUpsertCache[key]
	biotherapeuticUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			biotherapeuticAllColumns,
			biotherapeuticColumnsWithDefault,
			biotherapeuticColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			biotherapeuticAllColumns,
			biotherapeuticPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert biotherapeutics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(biotherapeuticPrimaryKeyColumns))
			copy(conflict, biotherapeuticPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"biotherapeutics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(biotherapeuticType, biotherapeuticMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert biotherapeutics")
	}

	if !cached {
		biotherapeuticUpsertCacheMut.Lock()
		biotherapeuticUpsertCache[key] = cache
		biotherapeuticUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Biotherapeutic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Biotherapeutic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Biotherapeutic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), biotherapeuticPrimaryKeyMapping)
	sql := "DELETE FROM \"biotherapeutics\" WHERE \"molregno\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from biotherapeutics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for biotherapeutics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q biotherapeuticQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no biotherapeuticQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biotherapeutics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for biotherapeutics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BiotherapeuticSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(biotherapeuticBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biotherapeuticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"biotherapeutics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biotherapeuticPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biotherapeutic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for biotherapeutics")
	}

	if len(biotherapeuticAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Biotherapeutic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBiotherapeutic(ctx, exec, o.Molregno)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BiotherapeuticSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BiotherapeuticSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biotherapeuticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"biotherapeutics\".* FROM \"biotherapeutics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biotherapeuticPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BiotherapeuticSlice")
	}

	*o = slice

	return nil
}

// BiotherapeuticExists checks if the Biotherapeutic row exists.
func BiotherapeuticExists(ctx context.Context, exec boil.ContextExecutor, molregno int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"biotherapeutics\" where \"molregno\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, molregno)
	}
	row := exec.QueryRowContext(ctx, sql, molregno)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if biotherapeutics exists")
	}

	return exists, nil
}
