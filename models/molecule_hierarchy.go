// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MoleculeHierarchy is an object representing the database table.
type MoleculeHierarchy struct {
	Molregno       int64      `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`
	ParentMolregno null.Int64 `boil:"parent_molregno" json:"parent_molregno,omitempty" toml:"parent_molregno" yaml:"parent_molregno,omitempty"`
	ActiveMolregno null.Int64 `boil:"active_molregno" json:"active_molregno,omitempty" toml:"active_molregno" yaml:"active_molregno,omitempty"`

	R *moleculeHierarchyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moleculeHierarchyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoleculeHierarchyColumns = struct {
	Molregno       string
	ParentMolregno string
	ActiveMolregno string
}{
	Molregno:       "molregno",
	ParentMolregno: "parent_molregno",
	ActiveMolregno: "active_molregno",
}

var MoleculeHierarchyTableColumns = struct {
	Molregno       string
	ParentMolregno string
	ActiveMolregno string
}{
	Molregno:       "molecule_hierarchy.molregno",
	ParentMolregno: "molecule_hierarchy.parent_molregno",
	ActiveMolregno: "molecule_hierarchy.active_molregno",
}

// Generated where

var MoleculeHierarchyWhere = struct {
	Molregno       whereHelperint64
	ParentMolregno whereHelpernull_Int64
	ActiveMolregno whereHelpernull_Int64
}{
	Molregno:       whereHelperint64{field: "\"molecule_hierarchy\".\"molregno\""},
	ParentMolregno: whereHelpernull_Int64{field: "\"molecule_hierarchy\".\"parent_molregno\""},
	ActiveMolregno: whereHelpernull_Int64{field: "\"molecule_hierarchy\".\"active_molregno\""},
}

// MoleculeHierarchyRels is where relationship names are stored.
var MoleculeHierarchyRels = struct {
	ParentMolregnoMoleculeDictionary string
	MolregnoMoleculeDictionary       string
	ActiveMolregnoMoleculeDictionary string
}{
	ParentMolregnoMoleculeDictionary: "ParentMolregnoMoleculeDictionary",
	MolregnoMoleculeDictionary:       "MolregnoMoleculeDictionary",
	ActiveMolregnoMoleculeDictionary: "ActiveMolregnoMoleculeDictionary",
}

// moleculeHierarchyR is where relationships are stored.
type moleculeHierarchyR struct {
	ParentMolregnoMoleculeDictionary *MoleculeDictionary `boil:"ParentMolregnoMoleculeDictionary" json:"ParentMolregnoMoleculeDictionary" toml:"ParentMolregnoMoleculeDictionary" yaml:"ParentMolregnoMoleculeDictionary"`
	MolregnoMoleculeDictionary       *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	ActiveMolregnoMoleculeDictionary *MoleculeDictionary `boil:"ActiveMolregnoMoleculeDictionary" json:"ActiveMolregnoMoleculeDictionary" toml:"ActiveMolregnoMoleculeDictionary" yaml:"ActiveMolregnoMoleculeDictionary"`
}

// NewStruct creates a new relationship struct
func (*moleculeHierarchyR) NewStruct() *moleculeHierarchyR {
	return &moleculeHierarchyR{}
}

func (r *moleculeHierarchyR) GetParentMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.ParentMolregnoMoleculeDictionary
}

func (r *moleculeHierarchyR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *moleculeHierarchyR) GetActiveMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.ActiveMolregnoMoleculeDictionary
}

// moleculeHierarchyL is where Load methods for each relationship are stored.
type moleculeHierarchyL struct{}

var (
	moleculeHierarchyAllColumns            = []string{"molregno", "parent_molregno", "active_molregno"}
	moleculeHierarchyColumnsWithoutDefault = []string{"molregno"}
	moleculeHierarchyColumnsWithDefault    = []string{"parent_molregno", "active_molregno"}
	moleculeHierarchyPrimaryKeyColumns     = []string{"molregno"}
	moleculeHierarchyGeneratedColumns      = []string{}
)

type (
	// MoleculeHierarchySlice is an alias for a slice of pointers to MoleculeHierarchy.
	// This should almost always be used instead of []MoleculeHierarchy.
	MoleculeHierarchySlice []*MoleculeHierarchy
	// MoleculeHierarchyHook is the signature for custom MoleculeHierarchy hook methods
	MoleculeHierarchyHook func(context.Context, boil.ContextExecutor, *MoleculeHierarchy) error

	moleculeHierarchyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moleculeHierarchyType                 = reflect.TypeOf(&MoleculeHierarchy{})
	moleculeHierarchyMapping              = queries.MakeStructMapping(moleculeHierarchyType)
	moleculeHierarchyPrimaryKeyMapping, _ = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, moleculeHierarchyPrimaryKeyColumns)
	moleculeHierarchyInsertCacheMut       sync.RWMutex
	moleculeHierarchyInsertCache          = make(map[string]insertCache)
	moleculeHierarchyUpdateCacheMut       sync.RWMutex
	moleculeHierarchyUpdateCache          = make(map[string]updateCache)
	moleculeHierarchyUpsertCacheMut       sync.RWMutex
	moleculeHierarchyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moleculeHierarchyAfterSelectHooks []MoleculeHierarchyHook

var moleculeHierarchyBeforeInsertHooks []MoleculeHierarchyHook
var moleculeHierarchyAfterInsertHooks []MoleculeHierarchyHook

var moleculeHierarchyBeforeUpdateHooks []MoleculeHierarchyHook
var moleculeHierarchyAfterUpdateHooks []MoleculeHierarchyHook

var moleculeHierarchyBeforeDeleteHooks []MoleculeHierarchyHook
var moleculeHierarchyAfterDeleteHooks []MoleculeHierarchyHook

var moleculeHierarchyBeforeUpsertHooks []MoleculeHierarchyHook
var moleculeHierarchyAfterUpsertHooks []MoleculeHierarchyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MoleculeHierarchy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MoleculeHierarchy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MoleculeHierarchy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MoleculeHierarchy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MoleculeHierarchy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MoleculeHierarchy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MoleculeHierarchy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MoleculeHierarchy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MoleculeHierarchy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeHierarchyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoleculeHierarchyHook registers your hook function for all future operations.
func AddMoleculeHierarchyHook(hookPoint boil.HookPoint, moleculeHierarchyHook MoleculeHierarchyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moleculeHierarchyAfterSelectHooks = append(moleculeHierarchyAfterSelectHooks, moleculeHierarchyHook)
	case boil.BeforeInsertHook:
		moleculeHierarchyBeforeInsertHooks = append(moleculeHierarchyBeforeInsertHooks, moleculeHierarchyHook)
	case boil.AfterInsertHook:
		moleculeHierarchyAfterInsertHooks = append(moleculeHierarchyAfterInsertHooks, moleculeHierarchyHook)
	case boil.BeforeUpdateHook:
		moleculeHierarchyBeforeUpdateHooks = append(moleculeHierarchyBeforeUpdateHooks, moleculeHierarchyHook)
	case boil.AfterUpdateHook:
		moleculeHierarchyAfterUpdateHooks = append(moleculeHierarchyAfterUpdateHooks, moleculeHierarchyHook)
	case boil.BeforeDeleteHook:
		moleculeHierarchyBeforeDeleteHooks = append(moleculeHierarchyBeforeDeleteHooks, moleculeHierarchyHook)
	case boil.AfterDeleteHook:
		moleculeHierarchyAfterDeleteHooks = append(moleculeHierarchyAfterDeleteHooks, moleculeHierarchyHook)
	case boil.BeforeUpsertHook:
		moleculeHierarchyBeforeUpsertHooks = append(moleculeHierarchyBeforeUpsertHooks, moleculeHierarchyHook)
	case boil.AfterUpsertHook:
		moleculeHierarchyAfterUpsertHooks = append(moleculeHierarchyAfterUpsertHooks, moleculeHierarchyHook)
	}
}

// One returns a single moleculeHierarchy record from the query.
func (q moleculeHierarchyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MoleculeHierarchy, error) {
	o := &MoleculeHierarchy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for molecule_hierarchy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MoleculeHierarchy records from the query.
func (q moleculeHierarchyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoleculeHierarchySlice, error) {
	var o []*MoleculeHierarchy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MoleculeHierarchy slice")
	}

	if len(moleculeHierarchyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MoleculeHierarchy records in the query.
func (q moleculeHierarchyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count molecule_hierarchy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q moleculeHierarchyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if molecule_hierarchy exists")
	}

	return count > 0, nil
}

// ParentMolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeHierarchy) ParentMolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.ParentMolregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeHierarchy) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// ActiveMolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeHierarchy) ActiveMolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.ActiveMolregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// LoadParentMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeHierarchyL) LoadParentMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeHierarchy interface{}, mods queries.Applicator) error {
	var slice []*MoleculeHierarchy
	var object *MoleculeHierarchy

	if singular {
		object = maybeMoleculeHierarchy.(*MoleculeHierarchy)
	} else {
		slice = *maybeMoleculeHierarchy.(*[]*MoleculeHierarchy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeHierarchyR{}
		}
		if !queries.IsNil(object.ParentMolregno) {
			args = append(args, object.ParentMolregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeHierarchyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentMolregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentMolregno) {
				args = append(args, obj.ParentMolregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeHierarchyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentMolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.ParentMolregnoMoleculeHierarchies = append(foreign.R.ParentMolregnoMoleculeHierarchies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentMolregno, foreign.Molregno) {
				local.R.ParentMolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.ParentMolregnoMoleculeHierarchies = append(foreign.R.ParentMolregnoMoleculeHierarchies, local)
				break
			}
		}
	}

	return nil
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeHierarchyL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeHierarchy interface{}, mods queries.Applicator) error {
	var slice []*MoleculeHierarchy
	var object *MoleculeHierarchy

	if singular {
		object = maybeMoleculeHierarchy.(*MoleculeHierarchy)
	} else {
		slice = *maybeMoleculeHierarchy.(*[]*MoleculeHierarchy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeHierarchyR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeHierarchyR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeHierarchyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoMoleculeHierarchy = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoMoleculeHierarchy = local
				break
			}
		}
	}

	return nil
}

// LoadActiveMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeHierarchyL) LoadActiveMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeHierarchy interface{}, mods queries.Applicator) error {
	var slice []*MoleculeHierarchy
	var object *MoleculeHierarchy

	if singular {
		object = maybeMoleculeHierarchy.(*MoleculeHierarchy)
	} else {
		slice = *maybeMoleculeHierarchy.(*[]*MoleculeHierarchy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeHierarchyR{}
		}
		if !queries.IsNil(object.ActiveMolregno) {
			args = append(args, object.ActiveMolregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeHierarchyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ActiveMolregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ActiveMolregno) {
				args = append(args, obj.ActiveMolregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeHierarchyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ActiveMolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.ActiveMolregnoMoleculeHierarchies = append(foreign.R.ActiveMolregnoMoleculeHierarchies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ActiveMolregno, foreign.Molregno) {
				local.R.ActiveMolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.ActiveMolregnoMoleculeHierarchies = append(foreign.R.ActiveMolregnoMoleculeHierarchies, local)
				break
			}
		}
	}

	return nil
}

// SetParentMolregnoMoleculeDictionary of the moleculeHierarchy to the related item.
// Sets o.R.ParentMolregnoMoleculeDictionary to related.
// Adds o to related.R.ParentMolregnoMoleculeHierarchies.
func (o *MoleculeHierarchy) SetParentMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_hierarchy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"parent_molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeHierarchyPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.Molregno}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentMolregno, related.Molregno)
	if o.R == nil {
		o.R = &moleculeHierarchyR{
			ParentMolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.ParentMolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			ParentMolregnoMoleculeHierarchies: MoleculeHierarchySlice{o},
		}
	} else {
		related.R.ParentMolregnoMoleculeHierarchies = append(related.R.ParentMolregnoMoleculeHierarchies, o)
	}

	return nil
}

// RemoveParentMolregnoMoleculeDictionary relationship.
// Sets o.R.ParentMolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MoleculeHierarchy) RemoveParentMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.ParentMolregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentMolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentMolregnoMoleculeHierarchies {
		if queries.Equal(o.ParentMolregno, ri.ParentMolregno) {
			continue
		}

		ln := len(related.R.ParentMolregnoMoleculeHierarchies)
		if ln > 1 && i < ln-1 {
			related.R.ParentMolregnoMoleculeHierarchies[i] = related.R.ParentMolregnoMoleculeHierarchies[ln-1]
		}
		related.R.ParentMolregnoMoleculeHierarchies = related.R.ParentMolregnoMoleculeHierarchies[:ln-1]
		break
	}
	return nil
}

// SetMolregnoMoleculeDictionary of the moleculeHierarchy to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoMoleculeHierarchy.
func (o *MoleculeHierarchy) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_hierarchy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeHierarchyPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.Molregno}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &moleculeHierarchyR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoMoleculeHierarchy: o,
		}
	} else {
		related.R.MolregnoMoleculeHierarchy = o
	}

	return nil
}

// SetActiveMolregnoMoleculeDictionary of the moleculeHierarchy to the related item.
// Sets o.R.ActiveMolregnoMoleculeDictionary to related.
// Adds o to related.R.ActiveMolregnoMoleculeHierarchies.
func (o *MoleculeHierarchy) SetActiveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_hierarchy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"active_molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeHierarchyPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.Molregno}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ActiveMolregno, related.Molregno)
	if o.R == nil {
		o.R = &moleculeHierarchyR{
			ActiveMolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.ActiveMolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			ActiveMolregnoMoleculeHierarchies: MoleculeHierarchySlice{o},
		}
	} else {
		related.R.ActiveMolregnoMoleculeHierarchies = append(related.R.ActiveMolregnoMoleculeHierarchies, o)
	}

	return nil
}

// RemoveActiveMolregnoMoleculeDictionary relationship.
// Sets o.R.ActiveMolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MoleculeHierarchy) RemoveActiveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.ActiveMolregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("active_molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ActiveMolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ActiveMolregnoMoleculeHierarchies {
		if queries.Equal(o.ActiveMolregno, ri.ActiveMolregno) {
			continue
		}

		ln := len(related.R.ActiveMolregnoMoleculeHierarchies)
		if ln > 1 && i < ln-1 {
			related.R.ActiveMolregnoMoleculeHierarchies[i] = related.R.ActiveMolregnoMoleculeHierarchies[ln-1]
		}
		related.R.ActiveMolregnoMoleculeHierarchies = related.R.ActiveMolregnoMoleculeHierarchies[:ln-1]
		break
	}
	return nil
}

// MoleculeHierarchies retrieves all the records using an executor.
func MoleculeHierarchies(mods ...qm.QueryMod) moleculeHierarchyQuery {
	mods = append(mods, qm.From("\"molecule_hierarchy\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"molecule_hierarchy\".*"})
	}

	return moleculeHierarchyQuery{q}
}

// FindMoleculeHierarchy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoleculeHierarchy(ctx context.Context, exec boil.ContextExecutor, molregno int64, selectCols ...string) (*MoleculeHierarchy, error) {
	moleculeHierarchyObj := &MoleculeHierarchy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"molecule_hierarchy\" where \"molregno\"=?", sel,
	)

	q := queries.Raw(query, molregno)

	err := q.Bind(ctx, exec, moleculeHierarchyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from molecule_hierarchy")
	}

	if err = moleculeHierarchyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moleculeHierarchyObj, err
	}

	return moleculeHierarchyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MoleculeHierarchy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_hierarchy provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeHierarchyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moleculeHierarchyInsertCacheMut.RLock()
	cache, cached := moleculeHierarchyInsertCache[key]
	moleculeHierarchyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moleculeHierarchyAllColumns,
			moleculeHierarchyColumnsWithDefault,
			moleculeHierarchyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"molecule_hierarchy\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"molecule_hierarchy\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into molecule_hierarchy")
	}

	if !cached {
		moleculeHierarchyInsertCacheMut.Lock()
		moleculeHierarchyInsertCache[key] = cache
		moleculeHierarchyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MoleculeHierarchy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MoleculeHierarchy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moleculeHierarchyUpdateCacheMut.RLock()
	cache, cached := moleculeHierarchyUpdateCache[key]
	moleculeHierarchyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moleculeHierarchyAllColumns,
			moleculeHierarchyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update molecule_hierarchy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"molecule_hierarchy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, moleculeHierarchyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, append(wl, moleculeHierarchyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update molecule_hierarchy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for molecule_hierarchy")
	}

	if !cached {
		moleculeHierarchyUpdateCacheMut.Lock()
		moleculeHierarchyUpdateCache[key] = cache
		moleculeHierarchyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q moleculeHierarchyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for molecule_hierarchy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for molecule_hierarchy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoleculeHierarchySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"molecule_hierarchy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeHierarchyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moleculeHierarchy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moleculeHierarchy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MoleculeHierarchy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_hierarchy provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeHierarchyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moleculeHierarchyUpsertCacheMut.RLock()
	cache, cached := moleculeHierarchyUpsertCache[key]
	moleculeHierarchyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			moleculeHierarchyAllColumns,
			moleculeHierarchyColumnsWithDefault,
			moleculeHierarchyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			moleculeHierarchyAllColumns,
			moleculeHierarchyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert molecule_hierarchy, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(moleculeHierarchyPrimaryKeyColumns))
			copy(conflict, moleculeHierarchyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"molecule_hierarchy\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moleculeHierarchyType, moleculeHierarchyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert molecule_hierarchy")
	}

	if !cached {
		moleculeHierarchyUpsertCacheMut.Lock()
		moleculeHierarchyUpsertCache[key] = cache
		moleculeHierarchyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MoleculeHierarchy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MoleculeHierarchy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MoleculeHierarchy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moleculeHierarchyPrimaryKeyMapping)
	sql := "DELETE FROM \"molecule_hierarchy\" WHERE \"molregno\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from molecule_hierarchy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for molecule_hierarchy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q moleculeHierarchyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moleculeHierarchyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from molecule_hierarchy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_hierarchy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoleculeHierarchySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moleculeHierarchyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"molecule_hierarchy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeHierarchyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moleculeHierarchy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_hierarchy")
	}

	if len(moleculeHierarchyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MoleculeHierarchy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoleculeHierarchy(ctx, exec, o.Molregno)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoleculeHierarchySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoleculeHierarchySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"molecule_hierarchy\".* FROM \"molecule_hierarchy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeHierarchyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MoleculeHierarchySlice")
	}

	*o = slice

	return nil
}

// MoleculeHierarchyExists checks if the MoleculeHierarchy row exists.
func MoleculeHierarchyExists(ctx context.Context, exec boil.ContextExecutor, molregno int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"molecule_hierarchy\" where \"molregno\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, molregno)
	}
	row := exec.QueryRowContext(ctx, sql, molregno)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if molecule_hierarchy exists")
	}

	return exists, nil
}
