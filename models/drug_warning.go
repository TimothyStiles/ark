// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DrugWarning is an object representing the database table.
type DrugWarning struct {
	WarningID          int64       `boil:"warning_id" json:"warning_id" toml:"warning_id" yaml:"warning_id"`
	RecordID           null.Int64  `boil:"record_id" json:"record_id,omitempty" toml:"record_id" yaml:"record_id,omitempty"`
	Molregno           null.Int64  `boil:"molregno" json:"molregno,omitempty" toml:"molregno" yaml:"molregno,omitempty"`
	WarningType        null.String `boil:"warning_type" json:"warning_type,omitempty" toml:"warning_type" yaml:"warning_type,omitempty"`
	WarningClass       null.String `boil:"warning_class" json:"warning_class,omitempty" toml:"warning_class" yaml:"warning_class,omitempty"`
	WarningDescription null.String `boil:"warning_description" json:"warning_description,omitempty" toml:"warning_description" yaml:"warning_description,omitempty"`
	WarningCountry     null.String `boil:"warning_country" json:"warning_country,omitempty" toml:"warning_country" yaml:"warning_country,omitempty"`
	WarningYear        null.Int64  `boil:"warning_year" json:"warning_year,omitempty" toml:"warning_year" yaml:"warning_year,omitempty"`

	R *drugWarningR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L drugWarningL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DrugWarningColumns = struct {
	WarningID          string
	RecordID           string
	Molregno           string
	WarningType        string
	WarningClass       string
	WarningDescription string
	WarningCountry     string
	WarningYear        string
}{
	WarningID:          "warning_id",
	RecordID:           "record_id",
	Molregno:           "molregno",
	WarningType:        "warning_type",
	WarningClass:       "warning_class",
	WarningDescription: "warning_description",
	WarningCountry:     "warning_country",
	WarningYear:        "warning_year",
}

var DrugWarningTableColumns = struct {
	WarningID          string
	RecordID           string
	Molregno           string
	WarningType        string
	WarningClass       string
	WarningDescription string
	WarningCountry     string
	WarningYear        string
}{
	WarningID:          "drug_warning.warning_id",
	RecordID:           "drug_warning.record_id",
	Molregno:           "drug_warning.molregno",
	WarningType:        "drug_warning.warning_type",
	WarningClass:       "drug_warning.warning_class",
	WarningDescription: "drug_warning.warning_description",
	WarningCountry:     "drug_warning.warning_country",
	WarningYear:        "drug_warning.warning_year",
}

// Generated where

var DrugWarningWhere = struct {
	WarningID          whereHelperint64
	RecordID           whereHelpernull_Int64
	Molregno           whereHelpernull_Int64
	WarningType        whereHelpernull_String
	WarningClass       whereHelpernull_String
	WarningDescription whereHelpernull_String
	WarningCountry     whereHelpernull_String
	WarningYear        whereHelpernull_Int64
}{
	WarningID:          whereHelperint64{field: "\"drug_warning\".\"warning_id\""},
	RecordID:           whereHelpernull_Int64{field: "\"drug_warning\".\"record_id\""},
	Molregno:           whereHelpernull_Int64{field: "\"drug_warning\".\"molregno\""},
	WarningType:        whereHelpernull_String{field: "\"drug_warning\".\"warning_type\""},
	WarningClass:       whereHelpernull_String{field: "\"drug_warning\".\"warning_class\""},
	WarningDescription: whereHelpernull_String{field: "\"drug_warning\".\"warning_description\""},
	WarningCountry:     whereHelpernull_String{field: "\"drug_warning\".\"warning_country\""},
	WarningYear:        whereHelpernull_Int64{field: "\"drug_warning\".\"warning_year\""},
}

// DrugWarningRels is where relationship names are stored.
var DrugWarningRels = struct {
	Record             string
	WarningWarningRefs string
}{
	Record:             "Record",
	WarningWarningRefs: "WarningWarningRefs",
}

// drugWarningR is where relationships are stored.
type drugWarningR struct {
	Record             *CompoundRecord `boil:"Record" json:"Record" toml:"Record" yaml:"Record"`
	WarningWarningRefs WarningRefSlice `boil:"WarningWarningRefs" json:"WarningWarningRefs" toml:"WarningWarningRefs" yaml:"WarningWarningRefs"`
}

// NewStruct creates a new relationship struct
func (*drugWarningR) NewStruct() *drugWarningR {
	return &drugWarningR{}
}

func (r *drugWarningR) GetRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.Record
}

func (r *drugWarningR) GetWarningWarningRefs() WarningRefSlice {
	if r == nil {
		return nil
	}
	return r.WarningWarningRefs
}

// drugWarningL is where Load methods for each relationship are stored.
type drugWarningL struct{}

var (
	drugWarningAllColumns            = []string{"warning_id", "record_id", "molregno", "warning_type", "warning_class", "warning_description", "warning_country", "warning_year"}
	drugWarningColumnsWithoutDefault = []string{"warning_id"}
	drugWarningColumnsWithDefault    = []string{"record_id", "molregno", "warning_type", "warning_class", "warning_description", "warning_country", "warning_year"}
	drugWarningPrimaryKeyColumns     = []string{"warning_id"}
	drugWarningGeneratedColumns      = []string{}
)

type (
	// DrugWarningSlice is an alias for a slice of pointers to DrugWarning.
	// This should almost always be used instead of []DrugWarning.
	DrugWarningSlice []*DrugWarning
	// DrugWarningHook is the signature for custom DrugWarning hook methods
	DrugWarningHook func(context.Context, boil.ContextExecutor, *DrugWarning) error

	drugWarningQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	drugWarningType                 = reflect.TypeOf(&DrugWarning{})
	drugWarningMapping              = queries.MakeStructMapping(drugWarningType)
	drugWarningPrimaryKeyMapping, _ = queries.BindMapping(drugWarningType, drugWarningMapping, drugWarningPrimaryKeyColumns)
	drugWarningInsertCacheMut       sync.RWMutex
	drugWarningInsertCache          = make(map[string]insertCache)
	drugWarningUpdateCacheMut       sync.RWMutex
	drugWarningUpdateCache          = make(map[string]updateCache)
	drugWarningUpsertCacheMut       sync.RWMutex
	drugWarningUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var drugWarningAfterSelectHooks []DrugWarningHook

var drugWarningBeforeInsertHooks []DrugWarningHook
var drugWarningAfterInsertHooks []DrugWarningHook

var drugWarningBeforeUpdateHooks []DrugWarningHook
var drugWarningAfterUpdateHooks []DrugWarningHook

var drugWarningBeforeDeleteHooks []DrugWarningHook
var drugWarningAfterDeleteHooks []DrugWarningHook

var drugWarningBeforeUpsertHooks []DrugWarningHook
var drugWarningAfterUpsertHooks []DrugWarningHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DrugWarning) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DrugWarning) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DrugWarning) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DrugWarning) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DrugWarning) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DrugWarning) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DrugWarning) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DrugWarning) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DrugWarning) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugWarningAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDrugWarningHook registers your hook function for all future operations.
func AddDrugWarningHook(hookPoint boil.HookPoint, drugWarningHook DrugWarningHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		drugWarningAfterSelectHooks = append(drugWarningAfterSelectHooks, drugWarningHook)
	case boil.BeforeInsertHook:
		drugWarningBeforeInsertHooks = append(drugWarningBeforeInsertHooks, drugWarningHook)
	case boil.AfterInsertHook:
		drugWarningAfterInsertHooks = append(drugWarningAfterInsertHooks, drugWarningHook)
	case boil.BeforeUpdateHook:
		drugWarningBeforeUpdateHooks = append(drugWarningBeforeUpdateHooks, drugWarningHook)
	case boil.AfterUpdateHook:
		drugWarningAfterUpdateHooks = append(drugWarningAfterUpdateHooks, drugWarningHook)
	case boil.BeforeDeleteHook:
		drugWarningBeforeDeleteHooks = append(drugWarningBeforeDeleteHooks, drugWarningHook)
	case boil.AfterDeleteHook:
		drugWarningAfterDeleteHooks = append(drugWarningAfterDeleteHooks, drugWarningHook)
	case boil.BeforeUpsertHook:
		drugWarningBeforeUpsertHooks = append(drugWarningBeforeUpsertHooks, drugWarningHook)
	case boil.AfterUpsertHook:
		drugWarningAfterUpsertHooks = append(drugWarningAfterUpsertHooks, drugWarningHook)
	}
}

// One returns a single drugWarning record from the query.
func (q drugWarningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DrugWarning, error) {
	o := &DrugWarning{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for drug_warning")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DrugWarning records from the query.
func (q drugWarningQuery) All(ctx context.Context, exec boil.ContextExecutor) (DrugWarningSlice, error) {
	var o []*DrugWarning

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DrugWarning slice")
	}

	if len(drugWarningAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DrugWarning records in the query.
func (q drugWarningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count drug_warning rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q drugWarningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if drug_warning exists")
	}

	return count > 0, nil
}

// Record pointed to by the foreign key.
func (o *DrugWarning) Record(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.RecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// WarningWarningRefs retrieves all the warning_ref's WarningRefs with an executor via warning_id column.
func (o *DrugWarning) WarningWarningRefs(mods ...qm.QueryMod) warningRefQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warning_refs\".\"warning_id\"=?", o.WarningID),
	)

	return WarningRefs(queryMods...)
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugWarningL) LoadRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugWarning interface{}, mods queries.Applicator) error {
	var slice []*DrugWarning
	var object *DrugWarning

	if singular {
		object = maybeDrugWarning.(*DrugWarning)
	} else {
		slice = *maybeDrugWarning.(*[]*DrugWarning)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugWarningR{}
		}
		if !queries.IsNil(object.RecordID) {
			args = append(args, object.RecordID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugWarningR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecordID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RecordID) {
				args = append(args, obj.RecordID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(drugWarningAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Record = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.RecordDrugWarnings = append(foreign.R.RecordDrugWarnings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RecordID, foreign.RecordID) {
				local.R.Record = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.RecordDrugWarnings = append(foreign.R.RecordDrugWarnings, local)
				break
			}
		}
	}

	return nil
}

// LoadWarningWarningRefs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (drugWarningL) LoadWarningWarningRefs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugWarning interface{}, mods queries.Applicator) error {
	var slice []*DrugWarning
	var object *DrugWarning

	if singular {
		object = maybeDrugWarning.(*DrugWarning)
	} else {
		slice = *maybeDrugWarning.(*[]*DrugWarning)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugWarningR{}
		}
		args = append(args, object.WarningID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugWarningR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WarningID) {
					continue Outer
				}
			}

			args = append(args, obj.WarningID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warning_refs`),
		qm.WhereIn(`warning_refs.warning_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warning_refs")
	}

	var resultSlice []*WarningRef
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warning_refs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warning_refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warning_refs")
	}

	if len(warningRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarningWarningRefs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warningRefR{}
			}
			foreign.R.Warning = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.WarningID, foreign.WarningID) {
				local.R.WarningWarningRefs = append(local.R.WarningWarningRefs, foreign)
				if foreign.R == nil {
					foreign.R = &warningRefR{}
				}
				foreign.R.Warning = local
				break
			}
		}
	}

	return nil
}

// SetRecord of the drugWarning to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.RecordDrugWarnings.
func (o *DrugWarning) SetRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_warning\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
		strmangle.WhereClause("\"", "\"", 0, drugWarningPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.WarningID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RecordID, related.RecordID)
	if o.R == nil {
		o.R = &drugWarningR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			RecordDrugWarnings: DrugWarningSlice{o},
		}
	} else {
		related.R.RecordDrugWarnings = append(related.R.RecordDrugWarnings, o)
	}

	return nil
}

// RemoveRecord relationship.
// Sets o.R.Record to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugWarning) RemoveRecord(ctx context.Context, exec boil.ContextExecutor, related *CompoundRecord) error {
	var err error

	queries.SetScanner(&o.RecordID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("record_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Record = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RecordDrugWarnings {
		if queries.Equal(o.RecordID, ri.RecordID) {
			continue
		}

		ln := len(related.R.RecordDrugWarnings)
		if ln > 1 && i < ln-1 {
			related.R.RecordDrugWarnings[i] = related.R.RecordDrugWarnings[ln-1]
		}
		related.R.RecordDrugWarnings = related.R.RecordDrugWarnings[:ln-1]
		break
	}
	return nil
}

// AddWarningWarningRefs adds the given related objects to the existing relationships
// of the drug_warning, optionally inserting them as new records.
// Appends related to o.R.WarningWarningRefs.
// Sets related.R.Warning appropriately.
func (o *DrugWarning) AddWarningWarningRefs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarningRef) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarningID, o.WarningID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warning_refs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"warning_id"}),
				strmangle.WhereClause("\"", "\"", 0, warningRefPrimaryKeyColumns),
			)
			values := []interface{}{o.WarningID, rel.WarnrefID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarningID, o.WarningID)
		}
	}

	if o.R == nil {
		o.R = &drugWarningR{
			WarningWarningRefs: related,
		}
	} else {
		o.R.WarningWarningRefs = append(o.R.WarningWarningRefs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warningRefR{
				Warning: o,
			}
		} else {
			rel.R.Warning = o
		}
	}
	return nil
}

// SetWarningWarningRefs removes all previously related items of the
// drug_warning replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Warning's WarningWarningRefs accordingly.
// Replaces o.R.WarningWarningRefs with related.
// Sets related.R.Warning's WarningWarningRefs accordingly.
func (o *DrugWarning) SetWarningWarningRefs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarningRef) error {
	query := "update \"warning_refs\" set \"warning_id\" = null where \"warning_id\" = ?"
	values := []interface{}{o.WarningID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WarningWarningRefs {
			queries.SetScanner(&rel.WarningID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Warning = nil
		}
		o.R.WarningWarningRefs = nil
	}

	return o.AddWarningWarningRefs(ctx, exec, insert, related...)
}

// RemoveWarningWarningRefs relationships from objects passed in.
// Removes related items from R.WarningWarningRefs (uses pointer comparison, removal does not keep order)
// Sets related.R.Warning.
func (o *DrugWarning) RemoveWarningWarningRefs(ctx context.Context, exec boil.ContextExecutor, related ...*WarningRef) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WarningID, nil)
		if rel.R != nil {
			rel.R.Warning = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("warning_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WarningWarningRefs {
			if rel != ri {
				continue
			}

			ln := len(o.R.WarningWarningRefs)
			if ln > 1 && i < ln-1 {
				o.R.WarningWarningRefs[i] = o.R.WarningWarningRefs[ln-1]
			}
			o.R.WarningWarningRefs = o.R.WarningWarningRefs[:ln-1]
			break
		}
	}

	return nil
}

// DrugWarnings retrieves all the records using an executor.
func DrugWarnings(mods ...qm.QueryMod) drugWarningQuery {
	mods = append(mods, qm.From("\"drug_warning\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"drug_warning\".*"})
	}

	return drugWarningQuery{q}
}

// FindDrugWarning retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDrugWarning(ctx context.Context, exec boil.ContextExecutor, warningID int64, selectCols ...string) (*DrugWarning, error) {
	drugWarningObj := &DrugWarning{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"drug_warning\" where \"warning_id\"=?", sel,
	)

	q := queries.Raw(query, warningID)

	err := q.Bind(ctx, exec, drugWarningObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from drug_warning")
	}

	if err = drugWarningObj.doAfterSelectHooks(ctx, exec); err != nil {
		return drugWarningObj, err
	}

	return drugWarningObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DrugWarning) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_warning provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugWarningColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	drugWarningInsertCacheMut.RLock()
	cache, cached := drugWarningInsertCache[key]
	drugWarningInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			drugWarningAllColumns,
			drugWarningColumnsWithDefault,
			drugWarningColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(drugWarningType, drugWarningMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(drugWarningType, drugWarningMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"drug_warning\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"drug_warning\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into drug_warning")
	}

	if !cached {
		drugWarningInsertCacheMut.Lock()
		drugWarningInsertCache[key] = cache
		drugWarningInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DrugWarning.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DrugWarning) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	drugWarningUpdateCacheMut.RLock()
	cache, cached := drugWarningUpdateCache[key]
	drugWarningUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			drugWarningAllColumns,
			drugWarningPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update drug_warning, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"drug_warning\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, drugWarningPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(drugWarningType, drugWarningMapping, append(wl, drugWarningPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update drug_warning row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for drug_warning")
	}

	if !cached {
		drugWarningUpdateCacheMut.Lock()
		drugWarningUpdateCache[key] = cache
		drugWarningUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q drugWarningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for drug_warning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for drug_warning")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DrugWarningSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugWarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"drug_warning\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugWarningPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in drugWarning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all drugWarning")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DrugWarning) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_warning provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugWarningColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	drugWarningUpsertCacheMut.RLock()
	cache, cached := drugWarningUpsertCache[key]
	drugWarningUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			drugWarningAllColumns,
			drugWarningColumnsWithDefault,
			drugWarningColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			drugWarningAllColumns,
			drugWarningPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert drug_warning, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(drugWarningPrimaryKeyColumns))
			copy(conflict, drugWarningPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"drug_warning\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(drugWarningType, drugWarningMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(drugWarningType, drugWarningMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert drug_warning")
	}

	if !cached {
		drugWarningUpsertCacheMut.Lock()
		drugWarningUpsertCache[key] = cache
		drugWarningUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DrugWarning record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DrugWarning) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DrugWarning provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), drugWarningPrimaryKeyMapping)
	sql := "DELETE FROM \"drug_warning\" WHERE \"warning_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from drug_warning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for drug_warning")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q drugWarningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no drugWarningQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drug_warning")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_warning")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DrugWarningSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(drugWarningBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugWarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"drug_warning\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugWarningPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drugWarning slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_warning")
	}

	if len(drugWarningAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DrugWarning) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDrugWarning(ctx, exec, o.WarningID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DrugWarningSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DrugWarningSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugWarningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"drug_warning\".* FROM \"drug_warning\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugWarningPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DrugWarningSlice")
	}

	*o = slice

	return nil
}

// DrugWarningExists checks if the DrugWarning row exists.
func DrugWarningExists(ctx context.Context, exec boil.ContextExecutor, warningID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"drug_warning\" where \"warning_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, warningID)
	}
	row := exec.QueryRowContext(ctx, sql, warningID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if drug_warning exists")
	}

	return exists, nil
}
