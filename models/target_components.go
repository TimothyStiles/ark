// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TargetComponent is an object representing the database table.
type TargetComponent struct {
	Tid         int64 `boil:"tid" json:"tid" toml:"tid" yaml:"tid"`
	ComponentID int64 `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	TargcompID  int64 `boil:"targcomp_id" json:"targcomp_id" toml:"targcomp_id" yaml:"targcomp_id"`
	Homologue   int16 `boil:"homologue" json:"homologue" toml:"homologue" yaml:"homologue"`

	R *targetComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetComponentColumns = struct {
	Tid         string
	ComponentID string
	TargcompID  string
	Homologue   string
}{
	Tid:         "tid",
	ComponentID: "component_id",
	TargcompID:  "targcomp_id",
	Homologue:   "homologue",
}

var TargetComponentTableColumns = struct {
	Tid         string
	ComponentID string
	TargcompID  string
	Homologue   string
}{
	Tid:         "target_components.tid",
	ComponentID: "target_components.component_id",
	TargcompID:  "target_components.targcomp_id",
	Homologue:   "target_components.homologue",
}

// Generated where

var TargetComponentWhere = struct {
	Tid         whereHelperint64
	ComponentID whereHelperint64
	TargcompID  whereHelperint64
	Homologue   whereHelperint16
}{
	Tid:         whereHelperint64{field: "\"target_components\".\"tid\""},
	ComponentID: whereHelperint64{field: "\"target_components\".\"component_id\""},
	TargcompID:  whereHelperint64{field: "\"target_components\".\"targcomp_id\""},
	Homologue:   whereHelperint16{field: "\"target_components\".\"homologue\""},
}

// TargetComponentRels is where relationship names are stored.
var TargetComponentRels = struct {
	TidTargetDictionary string
	Component           string
}{
	TidTargetDictionary: "TidTargetDictionary",
	Component:           "Component",
}

// targetComponentR is where relationships are stored.
type targetComponentR struct {
	TidTargetDictionary *TargetDictionary  `boil:"TidTargetDictionary" json:"TidTargetDictionary" toml:"TidTargetDictionary" yaml:"TidTargetDictionary"`
	Component           *ComponentSequence `boil:"Component" json:"Component" toml:"Component" yaml:"Component"`
}

// NewStruct creates a new relationship struct
func (*targetComponentR) NewStruct() *targetComponentR {
	return &targetComponentR{}
}

func (r *targetComponentR) GetTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.TidTargetDictionary
}

func (r *targetComponentR) GetComponent() *ComponentSequence {
	if r == nil {
		return nil
	}
	return r.Component
}

// targetComponentL is where Load methods for each relationship are stored.
type targetComponentL struct{}

var (
	targetComponentAllColumns            = []string{"tid", "component_id", "targcomp_id", "homologue"}
	targetComponentColumnsWithoutDefault = []string{"tid", "component_id", "targcomp_id", "homologue"}
	targetComponentColumnsWithDefault    = []string{}
	targetComponentPrimaryKeyColumns     = []string{"targcomp_id"}
	targetComponentGeneratedColumns      = []string{}
)

type (
	// TargetComponentSlice is an alias for a slice of pointers to TargetComponent.
	// This should almost always be used instead of []TargetComponent.
	TargetComponentSlice []*TargetComponent
	// TargetComponentHook is the signature for custom TargetComponent hook methods
	TargetComponentHook func(context.Context, boil.ContextExecutor, *TargetComponent) error

	targetComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetComponentType                 = reflect.TypeOf(&TargetComponent{})
	targetComponentMapping              = queries.MakeStructMapping(targetComponentType)
	targetComponentPrimaryKeyMapping, _ = queries.BindMapping(targetComponentType, targetComponentMapping, targetComponentPrimaryKeyColumns)
	targetComponentInsertCacheMut       sync.RWMutex
	targetComponentInsertCache          = make(map[string]insertCache)
	targetComponentUpdateCacheMut       sync.RWMutex
	targetComponentUpdateCache          = make(map[string]updateCache)
	targetComponentUpsertCacheMut       sync.RWMutex
	targetComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetComponentAfterSelectHooks []TargetComponentHook

var targetComponentBeforeInsertHooks []TargetComponentHook
var targetComponentAfterInsertHooks []TargetComponentHook

var targetComponentBeforeUpdateHooks []TargetComponentHook
var targetComponentAfterUpdateHooks []TargetComponentHook

var targetComponentBeforeDeleteHooks []TargetComponentHook
var targetComponentAfterDeleteHooks []TargetComponentHook

var targetComponentBeforeUpsertHooks []TargetComponentHook
var targetComponentAfterUpsertHooks []TargetComponentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TargetComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TargetComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TargetComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TargetComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TargetComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TargetComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TargetComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TargetComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TargetComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetComponentHook registers your hook function for all future operations.
func AddTargetComponentHook(hookPoint boil.HookPoint, targetComponentHook TargetComponentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		targetComponentAfterSelectHooks = append(targetComponentAfterSelectHooks, targetComponentHook)
	case boil.BeforeInsertHook:
		targetComponentBeforeInsertHooks = append(targetComponentBeforeInsertHooks, targetComponentHook)
	case boil.AfterInsertHook:
		targetComponentAfterInsertHooks = append(targetComponentAfterInsertHooks, targetComponentHook)
	case boil.BeforeUpdateHook:
		targetComponentBeforeUpdateHooks = append(targetComponentBeforeUpdateHooks, targetComponentHook)
	case boil.AfterUpdateHook:
		targetComponentAfterUpdateHooks = append(targetComponentAfterUpdateHooks, targetComponentHook)
	case boil.BeforeDeleteHook:
		targetComponentBeforeDeleteHooks = append(targetComponentBeforeDeleteHooks, targetComponentHook)
	case boil.AfterDeleteHook:
		targetComponentAfterDeleteHooks = append(targetComponentAfterDeleteHooks, targetComponentHook)
	case boil.BeforeUpsertHook:
		targetComponentBeforeUpsertHooks = append(targetComponentBeforeUpsertHooks, targetComponentHook)
	case boil.AfterUpsertHook:
		targetComponentAfterUpsertHooks = append(targetComponentAfterUpsertHooks, targetComponentHook)
	}
}

// One returns a single targetComponent record from the query.
func (q targetComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TargetComponent, error) {
	o := &TargetComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for target_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TargetComponent records from the query.
func (q targetComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetComponentSlice, error) {
	var o []*TargetComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TargetComponent slice")
	}

	if len(targetComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TargetComponent records in the query.
func (q targetComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count target_components rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if target_components exists")
	}

	return count > 0, nil
}

// TidTargetDictionary pointed to by the foreign key.
func (o *TargetComponent) TidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.Tid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// Component pointed to by the foreign key.
func (o *TargetComponent) Component(mods ...qm.QueryMod) componentSequenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"component_id\" = ?", o.ComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentSequences(queryMods...)
}

// LoadTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetComponentL) LoadTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetComponent interface{}, mods queries.Applicator) error {
	var slice []*TargetComponent
	var object *TargetComponent

	if singular {
		object = maybeTargetComponent.(*TargetComponent)
	} else {
		slice = *maybeTargetComponent.(*[]*TargetComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetComponentR{}
		}
		args = append(args, object.Tid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetComponentR{}
			}

			for _, a := range args {
				if a == obj.Tid {
					continue Outer
				}
			}

			args = append(args, obj.Tid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(targetComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.TidTargetComponents = append(foreign.R.TidTargetComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tid == foreign.Tid {
				local.R.TidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.TidTargetComponents = append(foreign.R.TidTargetComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetComponentL) LoadComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetComponent interface{}, mods queries.Applicator) error {
	var slice []*TargetComponent
	var object *TargetComponent

	if singular {
		object = maybeTargetComponent.(*TargetComponent)
	} else {
		slice = *maybeTargetComponent.(*[]*TargetComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetComponentR{}
		}
		args = append(args, object.ComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetComponentR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_sequences`),
		qm.WhereIn(`component_sequences.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentSequence")
	}

	var resultSlice []*ComponentSequence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentSequence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_sequences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_sequences")
	}

	if len(targetComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Component = foreign
		if foreign.R == nil {
			foreign.R = &componentSequenceR{}
		}
		foreign.R.ComponentTargetComponents = append(foreign.R.ComponentTargetComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentID == foreign.ComponentID {
				local.R.Component = foreign
				if foreign.R == nil {
					foreign.R = &componentSequenceR{}
				}
				foreign.R.ComponentTargetComponents = append(foreign.R.ComponentTargetComponents, local)
				break
			}
		}
	}

	return nil
}

// SetTidTargetDictionary of the targetComponent to the related item.
// Sets o.R.TidTargetDictionary to related.
// Adds o to related.R.TidTargetComponents.
func (o *TargetComponent) SetTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
		strmangle.WhereClause("\"", "\"", 0, targetComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.TargcompID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tid = related.Tid
	if o.R == nil {
		o.R = &targetComponentR{
			TidTargetDictionary: related,
		}
	} else {
		o.R.TidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			TidTargetComponents: TargetComponentSlice{o},
		}
	} else {
		related.R.TidTargetComponents = append(related.R.TidTargetComponents, o)
	}

	return nil
}

// SetComponent of the targetComponent to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentTargetComponents.
func (o *TargetComponent) SetComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentSequence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
		strmangle.WhereClause("\"", "\"", 0, targetComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ComponentID, o.TargcompID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentID = related.ComponentID
	if o.R == nil {
		o.R = &targetComponentR{
			Component: related,
		}
	} else {
		o.R.Component = related
	}

	if related.R == nil {
		related.R = &componentSequenceR{
			ComponentTargetComponents: TargetComponentSlice{o},
		}
	} else {
		related.R.ComponentTargetComponents = append(related.R.ComponentTargetComponents, o)
	}

	return nil
}

// TargetComponents retrieves all the records using an executor.
func TargetComponents(mods ...qm.QueryMod) targetComponentQuery {
	mods = append(mods, qm.From("\"target_components\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"target_components\".*"})
	}

	return targetComponentQuery{q}
}

// FindTargetComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTargetComponent(ctx context.Context, exec boil.ContextExecutor, targcompID int64, selectCols ...string) (*TargetComponent, error) {
	targetComponentObj := &TargetComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"target_components\" where \"targcomp_id\"=?", sel,
	)

	q := queries.Raw(query, targcompID)

	err := q.Bind(ctx, exec, targetComponentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from target_components")
	}

	if err = targetComponentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return targetComponentObj, err
	}

	return targetComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TargetComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_components provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetComponentInsertCacheMut.RLock()
	cache, cached := targetComponentInsertCache[key]
	targetComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetComponentAllColumns,
			targetComponentColumnsWithDefault,
			targetComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetComponentType, targetComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetComponentType, targetComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"target_components\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"target_components\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into target_components")
	}

	if !cached {
		targetComponentInsertCacheMut.Lock()
		targetComponentInsertCache[key] = cache
		targetComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TargetComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TargetComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetComponentUpdateCacheMut.RLock()
	cache, cached := targetComponentUpdateCache[key]
	targetComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetComponentAllColumns,
			targetComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update target_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"target_components\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, targetComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetComponentType, targetComponentMapping, append(wl, targetComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update target_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for target_components")
	}

	if !cached {
		targetComponentUpdateCacheMut.Lock()
		targetComponentUpdateCache[key] = cache
		targetComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for target_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for target_components")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"target_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in targetComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all targetComponent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TargetComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_components provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetComponentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetComponentUpsertCacheMut.RLock()
	cache, cached := targetComponentUpsertCache[key]
	targetComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			targetComponentAllColumns,
			targetComponentColumnsWithDefault,
			targetComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			targetComponentAllColumns,
			targetComponentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert target_components, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(targetComponentPrimaryKeyColumns))
			copy(conflict, targetComponentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"target_components\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(targetComponentType, targetComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetComponentType, targetComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert target_components")
	}

	if !cached {
		targetComponentUpsertCacheMut.Lock()
		targetComponentUpsertCache[key] = cache
		targetComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TargetComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TargetComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TargetComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"target_components\" WHERE \"targcomp_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from target_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for target_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from target_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_components")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"target_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targetComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_components")
	}

	if len(targetComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TargetComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTargetComponent(ctx, exec, o.TargcompID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"target_components\".* FROM \"target_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetComponentSlice")
	}

	*o = slice

	return nil
}

// TargetComponentExists checks if the TargetComponent row exists.
func TargetComponentExists(ctx context.Context, exec boil.ContextExecutor, targcompID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"target_components\" where \"targcomp_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, targcompID)
	}
	row := exec.QueryRowContext(ctx, sql, targcompID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if target_components exists")
	}

	return exists, nil
}
