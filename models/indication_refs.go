// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IndicationRef is an object representing the database table.
type IndicationRef struct {
	IndrefID  int64  `boil:"indref_id" json:"indref_id" toml:"indref_id" yaml:"indref_id"`
	DrugindID int64  `boil:"drugind_id" json:"drugind_id" toml:"drugind_id" yaml:"drugind_id"`
	RefType   string `boil:"ref_type" json:"ref_type" toml:"ref_type" yaml:"ref_type"`
	RefID     string `boil:"ref_id" json:"ref_id" toml:"ref_id" yaml:"ref_id"`
	RefURL    string `boil:"ref_url" json:"ref_url" toml:"ref_url" yaml:"ref_url"`

	R *indicationRefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L indicationRefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndicationRefColumns = struct {
	IndrefID  string
	DrugindID string
	RefType   string
	RefID     string
	RefURL    string
}{
	IndrefID:  "indref_id",
	DrugindID: "drugind_id",
	RefType:   "ref_type",
	RefID:     "ref_id",
	RefURL:    "ref_url",
}

var IndicationRefTableColumns = struct {
	IndrefID  string
	DrugindID string
	RefType   string
	RefID     string
	RefURL    string
}{
	IndrefID:  "indication_refs.indref_id",
	DrugindID: "indication_refs.drugind_id",
	RefType:   "indication_refs.ref_type",
	RefID:     "indication_refs.ref_id",
	RefURL:    "indication_refs.ref_url",
}

// Generated where

var IndicationRefWhere = struct {
	IndrefID  whereHelperint64
	DrugindID whereHelperint64
	RefType   whereHelperstring
	RefID     whereHelperstring
	RefURL    whereHelperstring
}{
	IndrefID:  whereHelperint64{field: "\"indication_refs\".\"indref_id\""},
	DrugindID: whereHelperint64{field: "\"indication_refs\".\"drugind_id\""},
	RefType:   whereHelperstring{field: "\"indication_refs\".\"ref_type\""},
	RefID:     whereHelperstring{field: "\"indication_refs\".\"ref_id\""},
	RefURL:    whereHelperstring{field: "\"indication_refs\".\"ref_url\""},
}

// IndicationRefRels is where relationship names are stored.
var IndicationRefRels = struct {
	Drugind string
}{
	Drugind: "Drugind",
}

// indicationRefR is where relationships are stored.
type indicationRefR struct {
	Drugind *DrugIndication `boil:"Drugind" json:"Drugind" toml:"Drugind" yaml:"Drugind"`
}

// NewStruct creates a new relationship struct
func (*indicationRefR) NewStruct() *indicationRefR {
	return &indicationRefR{}
}

func (r *indicationRefR) GetDrugind() *DrugIndication {
	if r == nil {
		return nil
	}
	return r.Drugind
}

// indicationRefL is where Load methods for each relationship are stored.
type indicationRefL struct{}

var (
	indicationRefAllColumns            = []string{"indref_id", "drugind_id", "ref_type", "ref_id", "ref_url"}
	indicationRefColumnsWithoutDefault = []string{"indref_id", "drugind_id", "ref_type", "ref_id", "ref_url"}
	indicationRefColumnsWithDefault    = []string{}
	indicationRefPrimaryKeyColumns     = []string{"indref_id"}
	indicationRefGeneratedColumns      = []string{}
)

type (
	// IndicationRefSlice is an alias for a slice of pointers to IndicationRef.
	// This should almost always be used instead of []IndicationRef.
	IndicationRefSlice []*IndicationRef
	// IndicationRefHook is the signature for custom IndicationRef hook methods
	IndicationRefHook func(context.Context, boil.ContextExecutor, *IndicationRef) error

	indicationRefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	indicationRefType                 = reflect.TypeOf(&IndicationRef{})
	indicationRefMapping              = queries.MakeStructMapping(indicationRefType)
	indicationRefPrimaryKeyMapping, _ = queries.BindMapping(indicationRefType, indicationRefMapping, indicationRefPrimaryKeyColumns)
	indicationRefInsertCacheMut       sync.RWMutex
	indicationRefInsertCache          = make(map[string]insertCache)
	indicationRefUpdateCacheMut       sync.RWMutex
	indicationRefUpdateCache          = make(map[string]updateCache)
	indicationRefUpsertCacheMut       sync.RWMutex
	indicationRefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var indicationRefAfterSelectHooks []IndicationRefHook

var indicationRefBeforeInsertHooks []IndicationRefHook
var indicationRefAfterInsertHooks []IndicationRefHook

var indicationRefBeforeUpdateHooks []IndicationRefHook
var indicationRefAfterUpdateHooks []IndicationRefHook

var indicationRefBeforeDeleteHooks []IndicationRefHook
var indicationRefAfterDeleteHooks []IndicationRefHook

var indicationRefBeforeUpsertHooks []IndicationRefHook
var indicationRefAfterUpsertHooks []IndicationRefHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IndicationRef) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IndicationRef) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IndicationRef) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IndicationRef) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IndicationRef) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IndicationRef) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IndicationRef) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IndicationRef) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IndicationRef) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indicationRefAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIndicationRefHook registers your hook function for all future operations.
func AddIndicationRefHook(hookPoint boil.HookPoint, indicationRefHook IndicationRefHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		indicationRefAfterSelectHooks = append(indicationRefAfterSelectHooks, indicationRefHook)
	case boil.BeforeInsertHook:
		indicationRefBeforeInsertHooks = append(indicationRefBeforeInsertHooks, indicationRefHook)
	case boil.AfterInsertHook:
		indicationRefAfterInsertHooks = append(indicationRefAfterInsertHooks, indicationRefHook)
	case boil.BeforeUpdateHook:
		indicationRefBeforeUpdateHooks = append(indicationRefBeforeUpdateHooks, indicationRefHook)
	case boil.AfterUpdateHook:
		indicationRefAfterUpdateHooks = append(indicationRefAfterUpdateHooks, indicationRefHook)
	case boil.BeforeDeleteHook:
		indicationRefBeforeDeleteHooks = append(indicationRefBeforeDeleteHooks, indicationRefHook)
	case boil.AfterDeleteHook:
		indicationRefAfterDeleteHooks = append(indicationRefAfterDeleteHooks, indicationRefHook)
	case boil.BeforeUpsertHook:
		indicationRefBeforeUpsertHooks = append(indicationRefBeforeUpsertHooks, indicationRefHook)
	case boil.AfterUpsertHook:
		indicationRefAfterUpsertHooks = append(indicationRefAfterUpsertHooks, indicationRefHook)
	}
}

// One returns a single indicationRef record from the query.
func (q indicationRefQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IndicationRef, error) {
	o := &IndicationRef{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for indication_refs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IndicationRef records from the query.
func (q indicationRefQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndicationRefSlice, error) {
	var o []*IndicationRef

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IndicationRef slice")
	}

	if len(indicationRefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IndicationRef records in the query.
func (q indicationRefQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count indication_refs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q indicationRefQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if indication_refs exists")
	}

	return count > 0, nil
}

// Drugind pointed to by the foreign key.
func (o *IndicationRef) Drugind(mods ...qm.QueryMod) drugIndicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"drugind_id\" = ?", o.DrugindID),
	}

	queryMods = append(queryMods, mods...)

	return DrugIndications(queryMods...)
}

// LoadDrugind allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (indicationRefL) LoadDrugind(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndicationRef interface{}, mods queries.Applicator) error {
	var slice []*IndicationRef
	var object *IndicationRef

	if singular {
		object = maybeIndicationRef.(*IndicationRef)
	} else {
		slice = *maybeIndicationRef.(*[]*IndicationRef)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &indicationRefR{}
		}
		args = append(args, object.DrugindID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &indicationRefR{}
			}

			for _, a := range args {
				if a == obj.DrugindID {
					continue Outer
				}
			}

			args = append(args, obj.DrugindID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_indication`),
		qm.WhereIn(`drug_indication.drugind_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DrugIndication")
	}

	var resultSlice []*DrugIndication
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DrugIndication")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for drug_indication")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_indication")
	}

	if len(indicationRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Drugind = foreign
		if foreign.R == nil {
			foreign.R = &drugIndicationR{}
		}
		foreign.R.DrugindIndicationRefs = append(foreign.R.DrugindIndicationRefs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DrugindID == foreign.DrugindID {
				local.R.Drugind = foreign
				if foreign.R == nil {
					foreign.R = &drugIndicationR{}
				}
				foreign.R.DrugindIndicationRefs = append(foreign.R.DrugindIndicationRefs, local)
				break
			}
		}
	}

	return nil
}

// SetDrugind of the indicationRef to the related item.
// Sets o.R.Drugind to related.
// Adds o to related.R.DrugindIndicationRefs.
func (o *IndicationRef) SetDrugind(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DrugIndication) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"indication_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"drugind_id"}),
		strmangle.WhereClause("\"", "\"", 0, indicationRefPrimaryKeyColumns),
	)
	values := []interface{}{related.DrugindID, o.IndrefID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DrugindID = related.DrugindID
	if o.R == nil {
		o.R = &indicationRefR{
			Drugind: related,
		}
	} else {
		o.R.Drugind = related
	}

	if related.R == nil {
		related.R = &drugIndicationR{
			DrugindIndicationRefs: IndicationRefSlice{o},
		}
	} else {
		related.R.DrugindIndicationRefs = append(related.R.DrugindIndicationRefs, o)
	}

	return nil
}

// IndicationRefs retrieves all the records using an executor.
func IndicationRefs(mods ...qm.QueryMod) indicationRefQuery {
	mods = append(mods, qm.From("\"indication_refs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"indication_refs\".*"})
	}

	return indicationRefQuery{q}
}

// FindIndicationRef retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndicationRef(ctx context.Context, exec boil.ContextExecutor, indrefID int64, selectCols ...string) (*IndicationRef, error) {
	indicationRefObj := &IndicationRef{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"indication_refs\" where \"indref_id\"=?", sel,
	)

	q := queries.Raw(query, indrefID)

	err := q.Bind(ctx, exec, indicationRefObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from indication_refs")
	}

	if err = indicationRefObj.doAfterSelectHooks(ctx, exec); err != nil {
		return indicationRefObj, err
	}

	return indicationRefObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IndicationRef) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no indication_refs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(indicationRefColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	indicationRefInsertCacheMut.RLock()
	cache, cached := indicationRefInsertCache[key]
	indicationRefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			indicationRefAllColumns,
			indicationRefColumnsWithDefault,
			indicationRefColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(indicationRefType, indicationRefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(indicationRefType, indicationRefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"indication_refs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"indication_refs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into indication_refs")
	}

	if !cached {
		indicationRefInsertCacheMut.Lock()
		indicationRefInsertCache[key] = cache
		indicationRefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IndicationRef.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IndicationRef) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	indicationRefUpdateCacheMut.RLock()
	cache, cached := indicationRefUpdateCache[key]
	indicationRefUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			indicationRefAllColumns,
			indicationRefPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update indication_refs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"indication_refs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, indicationRefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(indicationRefType, indicationRefMapping, append(wl, indicationRefPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update indication_refs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for indication_refs")
	}

	if !cached {
		indicationRefUpdateCacheMut.Lock()
		indicationRefUpdateCache[key] = cache
		indicationRefUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q indicationRefQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for indication_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for indication_refs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndicationRefSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indicationRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"indication_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, indicationRefPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in indicationRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all indicationRef")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IndicationRef) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no indication_refs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(indicationRefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	indicationRefUpsertCacheMut.RLock()
	cache, cached := indicationRefUpsertCache[key]
	indicationRefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			indicationRefAllColumns,
			indicationRefColumnsWithDefault,
			indicationRefColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			indicationRefAllColumns,
			indicationRefPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert indication_refs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(indicationRefPrimaryKeyColumns))
			copy(conflict, indicationRefPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"indication_refs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(indicationRefType, indicationRefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(indicationRefType, indicationRefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert indication_refs")
	}

	if !cached {
		indicationRefUpsertCacheMut.Lock()
		indicationRefUpsertCache[key] = cache
		indicationRefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IndicationRef record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IndicationRef) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IndicationRef provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), indicationRefPrimaryKeyMapping)
	sql := "DELETE FROM \"indication_refs\" WHERE \"indref_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from indication_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for indication_refs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q indicationRefQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no indicationRefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from indication_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for indication_refs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndicationRefSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(indicationRefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indicationRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"indication_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, indicationRefPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from indicationRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for indication_refs")
	}

	if len(indicationRefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IndicationRef) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndicationRef(ctx, exec, o.IndrefID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndicationRefSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndicationRefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indicationRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"indication_refs\".* FROM \"indication_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, indicationRefPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IndicationRefSlice")
	}

	*o = slice

	return nil
}

// IndicationRefExists checks if the IndicationRef row exists.
func IndicationRefExists(ctx context.Context, exec boil.ContextExecutor, indrefID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"indication_refs\" where \"indref_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, indrefID)
	}
	row := exec.QueryRowContext(ctx, sql, indrefID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if indication_refs exists")
	}

	return exists, nil
}
