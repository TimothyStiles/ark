// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProteinFamilyClassification is an object representing the database table.
type ProteinFamilyClassification struct {
	ProteinClassID   int64       `boil:"protein_class_id" json:"protein_class_id" toml:"protein_class_id" yaml:"protein_class_id"`
	ProteinClassDesc string      `boil:"protein_class_desc" json:"protein_class_desc" toml:"protein_class_desc" yaml:"protein_class_desc"`
	L1               string      `boil:"l1" json:"l1" toml:"l1" yaml:"l1"`
	L2               null.String `boil:"l2" json:"l2,omitempty" toml:"l2" yaml:"l2,omitempty"`
	L3               null.String `boil:"l3" json:"l3,omitempty" toml:"l3" yaml:"l3,omitempty"`
	L4               null.String `boil:"l4" json:"l4,omitempty" toml:"l4" yaml:"l4,omitempty"`
	L5               null.String `boil:"l5" json:"l5,omitempty" toml:"l5" yaml:"l5,omitempty"`
	L6               null.String `boil:"l6" json:"l6,omitempty" toml:"l6" yaml:"l6,omitempty"`
	L7               null.String `boil:"l7" json:"l7,omitempty" toml:"l7" yaml:"l7,omitempty"`
	L8               null.String `boil:"l8" json:"l8,omitempty" toml:"l8" yaml:"l8,omitempty"`

	R *proteinFamilyClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L proteinFamilyClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProteinFamilyClassificationColumns = struct {
	ProteinClassID   string
	ProteinClassDesc string
	L1               string
	L2               string
	L3               string
	L4               string
	L5               string
	L6               string
	L7               string
	L8               string
}{
	ProteinClassID:   "protein_class_id",
	ProteinClassDesc: "protein_class_desc",
	L1:               "l1",
	L2:               "l2",
	L3:               "l3",
	L4:               "l4",
	L5:               "l5",
	L6:               "l6",
	L7:               "l7",
	L8:               "l8",
}

var ProteinFamilyClassificationTableColumns = struct {
	ProteinClassID   string
	ProteinClassDesc string
	L1               string
	L2               string
	L3               string
	L4               string
	L5               string
	L6               string
	L7               string
	L8               string
}{
	ProteinClassID:   "protein_family_classification.protein_class_id",
	ProteinClassDesc: "protein_family_classification.protein_class_desc",
	L1:               "protein_family_classification.l1",
	L2:               "protein_family_classification.l2",
	L3:               "protein_family_classification.l3",
	L4:               "protein_family_classification.l4",
	L5:               "protein_family_classification.l5",
	L6:               "protein_family_classification.l6",
	L7:               "protein_family_classification.l7",
	L8:               "protein_family_classification.l8",
}

// Generated where

var ProteinFamilyClassificationWhere = struct {
	ProteinClassID   whereHelperint64
	ProteinClassDesc whereHelperstring
	L1               whereHelperstring
	L2               whereHelpernull_String
	L3               whereHelpernull_String
	L4               whereHelpernull_String
	L5               whereHelpernull_String
	L6               whereHelpernull_String
	L7               whereHelpernull_String
	L8               whereHelpernull_String
}{
	ProteinClassID:   whereHelperint64{field: "\"protein_family_classification\".\"protein_class_id\""},
	ProteinClassDesc: whereHelperstring{field: "\"protein_family_classification\".\"protein_class_desc\""},
	L1:               whereHelperstring{field: "\"protein_family_classification\".\"l1\""},
	L2:               whereHelpernull_String{field: "\"protein_family_classification\".\"l2\""},
	L3:               whereHelpernull_String{field: "\"protein_family_classification\".\"l3\""},
	L4:               whereHelpernull_String{field: "\"protein_family_classification\".\"l4\""},
	L5:               whereHelpernull_String{field: "\"protein_family_classification\".\"l5\""},
	L6:               whereHelpernull_String{field: "\"protein_family_classification\".\"l6\""},
	L7:               whereHelpernull_String{field: "\"protein_family_classification\".\"l7\""},
	L8:               whereHelpernull_String{field: "\"protein_family_classification\".\"l8\""},
}

// ProteinFamilyClassificationRels is where relationship names are stored.
var ProteinFamilyClassificationRels = struct {
}{}

// proteinFamilyClassificationR is where relationships are stored.
type proteinFamilyClassificationR struct {
}

// NewStruct creates a new relationship struct
func (*proteinFamilyClassificationR) NewStruct() *proteinFamilyClassificationR {
	return &proteinFamilyClassificationR{}
}

// proteinFamilyClassificationL is where Load methods for each relationship are stored.
type proteinFamilyClassificationL struct{}

var (
	proteinFamilyClassificationAllColumns            = []string{"protein_class_id", "protein_class_desc", "l1", "l2", "l3", "l4", "l5", "l6", "l7", "l8"}
	proteinFamilyClassificationColumnsWithoutDefault = []string{"protein_class_id", "protein_class_desc", "l1"}
	proteinFamilyClassificationColumnsWithDefault    = []string{"l2", "l3", "l4", "l5", "l6", "l7", "l8"}
	proteinFamilyClassificationPrimaryKeyColumns     = []string{"protein_class_id"}
	proteinFamilyClassificationGeneratedColumns      = []string{}
)

type (
	// ProteinFamilyClassificationSlice is an alias for a slice of pointers to ProteinFamilyClassification.
	// This should almost always be used instead of []ProteinFamilyClassification.
	ProteinFamilyClassificationSlice []*ProteinFamilyClassification
	// ProteinFamilyClassificationHook is the signature for custom ProteinFamilyClassification hook methods
	ProteinFamilyClassificationHook func(context.Context, boil.ContextExecutor, *ProteinFamilyClassification) error

	proteinFamilyClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	proteinFamilyClassificationType                 = reflect.TypeOf(&ProteinFamilyClassification{})
	proteinFamilyClassificationMapping              = queries.MakeStructMapping(proteinFamilyClassificationType)
	proteinFamilyClassificationPrimaryKeyMapping, _ = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, proteinFamilyClassificationPrimaryKeyColumns)
	proteinFamilyClassificationInsertCacheMut       sync.RWMutex
	proteinFamilyClassificationInsertCache          = make(map[string]insertCache)
	proteinFamilyClassificationUpdateCacheMut       sync.RWMutex
	proteinFamilyClassificationUpdateCache          = make(map[string]updateCache)
	proteinFamilyClassificationUpsertCacheMut       sync.RWMutex
	proteinFamilyClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var proteinFamilyClassificationAfterSelectHooks []ProteinFamilyClassificationHook

var proteinFamilyClassificationBeforeInsertHooks []ProteinFamilyClassificationHook
var proteinFamilyClassificationAfterInsertHooks []ProteinFamilyClassificationHook

var proteinFamilyClassificationBeforeUpdateHooks []ProteinFamilyClassificationHook
var proteinFamilyClassificationAfterUpdateHooks []ProteinFamilyClassificationHook

var proteinFamilyClassificationBeforeDeleteHooks []ProteinFamilyClassificationHook
var proteinFamilyClassificationAfterDeleteHooks []ProteinFamilyClassificationHook

var proteinFamilyClassificationBeforeUpsertHooks []ProteinFamilyClassificationHook
var proteinFamilyClassificationAfterUpsertHooks []ProteinFamilyClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProteinFamilyClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProteinFamilyClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProteinFamilyClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProteinFamilyClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProteinFamilyClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProteinFamilyClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProteinFamilyClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProteinFamilyClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProteinFamilyClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinFamilyClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProteinFamilyClassificationHook registers your hook function for all future operations.
func AddProteinFamilyClassificationHook(hookPoint boil.HookPoint, proteinFamilyClassificationHook ProteinFamilyClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		proteinFamilyClassificationAfterSelectHooks = append(proteinFamilyClassificationAfterSelectHooks, proteinFamilyClassificationHook)
	case boil.BeforeInsertHook:
		proteinFamilyClassificationBeforeInsertHooks = append(proteinFamilyClassificationBeforeInsertHooks, proteinFamilyClassificationHook)
	case boil.AfterInsertHook:
		proteinFamilyClassificationAfterInsertHooks = append(proteinFamilyClassificationAfterInsertHooks, proteinFamilyClassificationHook)
	case boil.BeforeUpdateHook:
		proteinFamilyClassificationBeforeUpdateHooks = append(proteinFamilyClassificationBeforeUpdateHooks, proteinFamilyClassificationHook)
	case boil.AfterUpdateHook:
		proteinFamilyClassificationAfterUpdateHooks = append(proteinFamilyClassificationAfterUpdateHooks, proteinFamilyClassificationHook)
	case boil.BeforeDeleteHook:
		proteinFamilyClassificationBeforeDeleteHooks = append(proteinFamilyClassificationBeforeDeleteHooks, proteinFamilyClassificationHook)
	case boil.AfterDeleteHook:
		proteinFamilyClassificationAfterDeleteHooks = append(proteinFamilyClassificationAfterDeleteHooks, proteinFamilyClassificationHook)
	case boil.BeforeUpsertHook:
		proteinFamilyClassificationBeforeUpsertHooks = append(proteinFamilyClassificationBeforeUpsertHooks, proteinFamilyClassificationHook)
	case boil.AfterUpsertHook:
		proteinFamilyClassificationAfterUpsertHooks = append(proteinFamilyClassificationAfterUpsertHooks, proteinFamilyClassificationHook)
	}
}

// One returns a single proteinFamilyClassification record from the query.
func (q proteinFamilyClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProteinFamilyClassification, error) {
	o := &ProteinFamilyClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for protein_family_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProteinFamilyClassification records from the query.
func (q proteinFamilyClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProteinFamilyClassificationSlice, error) {
	var o []*ProteinFamilyClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProteinFamilyClassification slice")
	}

	if len(proteinFamilyClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProteinFamilyClassification records in the query.
func (q proteinFamilyClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count protein_family_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q proteinFamilyClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if protein_family_classification exists")
	}

	return count > 0, nil
}

// ProteinFamilyClassifications retrieves all the records using an executor.
func ProteinFamilyClassifications(mods ...qm.QueryMod) proteinFamilyClassificationQuery {
	mods = append(mods, qm.From("\"protein_family_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"protein_family_classification\".*"})
	}

	return proteinFamilyClassificationQuery{q}
}

// FindProteinFamilyClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProteinFamilyClassification(ctx context.Context, exec boil.ContextExecutor, proteinClassID int64, selectCols ...string) (*ProteinFamilyClassification, error) {
	proteinFamilyClassificationObj := &ProteinFamilyClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"protein_family_classification\" where \"protein_class_id\"=?", sel,
	)

	q := queries.Raw(query, proteinClassID)

	err := q.Bind(ctx, exec, proteinFamilyClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from protein_family_classification")
	}

	if err = proteinFamilyClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return proteinFamilyClassificationObj, err
	}

	return proteinFamilyClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProteinFamilyClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_family_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinFamilyClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	proteinFamilyClassificationInsertCacheMut.RLock()
	cache, cached := proteinFamilyClassificationInsertCache[key]
	proteinFamilyClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			proteinFamilyClassificationAllColumns,
			proteinFamilyClassificationColumnsWithDefault,
			proteinFamilyClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"protein_family_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"protein_family_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into protein_family_classification")
	}

	if !cached {
		proteinFamilyClassificationInsertCacheMut.Lock()
		proteinFamilyClassificationInsertCache[key] = cache
		proteinFamilyClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProteinFamilyClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProteinFamilyClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	proteinFamilyClassificationUpdateCacheMut.RLock()
	cache, cached := proteinFamilyClassificationUpdateCache[key]
	proteinFamilyClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			proteinFamilyClassificationAllColumns,
			proteinFamilyClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update protein_family_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"protein_family_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, proteinFamilyClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, append(wl, proteinFamilyClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update protein_family_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for protein_family_classification")
	}

	if !cached {
		proteinFamilyClassificationUpdateCacheMut.Lock()
		proteinFamilyClassificationUpdateCache[key] = cache
		proteinFamilyClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q proteinFamilyClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for protein_family_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for protein_family_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProteinFamilyClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinFamilyClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"protein_family_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinFamilyClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in proteinFamilyClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all proteinFamilyClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProteinFamilyClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_family_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinFamilyClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	proteinFamilyClassificationUpsertCacheMut.RLock()
	cache, cached := proteinFamilyClassificationUpsertCache[key]
	proteinFamilyClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			proteinFamilyClassificationAllColumns,
			proteinFamilyClassificationColumnsWithDefault,
			proteinFamilyClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			proteinFamilyClassificationAllColumns,
			proteinFamilyClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert protein_family_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(proteinFamilyClassificationPrimaryKeyColumns))
			copy(conflict, proteinFamilyClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"protein_family_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(proteinFamilyClassificationType, proteinFamilyClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert protein_family_classification")
	}

	if !cached {
		proteinFamilyClassificationUpsertCacheMut.Lock()
		proteinFamilyClassificationUpsertCache[key] = cache
		proteinFamilyClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProteinFamilyClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProteinFamilyClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProteinFamilyClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), proteinFamilyClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"protein_family_classification\" WHERE \"protein_class_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from protein_family_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for protein_family_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q proteinFamilyClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no proteinFamilyClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protein_family_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_family_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProteinFamilyClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(proteinFamilyClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinFamilyClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"protein_family_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinFamilyClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proteinFamilyClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_family_classification")
	}

	if len(proteinFamilyClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProteinFamilyClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProteinFamilyClassification(ctx, exec, o.ProteinClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProteinFamilyClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProteinFamilyClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinFamilyClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"protein_family_classification\".* FROM \"protein_family_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinFamilyClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProteinFamilyClassificationSlice")
	}

	*o = slice

	return nil
}

// ProteinFamilyClassificationExists checks if the ProteinFamilyClassification row exists.
func ProteinFamilyClassificationExists(ctx context.Context, exec boil.ContextExecutor, proteinClassID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"protein_family_classification\" where \"protein_class_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, proteinClassID)
	}
	row := exec.QueryRowContext(ctx, sql, proteinClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if protein_family_classification exists")
	}

	return exists, nil
}
