// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DrugMechanism is an object representing the database table.
type DrugMechanism struct {
	MecID              int64       `boil:"mec_id" json:"mec_id" toml:"mec_id" yaml:"mec_id"`
	RecordID           int64       `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	Molregno           null.Int64  `boil:"molregno" json:"molregno,omitempty" toml:"molregno" yaml:"molregno,omitempty"`
	MechanismOfAction  null.String `boil:"mechanism_of_action" json:"mechanism_of_action,omitempty" toml:"mechanism_of_action" yaml:"mechanism_of_action,omitempty"`
	Tid                null.Int64  `boil:"tid" json:"tid,omitempty" toml:"tid" yaml:"tid,omitempty"`
	SiteID             null.Int64  `boil:"site_id" json:"site_id,omitempty" toml:"site_id" yaml:"site_id,omitempty"`
	ActionType         null.String `boil:"action_type" json:"action_type,omitempty" toml:"action_type" yaml:"action_type,omitempty"`
	DirectInteraction  null.Int16  `boil:"direct_interaction" json:"direct_interaction,omitempty" toml:"direct_interaction" yaml:"direct_interaction,omitempty"`
	MolecularMechanism null.Int16  `boil:"molecular_mechanism" json:"molecular_mechanism,omitempty" toml:"molecular_mechanism" yaml:"molecular_mechanism,omitempty"`
	DiseaseEfficacy    null.Int16  `boil:"disease_efficacy" json:"disease_efficacy,omitempty" toml:"disease_efficacy" yaml:"disease_efficacy,omitempty"`
	MechanismComment   null.String `boil:"mechanism_comment" json:"mechanism_comment,omitempty" toml:"mechanism_comment" yaml:"mechanism_comment,omitempty"`
	SelectivityComment null.String `boil:"selectivity_comment" json:"selectivity_comment,omitempty" toml:"selectivity_comment" yaml:"selectivity_comment,omitempty"`
	BindingSiteComment null.String `boil:"binding_site_comment" json:"binding_site_comment,omitempty" toml:"binding_site_comment" yaml:"binding_site_comment,omitempty"`
	VariantID          null.Int64  `boil:"variant_id" json:"variant_id,omitempty" toml:"variant_id" yaml:"variant_id,omitempty"`

	R *drugMechanismR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L drugMechanismL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DrugMechanismColumns = struct {
	MecID              string
	RecordID           string
	Molregno           string
	MechanismOfAction  string
	Tid                string
	SiteID             string
	ActionType         string
	DirectInteraction  string
	MolecularMechanism string
	DiseaseEfficacy    string
	MechanismComment   string
	SelectivityComment string
	BindingSiteComment string
	VariantID          string
}{
	MecID:              "mec_id",
	RecordID:           "record_id",
	Molregno:           "molregno",
	MechanismOfAction:  "mechanism_of_action",
	Tid:                "tid",
	SiteID:             "site_id",
	ActionType:         "action_type",
	DirectInteraction:  "direct_interaction",
	MolecularMechanism: "molecular_mechanism",
	DiseaseEfficacy:    "disease_efficacy",
	MechanismComment:   "mechanism_comment",
	SelectivityComment: "selectivity_comment",
	BindingSiteComment: "binding_site_comment",
	VariantID:          "variant_id",
}

var DrugMechanismTableColumns = struct {
	MecID              string
	RecordID           string
	Molregno           string
	MechanismOfAction  string
	Tid                string
	SiteID             string
	ActionType         string
	DirectInteraction  string
	MolecularMechanism string
	DiseaseEfficacy    string
	MechanismComment   string
	SelectivityComment string
	BindingSiteComment string
	VariantID          string
}{
	MecID:              "drug_mechanism.mec_id",
	RecordID:           "drug_mechanism.record_id",
	Molregno:           "drug_mechanism.molregno",
	MechanismOfAction:  "drug_mechanism.mechanism_of_action",
	Tid:                "drug_mechanism.tid",
	SiteID:             "drug_mechanism.site_id",
	ActionType:         "drug_mechanism.action_type",
	DirectInteraction:  "drug_mechanism.direct_interaction",
	MolecularMechanism: "drug_mechanism.molecular_mechanism",
	DiseaseEfficacy:    "drug_mechanism.disease_efficacy",
	MechanismComment:   "drug_mechanism.mechanism_comment",
	SelectivityComment: "drug_mechanism.selectivity_comment",
	BindingSiteComment: "drug_mechanism.binding_site_comment",
	VariantID:          "drug_mechanism.variant_id",
}

// Generated where

var DrugMechanismWhere = struct {
	MecID              whereHelperint64
	RecordID           whereHelperint64
	Molregno           whereHelpernull_Int64
	MechanismOfAction  whereHelpernull_String
	Tid                whereHelpernull_Int64
	SiteID             whereHelpernull_Int64
	ActionType         whereHelpernull_String
	DirectInteraction  whereHelpernull_Int16
	MolecularMechanism whereHelpernull_Int16
	DiseaseEfficacy    whereHelpernull_Int16
	MechanismComment   whereHelpernull_String
	SelectivityComment whereHelpernull_String
	BindingSiteComment whereHelpernull_String
	VariantID          whereHelpernull_Int64
}{
	MecID:              whereHelperint64{field: "\"drug_mechanism\".\"mec_id\""},
	RecordID:           whereHelperint64{field: "\"drug_mechanism\".\"record_id\""},
	Molregno:           whereHelpernull_Int64{field: "\"drug_mechanism\".\"molregno\""},
	MechanismOfAction:  whereHelpernull_String{field: "\"drug_mechanism\".\"mechanism_of_action\""},
	Tid:                whereHelpernull_Int64{field: "\"drug_mechanism\".\"tid\""},
	SiteID:             whereHelpernull_Int64{field: "\"drug_mechanism\".\"site_id\""},
	ActionType:         whereHelpernull_String{field: "\"drug_mechanism\".\"action_type\""},
	DirectInteraction:  whereHelpernull_Int16{field: "\"drug_mechanism\".\"direct_interaction\""},
	MolecularMechanism: whereHelpernull_Int16{field: "\"drug_mechanism\".\"molecular_mechanism\""},
	DiseaseEfficacy:    whereHelpernull_Int16{field: "\"drug_mechanism\".\"disease_efficacy\""},
	MechanismComment:   whereHelpernull_String{field: "\"drug_mechanism\".\"mechanism_comment\""},
	SelectivityComment: whereHelpernull_String{field: "\"drug_mechanism\".\"selectivity_comment\""},
	BindingSiteComment: whereHelpernull_String{field: "\"drug_mechanism\".\"binding_site_comment\""},
	VariantID:          whereHelpernull_Int64{field: "\"drug_mechanism\".\"variant_id\""},
}

// DrugMechanismRels is where relationship names are stored.
var DrugMechanismRels = struct {
	Variant                    string
	TidTargetDictionary        string
	Site                       string
	Record                     string
	MolregnoMoleculeDictionary string
	DrugMechanismActionType    string
	MecMechanismRefs           string
}{
	Variant:                    "Variant",
	TidTargetDictionary:        "TidTargetDictionary",
	Site:                       "Site",
	Record:                     "Record",
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	DrugMechanismActionType:    "DrugMechanismActionType",
	MecMechanismRefs:           "MecMechanismRefs",
}

// drugMechanismR is where relationships are stored.
type drugMechanismR struct {
	Variant                    *VariantSequence    `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
	TidTargetDictionary        *TargetDictionary   `boil:"TidTargetDictionary" json:"TidTargetDictionary" toml:"TidTargetDictionary" yaml:"TidTargetDictionary"`
	Site                       *BindingSite        `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	Record                     *CompoundRecord     `boil:"Record" json:"Record" toml:"Record" yaml:"Record"`
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	DrugMechanismActionType    *ActionType         `boil:"DrugMechanismActionType" json:"DrugMechanismActionType" toml:"DrugMechanismActionType" yaml:"DrugMechanismActionType"`
	MecMechanismRefs           MechanismRefSlice   `boil:"MecMechanismRefs" json:"MecMechanismRefs" toml:"MecMechanismRefs" yaml:"MecMechanismRefs"`
}

// NewStruct creates a new relationship struct
func (*drugMechanismR) NewStruct() *drugMechanismR {
	return &drugMechanismR{}
}

func (r *drugMechanismR) GetVariant() *VariantSequence {
	if r == nil {
		return nil
	}
	return r.Variant
}

func (r *drugMechanismR) GetTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.TidTargetDictionary
}

func (r *drugMechanismR) GetSite() *BindingSite {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *drugMechanismR) GetRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.Record
}

func (r *drugMechanismR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *drugMechanismR) GetDrugMechanismActionType() *ActionType {
	if r == nil {
		return nil
	}
	return r.DrugMechanismActionType
}

func (r *drugMechanismR) GetMecMechanismRefs() MechanismRefSlice {
	if r == nil {
		return nil
	}
	return r.MecMechanismRefs
}

// drugMechanismL is where Load methods for each relationship are stored.
type drugMechanismL struct{}

var (
	drugMechanismAllColumns            = []string{"mec_id", "record_id", "molregno", "mechanism_of_action", "tid", "site_id", "action_type", "direct_interaction", "molecular_mechanism", "disease_efficacy", "mechanism_comment", "selectivity_comment", "binding_site_comment", "variant_id"}
	drugMechanismColumnsWithoutDefault = []string{"mec_id", "record_id"}
	drugMechanismColumnsWithDefault    = []string{"molregno", "mechanism_of_action", "tid", "site_id", "action_type", "direct_interaction", "molecular_mechanism", "disease_efficacy", "mechanism_comment", "selectivity_comment", "binding_site_comment", "variant_id"}
	drugMechanismPrimaryKeyColumns     = []string{"mec_id"}
	drugMechanismGeneratedColumns      = []string{}
)

type (
	// DrugMechanismSlice is an alias for a slice of pointers to DrugMechanism.
	// This should almost always be used instead of []DrugMechanism.
	DrugMechanismSlice []*DrugMechanism
	// DrugMechanismHook is the signature for custom DrugMechanism hook methods
	DrugMechanismHook func(context.Context, boil.ContextExecutor, *DrugMechanism) error

	drugMechanismQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	drugMechanismType                 = reflect.TypeOf(&DrugMechanism{})
	drugMechanismMapping              = queries.MakeStructMapping(drugMechanismType)
	drugMechanismPrimaryKeyMapping, _ = queries.BindMapping(drugMechanismType, drugMechanismMapping, drugMechanismPrimaryKeyColumns)
	drugMechanismInsertCacheMut       sync.RWMutex
	drugMechanismInsertCache          = make(map[string]insertCache)
	drugMechanismUpdateCacheMut       sync.RWMutex
	drugMechanismUpdateCache          = make(map[string]updateCache)
	drugMechanismUpsertCacheMut       sync.RWMutex
	drugMechanismUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var drugMechanismAfterSelectHooks []DrugMechanismHook

var drugMechanismBeforeInsertHooks []DrugMechanismHook
var drugMechanismAfterInsertHooks []DrugMechanismHook

var drugMechanismBeforeUpdateHooks []DrugMechanismHook
var drugMechanismAfterUpdateHooks []DrugMechanismHook

var drugMechanismBeforeDeleteHooks []DrugMechanismHook
var drugMechanismAfterDeleteHooks []DrugMechanismHook

var drugMechanismBeforeUpsertHooks []DrugMechanismHook
var drugMechanismAfterUpsertHooks []DrugMechanismHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DrugMechanism) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DrugMechanism) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DrugMechanism) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DrugMechanism) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DrugMechanism) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DrugMechanism) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DrugMechanism) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DrugMechanism) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DrugMechanism) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugMechanismAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDrugMechanismHook registers your hook function for all future operations.
func AddDrugMechanismHook(hookPoint boil.HookPoint, drugMechanismHook DrugMechanismHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		drugMechanismAfterSelectHooks = append(drugMechanismAfterSelectHooks, drugMechanismHook)
	case boil.BeforeInsertHook:
		drugMechanismBeforeInsertHooks = append(drugMechanismBeforeInsertHooks, drugMechanismHook)
	case boil.AfterInsertHook:
		drugMechanismAfterInsertHooks = append(drugMechanismAfterInsertHooks, drugMechanismHook)
	case boil.BeforeUpdateHook:
		drugMechanismBeforeUpdateHooks = append(drugMechanismBeforeUpdateHooks, drugMechanismHook)
	case boil.AfterUpdateHook:
		drugMechanismAfterUpdateHooks = append(drugMechanismAfterUpdateHooks, drugMechanismHook)
	case boil.BeforeDeleteHook:
		drugMechanismBeforeDeleteHooks = append(drugMechanismBeforeDeleteHooks, drugMechanismHook)
	case boil.AfterDeleteHook:
		drugMechanismAfterDeleteHooks = append(drugMechanismAfterDeleteHooks, drugMechanismHook)
	case boil.BeforeUpsertHook:
		drugMechanismBeforeUpsertHooks = append(drugMechanismBeforeUpsertHooks, drugMechanismHook)
	case boil.AfterUpsertHook:
		drugMechanismAfterUpsertHooks = append(drugMechanismAfterUpsertHooks, drugMechanismHook)
	}
}

// One returns a single drugMechanism record from the query.
func (q drugMechanismQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DrugMechanism, error) {
	o := &DrugMechanism{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for drug_mechanism")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DrugMechanism records from the query.
func (q drugMechanismQuery) All(ctx context.Context, exec boil.ContextExecutor) (DrugMechanismSlice, error) {
	var o []*DrugMechanism

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DrugMechanism slice")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DrugMechanism records in the query.
func (q drugMechanismQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count drug_mechanism rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q drugMechanismQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if drug_mechanism exists")
	}

	return count > 0, nil
}

// Variant pointed to by the foreign key.
func (o *DrugMechanism) Variant(mods ...qm.QueryMod) variantSequenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"variant_id\" = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	return VariantSequences(queryMods...)
}

// TidTargetDictionary pointed to by the foreign key.
func (o *DrugMechanism) TidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.Tid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// Site pointed to by the foreign key.
func (o *DrugMechanism) Site(mods ...qm.QueryMod) bindingSiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return BindingSites(queryMods...)
}

// Record pointed to by the foreign key.
func (o *DrugMechanism) Record(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.RecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *DrugMechanism) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// DrugMechanismActionType pointed to by the foreign key.
func (o *DrugMechanism) DrugMechanismActionType(mods ...qm.QueryMod) actionTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"action_type\" = ?", o.ActionType),
	}

	queryMods = append(queryMods, mods...)

	return ActionTypes(queryMods...)
}

// MecMechanismRefs retrieves all the mechanism_ref's MechanismRefs with an executor via mec_id column.
func (o *DrugMechanism) MecMechanismRefs(mods ...qm.QueryMod) mechanismRefQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechanism_refs\".\"mec_id\"=?", o.MecID),
	)

	return MechanismRefs(queryMods...)
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		if !queries.IsNil(object.VariantID) {
			args = append(args, object.VariantID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VariantID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VariantID) {
				args = append(args, obj.VariantID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`variant_sequences`),
		qm.WhereIn(`variant_sequences.variant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariantSequence")
	}

	var resultSlice []*VariantSequence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariantSequence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for variant_sequences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant_sequences")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &variantSequenceR{}
		}
		foreign.R.VariantDrugMechanisms = append(foreign.R.VariantDrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VariantID, foreign.VariantID) {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &variantSequenceR{}
				}
				foreign.R.VariantDrugMechanisms = append(foreign.R.VariantDrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		if !queries.IsNil(object.Tid) {
			args = append(args, object.Tid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Tid) {
				args = append(args, obj.Tid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.TidDrugMechanisms = append(foreign.R.TidDrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Tid, foreign.Tid) {
				local.R.TidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.TidDrugMechanisms = append(foreign.R.TidDrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		if !queries.IsNil(object.SiteID) {
			args = append(args, object.SiteID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SiteID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SiteID) {
				args = append(args, obj.SiteID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`binding_sites`),
		qm.WhereIn(`binding_sites.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BindingSite")
	}

	var resultSlice []*BindingSite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BindingSite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for binding_sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for binding_sites")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &bindingSiteR{}
		}
		foreign.R.SiteDrugMechanisms = append(foreign.R.SiteDrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SiteID, foreign.SiteID) {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &bindingSiteR{}
				}
				foreign.R.SiteDrugMechanisms = append(foreign.R.SiteDrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		args = append(args, object.RecordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Record = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.RecordDrugMechanisms = append(foreign.R.RecordDrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecordID == foreign.RecordID {
				local.R.Record = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.RecordDrugMechanisms = append(foreign.R.RecordDrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		if !queries.IsNil(object.Molregno) {
			args = append(args, object.Molregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Molregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Molregno) {
				args = append(args, obj.Molregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoDrugMechanisms = append(foreign.R.MolregnoDrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Molregno, foreign.Molregno) {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoDrugMechanisms = append(foreign.R.MolregnoDrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadDrugMechanismActionType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugMechanismL) LoadDrugMechanismActionType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		if !queries.IsNil(object.ActionType) {
			args = append(args, object.ActionType)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ActionType) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ActionType) {
				args = append(args, obj.ActionType)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`action_type`),
		qm.WhereIn(`action_type.action_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActionType")
	}

	var resultSlice []*ActionType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActionType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for action_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_type")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DrugMechanismActionType = foreign
		if foreign.R == nil {
			foreign.R = &actionTypeR{}
		}
		foreign.R.DrugMechanisms = append(foreign.R.DrugMechanisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ActionType, foreign.ActionType) {
				local.R.DrugMechanismActionType = foreign
				if foreign.R == nil {
					foreign.R = &actionTypeR{}
				}
				foreign.R.DrugMechanisms = append(foreign.R.DrugMechanisms, local)
				break
			}
		}
	}

	return nil
}

// LoadMecMechanismRefs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (drugMechanismL) LoadMecMechanismRefs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugMechanism interface{}, mods queries.Applicator) error {
	var slice []*DrugMechanism
	var object *DrugMechanism

	if singular {
		object = maybeDrugMechanism.(*DrugMechanism)
	} else {
		slice = *maybeDrugMechanism.(*[]*DrugMechanism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugMechanismR{}
		}
		args = append(args, object.MecID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugMechanismR{}
			}

			for _, a := range args {
				if a == obj.MecID {
					continue Outer
				}
			}

			args = append(args, obj.MecID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechanism_refs`),
		qm.WhereIn(`mechanism_refs.mec_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechanism_refs")
	}

	var resultSlice []*MechanismRef
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechanism_refs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechanism_refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechanism_refs")
	}

	if len(mechanismRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MecMechanismRefs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechanismRefR{}
			}
			foreign.R.Mec = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MecID == foreign.MecID {
				local.R.MecMechanismRefs = append(local.R.MecMechanismRefs, foreign)
				if foreign.R == nil {
					foreign.R = &mechanismRefR{}
				}
				foreign.R.Mec = local
				break
			}
		}
	}

	return nil
}

// SetVariant of the drugMechanism to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantDrugMechanisms.
func (o *DrugMechanism) SetVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VariantSequence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"variant_id"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.VariantID, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VariantID, related.VariantID)
	if o.R == nil {
		o.R = &drugMechanismR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &variantSequenceR{
			VariantDrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.VariantDrugMechanisms = append(related.R.VariantDrugMechanisms, o)
	}

	return nil
}

// RemoveVariant relationship.
// Sets o.R.Variant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugMechanism) RemoveVariant(ctx context.Context, exec boil.ContextExecutor, related *VariantSequence) error {
	var err error

	queries.SetScanner(&o.VariantID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("variant_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Variant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VariantDrugMechanisms {
		if queries.Equal(o.VariantID, ri.VariantID) {
			continue
		}

		ln := len(related.R.VariantDrugMechanisms)
		if ln > 1 && i < ln-1 {
			related.R.VariantDrugMechanisms[i] = related.R.VariantDrugMechanisms[ln-1]
		}
		related.R.VariantDrugMechanisms = related.R.VariantDrugMechanisms[:ln-1]
		break
	}
	return nil
}

// SetTidTargetDictionary of the drugMechanism to the related item.
// Sets o.R.TidTargetDictionary to related.
// Adds o to related.R.TidDrugMechanisms.
func (o *DrugMechanism) SetTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Tid, related.Tid)
	if o.R == nil {
		o.R = &drugMechanismR{
			TidTargetDictionary: related,
		}
	} else {
		o.R.TidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			TidDrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.TidDrugMechanisms = append(related.R.TidDrugMechanisms, o)
	}

	return nil
}

// RemoveTidTargetDictionary relationship.
// Sets o.R.TidTargetDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugMechanism) RemoveTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, related *TargetDictionary) error {
	var err error

	queries.SetScanner(&o.Tid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TidTargetDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TidDrugMechanisms {
		if queries.Equal(o.Tid, ri.Tid) {
			continue
		}

		ln := len(related.R.TidDrugMechanisms)
		if ln > 1 && i < ln-1 {
			related.R.TidDrugMechanisms[i] = related.R.TidDrugMechanisms[ln-1]
		}
		related.R.TidDrugMechanisms = related.R.TidDrugMechanisms[:ln-1]
		break
	}
	return nil
}

// SetSite of the drugMechanism to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteDrugMechanisms.
func (o *DrugMechanism) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BindingSite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SiteID, related.SiteID)
	if o.R == nil {
		o.R = &drugMechanismR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &bindingSiteR{
			SiteDrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.SiteDrugMechanisms = append(related.R.SiteDrugMechanisms, o)
	}

	return nil
}

// RemoveSite relationship.
// Sets o.R.Site to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugMechanism) RemoveSite(ctx context.Context, exec boil.ContextExecutor, related *BindingSite) error {
	var err error

	queries.SetScanner(&o.SiteID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("site_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Site = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SiteDrugMechanisms {
		if queries.Equal(o.SiteID, ri.SiteID) {
			continue
		}

		ln := len(related.R.SiteDrugMechanisms)
		if ln > 1 && i < ln-1 {
			related.R.SiteDrugMechanisms[i] = related.R.SiteDrugMechanisms[ln-1]
		}
		related.R.SiteDrugMechanisms = related.R.SiteDrugMechanisms[:ln-1]
		break
	}
	return nil
}

// SetRecord of the drugMechanism to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.RecordDrugMechanisms.
func (o *DrugMechanism) SetRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecordID = related.RecordID
	if o.R == nil {
		o.R = &drugMechanismR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			RecordDrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.RecordDrugMechanisms = append(related.R.RecordDrugMechanisms, o)
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the drugMechanism to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoDrugMechanisms.
func (o *DrugMechanism) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Molregno, related.Molregno)
	if o.R == nil {
		o.R = &drugMechanismR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoDrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.MolregnoDrugMechanisms = append(related.R.MolregnoDrugMechanisms, o)
	}

	return nil
}

// RemoveMolregnoMoleculeDictionary relationship.
// Sets o.R.MolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugMechanism) RemoveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.Molregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MolregnoDrugMechanisms {
		if queries.Equal(o.Molregno, ri.Molregno) {
			continue
		}

		ln := len(related.R.MolregnoDrugMechanisms)
		if ln > 1 && i < ln-1 {
			related.R.MolregnoDrugMechanisms[i] = related.R.MolregnoDrugMechanisms[ln-1]
		}
		related.R.MolregnoDrugMechanisms = related.R.MolregnoDrugMechanisms[:ln-1]
		break
	}
	return nil
}

// SetDrugMechanismActionType of the drugMechanism to the related item.
// Sets o.R.DrugMechanismActionType to related.
// Adds o to related.R.DrugMechanisms.
func (o *DrugMechanism) SetDrugMechanismActionType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActionType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"action_type"}),
		strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
	)
	values := []interface{}{related.ActionType, o.MecID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ActionType, related.ActionType)
	if o.R == nil {
		o.R = &drugMechanismR{
			DrugMechanismActionType: related,
		}
	} else {
		o.R.DrugMechanismActionType = related
	}

	if related.R == nil {
		related.R = &actionTypeR{
			DrugMechanisms: DrugMechanismSlice{o},
		}
	} else {
		related.R.DrugMechanisms = append(related.R.DrugMechanisms, o)
	}

	return nil
}

// RemoveDrugMechanismActionType relationship.
// Sets o.R.DrugMechanismActionType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugMechanism) RemoveDrugMechanismActionType(ctx context.Context, exec boil.ContextExecutor, related *ActionType) error {
	var err error

	queries.SetScanner(&o.ActionType, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("action_type")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DrugMechanismActionType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DrugMechanisms {
		if queries.Equal(o.ActionType, ri.ActionType) {
			continue
		}

		ln := len(related.R.DrugMechanisms)
		if ln > 1 && i < ln-1 {
			related.R.DrugMechanisms[i] = related.R.DrugMechanisms[ln-1]
		}
		related.R.DrugMechanisms = related.R.DrugMechanisms[:ln-1]
		break
	}
	return nil
}

// AddMecMechanismRefs adds the given related objects to the existing relationships
// of the drug_mechanism, optionally inserting them as new records.
// Appends related to o.R.MecMechanismRefs.
// Sets related.R.Mec appropriately.
func (o *DrugMechanism) AddMecMechanismRefs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MechanismRef) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MecID = o.MecID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechanism_refs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"mec_id"}),
				strmangle.WhereClause("\"", "\"", 0, mechanismRefPrimaryKeyColumns),
			)
			values := []interface{}{o.MecID, rel.MecrefID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MecID = o.MecID
		}
	}

	if o.R == nil {
		o.R = &drugMechanismR{
			MecMechanismRefs: related,
		}
	} else {
		o.R.MecMechanismRefs = append(o.R.MecMechanismRefs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechanismRefR{
				Mec: o,
			}
		} else {
			rel.R.Mec = o
		}
	}
	return nil
}

// DrugMechanisms retrieves all the records using an executor.
func DrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	mods = append(mods, qm.From("\"drug_mechanism\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"drug_mechanism\".*"})
	}

	return drugMechanismQuery{q}
}

// FindDrugMechanism retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDrugMechanism(ctx context.Context, exec boil.ContextExecutor, mecID int64, selectCols ...string) (*DrugMechanism, error) {
	drugMechanismObj := &DrugMechanism{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"drug_mechanism\" where \"mec_id\"=?", sel,
	)

	q := queries.Raw(query, mecID)

	err := q.Bind(ctx, exec, drugMechanismObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from drug_mechanism")
	}

	if err = drugMechanismObj.doAfterSelectHooks(ctx, exec); err != nil {
		return drugMechanismObj, err
	}

	return drugMechanismObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DrugMechanism) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_mechanism provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugMechanismColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	drugMechanismInsertCacheMut.RLock()
	cache, cached := drugMechanismInsertCache[key]
	drugMechanismInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			drugMechanismAllColumns,
			drugMechanismColumnsWithDefault,
			drugMechanismColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(drugMechanismType, drugMechanismMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(drugMechanismType, drugMechanismMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"drug_mechanism\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"drug_mechanism\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into drug_mechanism")
	}

	if !cached {
		drugMechanismInsertCacheMut.Lock()
		drugMechanismInsertCache[key] = cache
		drugMechanismInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DrugMechanism.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DrugMechanism) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	drugMechanismUpdateCacheMut.RLock()
	cache, cached := drugMechanismUpdateCache[key]
	drugMechanismUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			drugMechanismAllColumns,
			drugMechanismPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update drug_mechanism, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"drug_mechanism\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(drugMechanismType, drugMechanismMapping, append(wl, drugMechanismPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update drug_mechanism row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for drug_mechanism")
	}

	if !cached {
		drugMechanismUpdateCacheMut.Lock()
		drugMechanismUpdateCache[key] = cache
		drugMechanismUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q drugMechanismQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for drug_mechanism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for drug_mechanism")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DrugMechanismSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugMechanismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"drug_mechanism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugMechanismPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in drugMechanism slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all drugMechanism")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DrugMechanism) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_mechanism provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugMechanismColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	drugMechanismUpsertCacheMut.RLock()
	cache, cached := drugMechanismUpsertCache[key]
	drugMechanismUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			drugMechanismAllColumns,
			drugMechanismColumnsWithDefault,
			drugMechanismColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			drugMechanismAllColumns,
			drugMechanismPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert drug_mechanism, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(drugMechanismPrimaryKeyColumns))
			copy(conflict, drugMechanismPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"drug_mechanism\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(drugMechanismType, drugMechanismMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(drugMechanismType, drugMechanismMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert drug_mechanism")
	}

	if !cached {
		drugMechanismUpsertCacheMut.Lock()
		drugMechanismUpsertCache[key] = cache
		drugMechanismUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DrugMechanism record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DrugMechanism) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DrugMechanism provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), drugMechanismPrimaryKeyMapping)
	sql := "DELETE FROM \"drug_mechanism\" WHERE \"mec_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from drug_mechanism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for drug_mechanism")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q drugMechanismQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no drugMechanismQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drug_mechanism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_mechanism")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DrugMechanismSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(drugMechanismBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugMechanismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"drug_mechanism\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugMechanismPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drugMechanism slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_mechanism")
	}

	if len(drugMechanismAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DrugMechanism) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDrugMechanism(ctx, exec, o.MecID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DrugMechanismSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DrugMechanismSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugMechanismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"drug_mechanism\".* FROM \"drug_mechanism\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugMechanismPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DrugMechanismSlice")
	}

	*o = slice

	return nil
}

// DrugMechanismExists checks if the DrugMechanism row exists.
func DrugMechanismExists(ctx context.Context, exec boil.ContextExecutor, mecID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"drug_mechanism\" where \"mec_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mecID)
	}
	row := exec.QueryRowContext(ctx, sql, mecID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if drug_mechanism exists")
	}

	return exists, nil
}
