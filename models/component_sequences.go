// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ComponentSequence is an object representing the database table.
type ComponentSequence struct {
	ComponentID    int64       `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	ComponentType  null.String `boil:"component_type" json:"component_type,omitempty" toml:"component_type" yaml:"component_type,omitempty"`
	Accession      null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Sequence       null.String `boil:"sequence" json:"sequence,omitempty" toml:"sequence" yaml:"sequence,omitempty"`
	SequenceMd5sum null.String `boil:"sequence_md5sum" json:"sequence_md5sum,omitempty" toml:"sequence_md5sum" yaml:"sequence_md5sum,omitempty"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	TaxID          null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	Organism       null.String `boil:"organism" json:"organism,omitempty" toml:"organism" yaml:"organism,omitempty"`
	DBSource       null.String `boil:"db_source" json:"db_source,omitempty" toml:"db_source" yaml:"db_source,omitempty"`
	DBVersion      null.String `boil:"db_version" json:"db_version,omitempty" toml:"db_version" yaml:"db_version,omitempty"`

	R *componentSequenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentSequenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentSequenceColumns = struct {
	ComponentID    string
	ComponentType  string
	Accession      string
	Sequence       string
	SequenceMd5sum string
	Description    string
	TaxID          string
	Organism       string
	DBSource       string
	DBVersion      string
}{
	ComponentID:    "component_id",
	ComponentType:  "component_type",
	Accession:      "accession",
	Sequence:       "sequence",
	SequenceMd5sum: "sequence_md5sum",
	Description:    "description",
	TaxID:          "tax_id",
	Organism:       "organism",
	DBSource:       "db_source",
	DBVersion:      "db_version",
}

var ComponentSequenceTableColumns = struct {
	ComponentID    string
	ComponentType  string
	Accession      string
	Sequence       string
	SequenceMd5sum string
	Description    string
	TaxID          string
	Organism       string
	DBSource       string
	DBVersion      string
}{
	ComponentID:    "component_sequences.component_id",
	ComponentType:  "component_sequences.component_type",
	Accession:      "component_sequences.accession",
	Sequence:       "component_sequences.sequence",
	SequenceMd5sum: "component_sequences.sequence_md5sum",
	Description:    "component_sequences.description",
	TaxID:          "component_sequences.tax_id",
	Organism:       "component_sequences.organism",
	DBSource:       "component_sequences.db_source",
	DBVersion:      "component_sequences.db_version",
}

// Generated where

var ComponentSequenceWhere = struct {
	ComponentID    whereHelperint64
	ComponentType  whereHelpernull_String
	Accession      whereHelpernull_String
	Sequence       whereHelpernull_String
	SequenceMd5sum whereHelpernull_String
	Description    whereHelpernull_String
	TaxID          whereHelpernull_Int64
	Organism       whereHelpernull_String
	DBSource       whereHelpernull_String
	DBVersion      whereHelpernull_String
}{
	ComponentID:    whereHelperint64{field: "\"component_sequences\".\"component_id\""},
	ComponentType:  whereHelpernull_String{field: "\"component_sequences\".\"component_type\""},
	Accession:      whereHelpernull_String{field: "\"component_sequences\".\"accession\""},
	Sequence:       whereHelpernull_String{field: "\"component_sequences\".\"sequence\""},
	SequenceMd5sum: whereHelpernull_String{field: "\"component_sequences\".\"sequence_md5sum\""},
	Description:    whereHelpernull_String{field: "\"component_sequences\".\"description\""},
	TaxID:          whereHelpernull_Int64{field: "\"component_sequences\".\"tax_id\""},
	Organism:       whereHelpernull_String{field: "\"component_sequences\".\"organism\""},
	DBSource:       whereHelpernull_String{field: "\"component_sequences\".\"db_source\""},
	DBVersion:      whereHelpernull_String{field: "\"component_sequences\".\"db_version\""},
}

// ComponentSequenceRels is where relationship names are stored.
var ComponentSequenceRels = struct {
	ComponentComponentClasses  string
	ComponentComponentDomains  string
	ComponentComponentGos      string
	ComponentComponentSynonyms string
	ComponentSiteComponents    string
	ComponentTargetComponents  string
}{
	ComponentComponentClasses:  "ComponentComponentClasses",
	ComponentComponentDomains:  "ComponentComponentDomains",
	ComponentComponentGos:      "ComponentComponentGos",
	ComponentComponentSynonyms: "ComponentComponentSynonyms",
	ComponentSiteComponents:    "ComponentSiteComponents",
	ComponentTargetComponents:  "ComponentTargetComponents",
}

// componentSequenceR is where relationships are stored.
type componentSequenceR struct {
	ComponentComponentClasses  ComponentClassSlice   `boil:"ComponentComponentClasses" json:"ComponentComponentClasses" toml:"ComponentComponentClasses" yaml:"ComponentComponentClasses"`
	ComponentComponentDomains  ComponentDomainSlice  `boil:"ComponentComponentDomains" json:"ComponentComponentDomains" toml:"ComponentComponentDomains" yaml:"ComponentComponentDomains"`
	ComponentComponentGos      ComponentGoSlice      `boil:"ComponentComponentGos" json:"ComponentComponentGos" toml:"ComponentComponentGos" yaml:"ComponentComponentGos"`
	ComponentComponentSynonyms ComponentSynonymSlice `boil:"ComponentComponentSynonyms" json:"ComponentComponentSynonyms" toml:"ComponentComponentSynonyms" yaml:"ComponentComponentSynonyms"`
	ComponentSiteComponents    SiteComponentSlice    `boil:"ComponentSiteComponents" json:"ComponentSiteComponents" toml:"ComponentSiteComponents" yaml:"ComponentSiteComponents"`
	ComponentTargetComponents  TargetComponentSlice  `boil:"ComponentTargetComponents" json:"ComponentTargetComponents" toml:"ComponentTargetComponents" yaml:"ComponentTargetComponents"`
}

// NewStruct creates a new relationship struct
func (*componentSequenceR) NewStruct() *componentSequenceR {
	return &componentSequenceR{}
}

func (r *componentSequenceR) GetComponentComponentClasses() ComponentClassSlice {
	if r == nil {
		return nil
	}
	return r.ComponentComponentClasses
}

func (r *componentSequenceR) GetComponentComponentDomains() ComponentDomainSlice {
	if r == nil {
		return nil
	}
	return r.ComponentComponentDomains
}

func (r *componentSequenceR) GetComponentComponentGos() ComponentGoSlice {
	if r == nil {
		return nil
	}
	return r.ComponentComponentGos
}

func (r *componentSequenceR) GetComponentComponentSynonyms() ComponentSynonymSlice {
	if r == nil {
		return nil
	}
	return r.ComponentComponentSynonyms
}

func (r *componentSequenceR) GetComponentSiteComponents() SiteComponentSlice {
	if r == nil {
		return nil
	}
	return r.ComponentSiteComponents
}

func (r *componentSequenceR) GetComponentTargetComponents() TargetComponentSlice {
	if r == nil {
		return nil
	}
	return r.ComponentTargetComponents
}

// componentSequenceL is where Load methods for each relationship are stored.
type componentSequenceL struct{}

var (
	componentSequenceAllColumns            = []string{"component_id", "component_type", "accession", "sequence", "sequence_md5sum", "description", "tax_id", "organism", "db_source", "db_version"}
	componentSequenceColumnsWithoutDefault = []string{"component_id"}
	componentSequenceColumnsWithDefault    = []string{"component_type", "accession", "sequence", "sequence_md5sum", "description", "tax_id", "organism", "db_source", "db_version"}
	componentSequencePrimaryKeyColumns     = []string{"component_id"}
	componentSequenceGeneratedColumns      = []string{}
)

type (
	// ComponentSequenceSlice is an alias for a slice of pointers to ComponentSequence.
	// This should almost always be used instead of []ComponentSequence.
	ComponentSequenceSlice []*ComponentSequence
	// ComponentSequenceHook is the signature for custom ComponentSequence hook methods
	ComponentSequenceHook func(context.Context, boil.ContextExecutor, *ComponentSequence) error

	componentSequenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentSequenceType                 = reflect.TypeOf(&ComponentSequence{})
	componentSequenceMapping              = queries.MakeStructMapping(componentSequenceType)
	componentSequencePrimaryKeyMapping, _ = queries.BindMapping(componentSequenceType, componentSequenceMapping, componentSequencePrimaryKeyColumns)
	componentSequenceInsertCacheMut       sync.RWMutex
	componentSequenceInsertCache          = make(map[string]insertCache)
	componentSequenceUpdateCacheMut       sync.RWMutex
	componentSequenceUpdateCache          = make(map[string]updateCache)
	componentSequenceUpsertCacheMut       sync.RWMutex
	componentSequenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentSequenceAfterSelectHooks []ComponentSequenceHook

var componentSequenceBeforeInsertHooks []ComponentSequenceHook
var componentSequenceAfterInsertHooks []ComponentSequenceHook

var componentSequenceBeforeUpdateHooks []ComponentSequenceHook
var componentSequenceAfterUpdateHooks []ComponentSequenceHook

var componentSequenceBeforeDeleteHooks []ComponentSequenceHook
var componentSequenceAfterDeleteHooks []ComponentSequenceHook

var componentSequenceBeforeUpsertHooks []ComponentSequenceHook
var componentSequenceAfterUpsertHooks []ComponentSequenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentSequence) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentSequence) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentSequence) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentSequence) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentSequence) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentSequence) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentSequence) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentSequence) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentSequence) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentSequenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentSequenceHook registers your hook function for all future operations.
func AddComponentSequenceHook(hookPoint boil.HookPoint, componentSequenceHook ComponentSequenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentSequenceAfterSelectHooks = append(componentSequenceAfterSelectHooks, componentSequenceHook)
	case boil.BeforeInsertHook:
		componentSequenceBeforeInsertHooks = append(componentSequenceBeforeInsertHooks, componentSequenceHook)
	case boil.AfterInsertHook:
		componentSequenceAfterInsertHooks = append(componentSequenceAfterInsertHooks, componentSequenceHook)
	case boil.BeforeUpdateHook:
		componentSequenceBeforeUpdateHooks = append(componentSequenceBeforeUpdateHooks, componentSequenceHook)
	case boil.AfterUpdateHook:
		componentSequenceAfterUpdateHooks = append(componentSequenceAfterUpdateHooks, componentSequenceHook)
	case boil.BeforeDeleteHook:
		componentSequenceBeforeDeleteHooks = append(componentSequenceBeforeDeleteHooks, componentSequenceHook)
	case boil.AfterDeleteHook:
		componentSequenceAfterDeleteHooks = append(componentSequenceAfterDeleteHooks, componentSequenceHook)
	case boil.BeforeUpsertHook:
		componentSequenceBeforeUpsertHooks = append(componentSequenceBeforeUpsertHooks, componentSequenceHook)
	case boil.AfterUpsertHook:
		componentSequenceAfterUpsertHooks = append(componentSequenceAfterUpsertHooks, componentSequenceHook)
	}
}

// One returns a single componentSequence record from the query.
func (q componentSequenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentSequence, error) {
	o := &ComponentSequence{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_sequences")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentSequence records from the query.
func (q componentSequenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentSequenceSlice, error) {
	var o []*ComponentSequence

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentSequence slice")
	}

	if len(componentSequenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentSequence records in the query.
func (q componentSequenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_sequences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentSequenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_sequences exists")
	}

	return count > 0, nil
}

// ComponentComponentClasses retrieves all the component_class's ComponentClasses with an executor via component_id column.
func (o *ComponentSequence) ComponentComponentClasses(mods ...qm.QueryMod) componentClassQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_class\".\"component_id\"=?", o.ComponentID),
	)

	return ComponentClasses(queryMods...)
}

// ComponentComponentDomains retrieves all the component_domain's ComponentDomains with an executor via component_id column.
func (o *ComponentSequence) ComponentComponentDomains(mods ...qm.QueryMod) componentDomainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_domains\".\"component_id\"=?", o.ComponentID),
	)

	return ComponentDomains(queryMods...)
}

// ComponentComponentGos retrieves all the component_go's ComponentGos with an executor via component_id column.
func (o *ComponentSequence) ComponentComponentGos(mods ...qm.QueryMod) componentGoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_go\".\"component_id\"=?", o.ComponentID),
	)

	return ComponentGos(queryMods...)
}

// ComponentComponentSynonyms retrieves all the component_synonym's ComponentSynonyms with an executor via component_id column.
func (o *ComponentSequence) ComponentComponentSynonyms(mods ...qm.QueryMod) componentSynonymQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_synonyms\".\"component_id\"=?", o.ComponentID),
	)

	return ComponentSynonyms(queryMods...)
}

// ComponentSiteComponents retrieves all the site_component's SiteComponents with an executor via component_id column.
func (o *ComponentSequence) ComponentSiteComponents(mods ...qm.QueryMod) siteComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"site_components\".\"component_id\"=?", o.ComponentID),
	)

	return SiteComponents(queryMods...)
}

// ComponentTargetComponents retrieves all the target_component's TargetComponents with an executor via component_id column.
func (o *ComponentSequence) ComponentTargetComponents(mods ...qm.QueryMod) targetComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"target_components\".\"component_id\"=?", o.ComponentID),
	)

	return TargetComponents(queryMods...)
}

// LoadComponentComponentClasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentComponentClasses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_class`),
		qm.WhereIn(`component_class.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_class")
	}

	var resultSlice []*ComponentClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_class")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_class")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_class")
	}

	if len(componentClassAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentComponentClasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentClassR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentComponentClasses = append(local.R.ComponentComponentClasses, foreign)
				if foreign.R == nil {
					foreign.R = &componentClassR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// LoadComponentComponentDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentComponentDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_domains`),
		qm.WhereIn(`component_domains.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_domains")
	}

	var resultSlice []*ComponentDomain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_domains")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_domains")
	}

	if len(componentDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentComponentDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentDomainR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentComponentDomains = append(local.R.ComponentComponentDomains, foreign)
				if foreign.R == nil {
					foreign.R = &componentDomainR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// LoadComponentComponentGos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentComponentGos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_go`),
		qm.WhereIn(`component_go.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_go")
	}

	var resultSlice []*ComponentGo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_go")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_go")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_go")
	}

	if len(componentGoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentComponentGos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentGoR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentComponentGos = append(local.R.ComponentComponentGos, foreign)
				if foreign.R == nil {
					foreign.R = &componentGoR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// LoadComponentComponentSynonyms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentComponentSynonyms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_synonyms`),
		qm.WhereIn(`component_synonyms.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_synonyms")
	}

	var resultSlice []*ComponentSynonym
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_synonyms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_synonyms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_synonyms")
	}

	if len(componentSynonymAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentComponentSynonyms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentSynonymR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentComponentSynonyms = append(local.R.ComponentComponentSynonyms, foreign)
				if foreign.R == nil {
					foreign.R = &componentSynonymR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// LoadComponentSiteComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentSiteComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ComponentID) {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`site_components`),
		qm.WhereIn(`site_components.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_components")
	}

	var resultSlice []*SiteComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice site_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_components")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentSiteComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteComponentR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ComponentID, foreign.ComponentID) {
				local.R.ComponentSiteComponents = append(local.R.ComponentSiteComponents, foreign)
				if foreign.R == nil {
					foreign.R = &siteComponentR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// LoadComponentTargetComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (componentSequenceL) LoadComponentTargetComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*ComponentSequence
	var object *ComponentSequence

	if singular {
		object = maybeComponentSequence.(*ComponentSequence)
	} else {
		slice = *maybeComponentSequence.(*[]*ComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_components`),
		qm.WhereIn(`target_components.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load target_components")
	}

	var resultSlice []*TargetComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice target_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on target_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_components")
	}

	if len(targetComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentTargetComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetComponentR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentTargetComponents = append(local.R.ComponentTargetComponents, foreign)
				if foreign.R == nil {
					foreign.R = &targetComponentR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// AddComponentComponentClasses adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentComponentClasses.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentComponentClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentClass) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_class\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentClassPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.CompClassID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentComponentClasses: related,
		}
	} else {
		o.R.ComponentComponentClasses = append(o.R.ComponentComponentClasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentClassR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// AddComponentComponentDomains adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentComponentDomains.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentComponentDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentDomain) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_domains\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentDomainPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.CompdID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentComponentDomains: related,
		}
	} else {
		o.R.ComponentComponentDomains = append(o.R.ComponentComponentDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentDomainR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// AddComponentComponentGos adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentComponentGos.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentComponentGos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentGo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_go\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentGoPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.CompGoID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentComponentGos: related,
		}
	} else {
		o.R.ComponentComponentGos = append(o.R.ComponentComponentGos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentGoR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// AddComponentComponentSynonyms adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentComponentSynonyms.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentComponentSynonyms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentSynonym) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_synonyms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentSynonymPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.CompsynID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentComponentSynonyms: related,
		}
	} else {
		o.R.ComponentComponentSynonyms = append(o.R.ComponentComponentSynonyms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentSynonymR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// AddComponentSiteComponents adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentSiteComponents.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentSiteComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ComponentID, o.ComponentID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"site_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.SitecompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ComponentID, o.ComponentID)
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentSiteComponents: related,
		}
	} else {
		o.R.ComponentSiteComponents = append(o.R.ComponentSiteComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteComponentR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// SetComponentSiteComponents removes all previously related items of the
// component_sequence replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Component's ComponentSiteComponents accordingly.
// Replaces o.R.ComponentSiteComponents with related.
// Sets related.R.Component's ComponentSiteComponents accordingly.
func (o *ComponentSequence) SetComponentSiteComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteComponent) error {
	query := "update \"site_components\" set \"component_id\" = null where \"component_id\" = ?"
	values := []interface{}{o.ComponentID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ComponentSiteComponents {
			queries.SetScanner(&rel.ComponentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Component = nil
		}
		o.R.ComponentSiteComponents = nil
	}

	return o.AddComponentSiteComponents(ctx, exec, insert, related...)
}

// RemoveComponentSiteComponents relationships from objects passed in.
// Removes related items from R.ComponentSiteComponents (uses pointer comparison, removal does not keep order)
// Sets related.R.Component.
func (o *ComponentSequence) RemoveComponentSiteComponents(ctx context.Context, exec boil.ContextExecutor, related ...*SiteComponent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ComponentID, nil)
		if rel.R != nil {
			rel.R.Component = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("component_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ComponentSiteComponents {
			if rel != ri {
				continue
			}

			ln := len(o.R.ComponentSiteComponents)
			if ln > 1 && i < ln-1 {
				o.R.ComponentSiteComponents[i] = o.R.ComponentSiteComponents[ln-1]
			}
			o.R.ComponentSiteComponents = o.R.ComponentSiteComponents[:ln-1]
			break
		}
	}

	return nil
}

// AddComponentTargetComponents adds the given related objects to the existing relationships
// of the component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentTargetComponents.
// Sets related.R.Component appropriately.
func (o *ComponentSequence) AddComponentTargetComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"target_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, targetComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.TargcompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &componentSequenceR{
			ComponentTargetComponents: related,
		}
	} else {
		o.R.ComponentTargetComponents = append(o.R.ComponentTargetComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetComponentR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// ComponentSequences retrieves all the records using an executor.
func ComponentSequences(mods ...qm.QueryMod) componentSequenceQuery {
	mods = append(mods, qm.From("\"component_sequences\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_sequences\".*"})
	}

	return componentSequenceQuery{q}
}

// FindComponentSequence retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentSequence(ctx context.Context, exec boil.ContextExecutor, componentID int64, selectCols ...string) (*ComponentSequence, error) {
	componentSequenceObj := &ComponentSequence{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_sequences\" where \"component_id\"=?", sel,
	)

	q := queries.Raw(query, componentID)

	err := q.Bind(ctx, exec, componentSequenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_sequences")
	}

	if err = componentSequenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentSequenceObj, err
	}

	return componentSequenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentSequence) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_sequences provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentSequenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentSequenceInsertCacheMut.RLock()
	cache, cached := componentSequenceInsertCache[key]
	componentSequenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentSequenceAllColumns,
			componentSequenceColumnsWithDefault,
			componentSequenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentSequenceType, componentSequenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentSequenceType, componentSequenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_sequences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_sequences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_sequences")
	}

	if !cached {
		componentSequenceInsertCacheMut.Lock()
		componentSequenceInsertCache[key] = cache
		componentSequenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentSequence.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentSequence) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentSequenceUpdateCacheMut.RLock()
	cache, cached := componentSequenceUpdateCache[key]
	componentSequenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentSequenceAllColumns,
			componentSequencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_sequences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_sequences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, componentSequencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentSequenceType, componentSequenceMapping, append(wl, componentSequencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_sequences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_sequences")
	}

	if !cached {
		componentSequenceUpdateCacheMut.Lock()
		componentSequenceUpdateCache[key] = cache
		componentSequenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentSequenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_sequences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentSequenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_sequences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentSequencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentSequence")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentSequence) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_sequences provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentSequenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentSequenceUpsertCacheMut.RLock()
	cache, cached := componentSequenceUpsertCache[key]
	componentSequenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentSequenceAllColumns,
			componentSequenceColumnsWithDefault,
			componentSequenceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			componentSequenceAllColumns,
			componentSequencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_sequences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentSequencePrimaryKeyColumns))
			copy(conflict, componentSequencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"component_sequences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentSequenceType, componentSequenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentSequenceType, componentSequenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_sequences")
	}

	if !cached {
		componentSequenceUpsertCacheMut.Lock()
		componentSequenceUpsertCache[key] = cache
		componentSequenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ComponentSequence record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentSequence) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentSequence provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentSequencePrimaryKeyMapping)
	sql := "DELETE FROM \"component_sequences\" WHERE \"component_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_sequences")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentSequenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentSequenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_sequences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentSequenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentSequenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentSequencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_sequences")
	}

	if len(componentSequenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentSequence) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentSequence(ctx, exec, o.ComponentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentSequenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentSequenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_sequences\".* FROM \"component_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentSequencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentSequenceSlice")
	}

	*o = slice

	return nil
}

// ComponentSequenceExists checks if the ComponentSequence row exists.
func ComponentSequenceExists(ctx context.Context, exec boil.ContextExecutor, componentID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_sequences\" where \"component_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, componentID)
	}
	row := exec.QueryRowContext(ctx, sql, componentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_sequences exists")
	}

	return exists, nil
}
