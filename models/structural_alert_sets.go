// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StructuralAlertSet is an object representing the database table.
type StructuralAlertSet struct {
	AlertSetID int64  `boil:"alert_set_id" json:"alert_set_id" toml:"alert_set_id" yaml:"alert_set_id"`
	SetName    string `boil:"set_name" json:"set_name" toml:"set_name" yaml:"set_name"`
	Priority   int16  `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`

	R *structuralAlertSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L structuralAlertSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StructuralAlertSetColumns = struct {
	AlertSetID string
	SetName    string
	Priority   string
}{
	AlertSetID: "alert_set_id",
	SetName:    "set_name",
	Priority:   "priority",
}

var StructuralAlertSetTableColumns = struct {
	AlertSetID string
	SetName    string
	Priority   string
}{
	AlertSetID: "structural_alert_sets.alert_set_id",
	SetName:    "structural_alert_sets.set_name",
	Priority:   "structural_alert_sets.priority",
}

// Generated where

var StructuralAlertSetWhere = struct {
	AlertSetID whereHelperint64
	SetName    whereHelperstring
	Priority   whereHelperint16
}{
	AlertSetID: whereHelperint64{field: "\"structural_alert_sets\".\"alert_set_id\""},
	SetName:    whereHelperstring{field: "\"structural_alert_sets\".\"set_name\""},
	Priority:   whereHelperint16{field: "\"structural_alert_sets\".\"priority\""},
}

// StructuralAlertSetRels is where relationship names are stored.
var StructuralAlertSetRels = struct {
	AlertSetStructuralAlerts string
}{
	AlertSetStructuralAlerts: "AlertSetStructuralAlerts",
}

// structuralAlertSetR is where relationships are stored.
type structuralAlertSetR struct {
	AlertSetStructuralAlerts StructuralAlertSlice `boil:"AlertSetStructuralAlerts" json:"AlertSetStructuralAlerts" toml:"AlertSetStructuralAlerts" yaml:"AlertSetStructuralAlerts"`
}

// NewStruct creates a new relationship struct
func (*structuralAlertSetR) NewStruct() *structuralAlertSetR {
	return &structuralAlertSetR{}
}

func (r *structuralAlertSetR) GetAlertSetStructuralAlerts() StructuralAlertSlice {
	if r == nil {
		return nil
	}
	return r.AlertSetStructuralAlerts
}

// structuralAlertSetL is where Load methods for each relationship are stored.
type structuralAlertSetL struct{}

var (
	structuralAlertSetAllColumns            = []string{"alert_set_id", "set_name", "priority"}
	structuralAlertSetColumnsWithoutDefault = []string{"alert_set_id", "set_name", "priority"}
	structuralAlertSetColumnsWithDefault    = []string{}
	structuralAlertSetPrimaryKeyColumns     = []string{"alert_set_id"}
	structuralAlertSetGeneratedColumns      = []string{}
)

type (
	// StructuralAlertSetSlice is an alias for a slice of pointers to StructuralAlertSet.
	// This should almost always be used instead of []StructuralAlertSet.
	StructuralAlertSetSlice []*StructuralAlertSet
	// StructuralAlertSetHook is the signature for custom StructuralAlertSet hook methods
	StructuralAlertSetHook func(context.Context, boil.ContextExecutor, *StructuralAlertSet) error

	structuralAlertSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	structuralAlertSetType                 = reflect.TypeOf(&StructuralAlertSet{})
	structuralAlertSetMapping              = queries.MakeStructMapping(structuralAlertSetType)
	structuralAlertSetPrimaryKeyMapping, _ = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, structuralAlertSetPrimaryKeyColumns)
	structuralAlertSetInsertCacheMut       sync.RWMutex
	structuralAlertSetInsertCache          = make(map[string]insertCache)
	structuralAlertSetUpdateCacheMut       sync.RWMutex
	structuralAlertSetUpdateCache          = make(map[string]updateCache)
	structuralAlertSetUpsertCacheMut       sync.RWMutex
	structuralAlertSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var structuralAlertSetAfterSelectHooks []StructuralAlertSetHook

var structuralAlertSetBeforeInsertHooks []StructuralAlertSetHook
var structuralAlertSetAfterInsertHooks []StructuralAlertSetHook

var structuralAlertSetBeforeUpdateHooks []StructuralAlertSetHook
var structuralAlertSetAfterUpdateHooks []StructuralAlertSetHook

var structuralAlertSetBeforeDeleteHooks []StructuralAlertSetHook
var structuralAlertSetAfterDeleteHooks []StructuralAlertSetHook

var structuralAlertSetBeforeUpsertHooks []StructuralAlertSetHook
var structuralAlertSetAfterUpsertHooks []StructuralAlertSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StructuralAlertSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StructuralAlertSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StructuralAlertSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StructuralAlertSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StructuralAlertSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StructuralAlertSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StructuralAlertSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StructuralAlertSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StructuralAlertSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStructuralAlertSetHook registers your hook function for all future operations.
func AddStructuralAlertSetHook(hookPoint boil.HookPoint, structuralAlertSetHook StructuralAlertSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		structuralAlertSetAfterSelectHooks = append(structuralAlertSetAfterSelectHooks, structuralAlertSetHook)
	case boil.BeforeInsertHook:
		structuralAlertSetBeforeInsertHooks = append(structuralAlertSetBeforeInsertHooks, structuralAlertSetHook)
	case boil.AfterInsertHook:
		structuralAlertSetAfterInsertHooks = append(structuralAlertSetAfterInsertHooks, structuralAlertSetHook)
	case boil.BeforeUpdateHook:
		structuralAlertSetBeforeUpdateHooks = append(structuralAlertSetBeforeUpdateHooks, structuralAlertSetHook)
	case boil.AfterUpdateHook:
		structuralAlertSetAfterUpdateHooks = append(structuralAlertSetAfterUpdateHooks, structuralAlertSetHook)
	case boil.BeforeDeleteHook:
		structuralAlertSetBeforeDeleteHooks = append(structuralAlertSetBeforeDeleteHooks, structuralAlertSetHook)
	case boil.AfterDeleteHook:
		structuralAlertSetAfterDeleteHooks = append(structuralAlertSetAfterDeleteHooks, structuralAlertSetHook)
	case boil.BeforeUpsertHook:
		structuralAlertSetBeforeUpsertHooks = append(structuralAlertSetBeforeUpsertHooks, structuralAlertSetHook)
	case boil.AfterUpsertHook:
		structuralAlertSetAfterUpsertHooks = append(structuralAlertSetAfterUpsertHooks, structuralAlertSetHook)
	}
}

// One returns a single structuralAlertSet record from the query.
func (q structuralAlertSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StructuralAlertSet, error) {
	o := &StructuralAlertSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for structural_alert_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StructuralAlertSet records from the query.
func (q structuralAlertSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (StructuralAlertSetSlice, error) {
	var o []*StructuralAlertSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StructuralAlertSet slice")
	}

	if len(structuralAlertSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StructuralAlertSet records in the query.
func (q structuralAlertSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count structural_alert_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q structuralAlertSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if structural_alert_sets exists")
	}

	return count > 0, nil
}

// AlertSetStructuralAlerts retrieves all the structural_alert's StructuralAlerts with an executor via alert_set_id column.
func (o *StructuralAlertSet) AlertSetStructuralAlerts(mods ...qm.QueryMod) structuralAlertQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"structural_alerts\".\"alert_set_id\"=?", o.AlertSetID),
	)

	return StructuralAlerts(queryMods...)
}

// LoadAlertSetStructuralAlerts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (structuralAlertSetL) LoadAlertSetStructuralAlerts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStructuralAlertSet interface{}, mods queries.Applicator) error {
	var slice []*StructuralAlertSet
	var object *StructuralAlertSet

	if singular {
		object = maybeStructuralAlertSet.(*StructuralAlertSet)
	} else {
		slice = *maybeStructuralAlertSet.(*[]*StructuralAlertSet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &structuralAlertSetR{}
		}
		args = append(args, object.AlertSetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &structuralAlertSetR{}
			}

			for _, a := range args {
				if a == obj.AlertSetID {
					continue Outer
				}
			}

			args = append(args, obj.AlertSetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`structural_alerts`),
		qm.WhereIn(`structural_alerts.alert_set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load structural_alerts")
	}

	var resultSlice []*StructuralAlert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice structural_alerts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on structural_alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for structural_alerts")
	}

	if len(structuralAlertAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AlertSetStructuralAlerts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &structuralAlertR{}
			}
			foreign.R.AlertSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AlertSetID == foreign.AlertSetID {
				local.R.AlertSetStructuralAlerts = append(local.R.AlertSetStructuralAlerts, foreign)
				if foreign.R == nil {
					foreign.R = &structuralAlertR{}
				}
				foreign.R.AlertSet = local
				break
			}
		}
	}

	return nil
}

// AddAlertSetStructuralAlerts adds the given related objects to the existing relationships
// of the structural_alert_set, optionally inserting them as new records.
// Appends related to o.R.AlertSetStructuralAlerts.
// Sets related.R.AlertSet appropriately.
func (o *StructuralAlertSet) AddAlertSetStructuralAlerts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StructuralAlert) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlertSetID = o.AlertSetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"structural_alerts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"alert_set_id"}),
				strmangle.WhereClause("\"", "\"", 0, structuralAlertPrimaryKeyColumns),
			)
			values := []interface{}{o.AlertSetID, rel.AlertID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlertSetID = o.AlertSetID
		}
	}

	if o.R == nil {
		o.R = &structuralAlertSetR{
			AlertSetStructuralAlerts: related,
		}
	} else {
		o.R.AlertSetStructuralAlerts = append(o.R.AlertSetStructuralAlerts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &structuralAlertR{
				AlertSet: o,
			}
		} else {
			rel.R.AlertSet = o
		}
	}
	return nil
}

// StructuralAlertSets retrieves all the records using an executor.
func StructuralAlertSets(mods ...qm.QueryMod) structuralAlertSetQuery {
	mods = append(mods, qm.From("\"structural_alert_sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"structural_alert_sets\".*"})
	}

	return structuralAlertSetQuery{q}
}

// FindStructuralAlertSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStructuralAlertSet(ctx context.Context, exec boil.ContextExecutor, alertSetID int64, selectCols ...string) (*StructuralAlertSet, error) {
	structuralAlertSetObj := &StructuralAlertSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"structural_alert_sets\" where \"alert_set_id\"=?", sel,
	)

	q := queries.Raw(query, alertSetID)

	err := q.Bind(ctx, exec, structuralAlertSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from structural_alert_sets")
	}

	if err = structuralAlertSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return structuralAlertSetObj, err
	}

	return structuralAlertSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StructuralAlertSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no structural_alert_sets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(structuralAlertSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	structuralAlertSetInsertCacheMut.RLock()
	cache, cached := structuralAlertSetInsertCache[key]
	structuralAlertSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			structuralAlertSetAllColumns,
			structuralAlertSetColumnsWithDefault,
			structuralAlertSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"structural_alert_sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"structural_alert_sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into structural_alert_sets")
	}

	if !cached {
		structuralAlertSetInsertCacheMut.Lock()
		structuralAlertSetInsertCache[key] = cache
		structuralAlertSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StructuralAlertSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StructuralAlertSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	structuralAlertSetUpdateCacheMut.RLock()
	cache, cached := structuralAlertSetUpdateCache[key]
	structuralAlertSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			structuralAlertSetAllColumns,
			structuralAlertSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update structural_alert_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"structural_alert_sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, structuralAlertSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, append(wl, structuralAlertSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update structural_alert_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for structural_alert_sets")
	}

	if !cached {
		structuralAlertSetUpdateCacheMut.Lock()
		structuralAlertSetUpdateCache[key] = cache
		structuralAlertSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q structuralAlertSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for structural_alert_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for structural_alert_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StructuralAlertSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"structural_alert_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in structuralAlertSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all structuralAlertSet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StructuralAlertSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no structural_alert_sets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(structuralAlertSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	structuralAlertSetUpsertCacheMut.RLock()
	cache, cached := structuralAlertSetUpsertCache[key]
	structuralAlertSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			structuralAlertSetAllColumns,
			structuralAlertSetColumnsWithDefault,
			structuralAlertSetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			structuralAlertSetAllColumns,
			structuralAlertSetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert structural_alert_sets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(structuralAlertSetPrimaryKeyColumns))
			copy(conflict, structuralAlertSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"structural_alert_sets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(structuralAlertSetType, structuralAlertSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert structural_alert_sets")
	}

	if !cached {
		structuralAlertSetUpsertCacheMut.Lock()
		structuralAlertSetUpsertCache[key] = cache
		structuralAlertSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StructuralAlertSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StructuralAlertSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StructuralAlertSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), structuralAlertSetPrimaryKeyMapping)
	sql := "DELETE FROM \"structural_alert_sets\" WHERE \"alert_set_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from structural_alert_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for structural_alert_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q structuralAlertSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no structuralAlertSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from structural_alert_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for structural_alert_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StructuralAlertSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(structuralAlertSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"structural_alert_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from structuralAlertSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for structural_alert_sets")
	}

	if len(structuralAlertSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StructuralAlertSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStructuralAlertSet(ctx, exec, o.AlertSetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StructuralAlertSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StructuralAlertSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"structural_alert_sets\".* FROM \"structural_alert_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StructuralAlertSetSlice")
	}

	*o = slice

	return nil
}

// StructuralAlertSetExists checks if the StructuralAlertSet row exists.
func StructuralAlertSetExists(ctx context.Context, exec boil.ContextExecutor, alertSetID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"structural_alert_sets\" where \"alert_set_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, alertSetID)
	}
	row := exec.QueryRowContext(ctx, sql, alertSetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if structural_alert_sets exists")
	}

	return exists, nil
}
