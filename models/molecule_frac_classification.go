// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MoleculeFracClassification is an object representing the database table.
type MoleculeFracClassification struct {
	MolFracID   int64 `boil:"mol_frac_id" json:"mol_frac_id" toml:"mol_frac_id" yaml:"mol_frac_id"`
	FracClassID int64 `boil:"frac_class_id" json:"frac_class_id" toml:"frac_class_id" yaml:"frac_class_id"`
	Molregno    int64 `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`

	R *moleculeFracClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moleculeFracClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoleculeFracClassificationColumns = struct {
	MolFracID   string
	FracClassID string
	Molregno    string
}{
	MolFracID:   "mol_frac_id",
	FracClassID: "frac_class_id",
	Molregno:    "molregno",
}

var MoleculeFracClassificationTableColumns = struct {
	MolFracID   string
	FracClassID string
	Molregno    string
}{
	MolFracID:   "molecule_frac_classification.mol_frac_id",
	FracClassID: "molecule_frac_classification.frac_class_id",
	Molregno:    "molecule_frac_classification.molregno",
}

// Generated where

var MoleculeFracClassificationWhere = struct {
	MolFracID   whereHelperint64
	FracClassID whereHelperint64
	Molregno    whereHelperint64
}{
	MolFracID:   whereHelperint64{field: "\"molecule_frac_classification\".\"mol_frac_id\""},
	FracClassID: whereHelperint64{field: "\"molecule_frac_classification\".\"frac_class_id\""},
	Molregno:    whereHelperint64{field: "\"molecule_frac_classification\".\"molregno\""},
}

// MoleculeFracClassificationRels is where relationship names are stored.
var MoleculeFracClassificationRels = struct {
	MolregnoMoleculeDictionary string
	FracClass                  string
}{
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	FracClass:                  "FracClass",
}

// moleculeFracClassificationR is where relationships are stored.
type moleculeFracClassificationR struct {
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	FracClass                  *FracClassification `boil:"FracClass" json:"FracClass" toml:"FracClass" yaml:"FracClass"`
}

// NewStruct creates a new relationship struct
func (*moleculeFracClassificationR) NewStruct() *moleculeFracClassificationR {
	return &moleculeFracClassificationR{}
}

func (r *moleculeFracClassificationR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *moleculeFracClassificationR) GetFracClass() *FracClassification {
	if r == nil {
		return nil
	}
	return r.FracClass
}

// moleculeFracClassificationL is where Load methods for each relationship are stored.
type moleculeFracClassificationL struct{}

var (
	moleculeFracClassificationAllColumns            = []string{"mol_frac_id", "frac_class_id", "molregno"}
	moleculeFracClassificationColumnsWithoutDefault = []string{"mol_frac_id", "frac_class_id", "molregno"}
	moleculeFracClassificationColumnsWithDefault    = []string{}
	moleculeFracClassificationPrimaryKeyColumns     = []string{"mol_frac_id"}
	moleculeFracClassificationGeneratedColumns      = []string{}
)

type (
	// MoleculeFracClassificationSlice is an alias for a slice of pointers to MoleculeFracClassification.
	// This should almost always be used instead of []MoleculeFracClassification.
	MoleculeFracClassificationSlice []*MoleculeFracClassification
	// MoleculeFracClassificationHook is the signature for custom MoleculeFracClassification hook methods
	MoleculeFracClassificationHook func(context.Context, boil.ContextExecutor, *MoleculeFracClassification) error

	moleculeFracClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moleculeFracClassificationType                 = reflect.TypeOf(&MoleculeFracClassification{})
	moleculeFracClassificationMapping              = queries.MakeStructMapping(moleculeFracClassificationType)
	moleculeFracClassificationPrimaryKeyMapping, _ = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, moleculeFracClassificationPrimaryKeyColumns)
	moleculeFracClassificationInsertCacheMut       sync.RWMutex
	moleculeFracClassificationInsertCache          = make(map[string]insertCache)
	moleculeFracClassificationUpdateCacheMut       sync.RWMutex
	moleculeFracClassificationUpdateCache          = make(map[string]updateCache)
	moleculeFracClassificationUpsertCacheMut       sync.RWMutex
	moleculeFracClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moleculeFracClassificationAfterSelectHooks []MoleculeFracClassificationHook

var moleculeFracClassificationBeforeInsertHooks []MoleculeFracClassificationHook
var moleculeFracClassificationAfterInsertHooks []MoleculeFracClassificationHook

var moleculeFracClassificationBeforeUpdateHooks []MoleculeFracClassificationHook
var moleculeFracClassificationAfterUpdateHooks []MoleculeFracClassificationHook

var moleculeFracClassificationBeforeDeleteHooks []MoleculeFracClassificationHook
var moleculeFracClassificationAfterDeleteHooks []MoleculeFracClassificationHook

var moleculeFracClassificationBeforeUpsertHooks []MoleculeFracClassificationHook
var moleculeFracClassificationAfterUpsertHooks []MoleculeFracClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MoleculeFracClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MoleculeFracClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MoleculeFracClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MoleculeFracClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MoleculeFracClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MoleculeFracClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MoleculeFracClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MoleculeFracClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MoleculeFracClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeFracClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoleculeFracClassificationHook registers your hook function for all future operations.
func AddMoleculeFracClassificationHook(hookPoint boil.HookPoint, moleculeFracClassificationHook MoleculeFracClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moleculeFracClassificationAfterSelectHooks = append(moleculeFracClassificationAfterSelectHooks, moleculeFracClassificationHook)
	case boil.BeforeInsertHook:
		moleculeFracClassificationBeforeInsertHooks = append(moleculeFracClassificationBeforeInsertHooks, moleculeFracClassificationHook)
	case boil.AfterInsertHook:
		moleculeFracClassificationAfterInsertHooks = append(moleculeFracClassificationAfterInsertHooks, moleculeFracClassificationHook)
	case boil.BeforeUpdateHook:
		moleculeFracClassificationBeforeUpdateHooks = append(moleculeFracClassificationBeforeUpdateHooks, moleculeFracClassificationHook)
	case boil.AfterUpdateHook:
		moleculeFracClassificationAfterUpdateHooks = append(moleculeFracClassificationAfterUpdateHooks, moleculeFracClassificationHook)
	case boil.BeforeDeleteHook:
		moleculeFracClassificationBeforeDeleteHooks = append(moleculeFracClassificationBeforeDeleteHooks, moleculeFracClassificationHook)
	case boil.AfterDeleteHook:
		moleculeFracClassificationAfterDeleteHooks = append(moleculeFracClassificationAfterDeleteHooks, moleculeFracClassificationHook)
	case boil.BeforeUpsertHook:
		moleculeFracClassificationBeforeUpsertHooks = append(moleculeFracClassificationBeforeUpsertHooks, moleculeFracClassificationHook)
	case boil.AfterUpsertHook:
		moleculeFracClassificationAfterUpsertHooks = append(moleculeFracClassificationAfterUpsertHooks, moleculeFracClassificationHook)
	}
}

// One returns a single moleculeFracClassification record from the query.
func (q moleculeFracClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MoleculeFracClassification, error) {
	o := &MoleculeFracClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for molecule_frac_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MoleculeFracClassification records from the query.
func (q moleculeFracClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoleculeFracClassificationSlice, error) {
	var o []*MoleculeFracClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MoleculeFracClassification slice")
	}

	if len(moleculeFracClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MoleculeFracClassification records in the query.
func (q moleculeFracClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count molecule_frac_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q moleculeFracClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if molecule_frac_classification exists")
	}

	return count > 0, nil
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeFracClassification) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// FracClass pointed to by the foreign key.
func (o *MoleculeFracClassification) FracClass(mods ...qm.QueryMod) fracClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"frac_class_id\" = ?", o.FracClassID),
	}

	queryMods = append(queryMods, mods...)

	return FracClassifications(queryMods...)
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeFracClassificationL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeFracClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeFracClassification
	var object *MoleculeFracClassification

	if singular {
		object = maybeMoleculeFracClassification.(*MoleculeFracClassification)
	} else {
		slice = *maybeMoleculeFracClassification.(*[]*MoleculeFracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeFracClassificationR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeFracClassificationR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeFracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoMoleculeFracClassifications = append(foreign.R.MolregnoMoleculeFracClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoMoleculeFracClassifications = append(foreign.R.MolregnoMoleculeFracClassifications, local)
				break
			}
		}
	}

	return nil
}

// LoadFracClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeFracClassificationL) LoadFracClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeFracClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeFracClassification
	var object *MoleculeFracClassification

	if singular {
		object = maybeMoleculeFracClassification.(*MoleculeFracClassification)
	} else {
		slice = *maybeMoleculeFracClassification.(*[]*MoleculeFracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeFracClassificationR{}
		}
		args = append(args, object.FracClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeFracClassificationR{}
			}

			for _, a := range args {
				if a == obj.FracClassID {
					continue Outer
				}
			}

			args = append(args, obj.FracClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`frac_classification`),
		qm.WhereIn(`frac_classification.frac_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FracClassification")
	}

	var resultSlice []*FracClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FracClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for frac_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for frac_classification")
	}

	if len(moleculeFracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FracClass = foreign
		if foreign.R == nil {
			foreign.R = &fracClassificationR{}
		}
		foreign.R.FracClassMoleculeFracClassifications = append(foreign.R.FracClassMoleculeFracClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FracClassID == foreign.FracClassID {
				local.R.FracClass = foreign
				if foreign.R == nil {
					foreign.R = &fracClassificationR{}
				}
				foreign.R.FracClassMoleculeFracClassifications = append(foreign.R.FracClassMoleculeFracClassifications, local)
				break
			}
		}
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the moleculeFracClassification to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoMoleculeFracClassifications.
func (o *MoleculeFracClassification) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_frac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeFracClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.MolFracID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &moleculeFracClassificationR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoMoleculeFracClassifications: MoleculeFracClassificationSlice{o},
		}
	} else {
		related.R.MolregnoMoleculeFracClassifications = append(related.R.MolregnoMoleculeFracClassifications, o)
	}

	return nil
}

// SetFracClass of the moleculeFracClassification to the related item.
// Sets o.R.FracClass to related.
// Adds o to related.R.FracClassMoleculeFracClassifications.
func (o *MoleculeFracClassification) SetFracClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FracClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_frac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"frac_class_id"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeFracClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.FracClassID, o.MolFracID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FracClassID = related.FracClassID
	if o.R == nil {
		o.R = &moleculeFracClassificationR{
			FracClass: related,
		}
	} else {
		o.R.FracClass = related
	}

	if related.R == nil {
		related.R = &fracClassificationR{
			FracClassMoleculeFracClassifications: MoleculeFracClassificationSlice{o},
		}
	} else {
		related.R.FracClassMoleculeFracClassifications = append(related.R.FracClassMoleculeFracClassifications, o)
	}

	return nil
}

// MoleculeFracClassifications retrieves all the records using an executor.
func MoleculeFracClassifications(mods ...qm.QueryMod) moleculeFracClassificationQuery {
	mods = append(mods, qm.From("\"molecule_frac_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"molecule_frac_classification\".*"})
	}

	return moleculeFracClassificationQuery{q}
}

// FindMoleculeFracClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoleculeFracClassification(ctx context.Context, exec boil.ContextExecutor, molFracID int64, selectCols ...string) (*MoleculeFracClassification, error) {
	moleculeFracClassificationObj := &MoleculeFracClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"molecule_frac_classification\" where \"mol_frac_id\"=?", sel,
	)

	q := queries.Raw(query, molFracID)

	err := q.Bind(ctx, exec, moleculeFracClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from molecule_frac_classification")
	}

	if err = moleculeFracClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moleculeFracClassificationObj, err
	}

	return moleculeFracClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MoleculeFracClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_frac_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeFracClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moleculeFracClassificationInsertCacheMut.RLock()
	cache, cached := moleculeFracClassificationInsertCache[key]
	moleculeFracClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moleculeFracClassificationAllColumns,
			moleculeFracClassificationColumnsWithDefault,
			moleculeFracClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"molecule_frac_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"molecule_frac_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into molecule_frac_classification")
	}

	if !cached {
		moleculeFracClassificationInsertCacheMut.Lock()
		moleculeFracClassificationInsertCache[key] = cache
		moleculeFracClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MoleculeFracClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MoleculeFracClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moleculeFracClassificationUpdateCacheMut.RLock()
	cache, cached := moleculeFracClassificationUpdateCache[key]
	moleculeFracClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moleculeFracClassificationAllColumns,
			moleculeFracClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update molecule_frac_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"molecule_frac_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, moleculeFracClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, append(wl, moleculeFracClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update molecule_frac_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for molecule_frac_classification")
	}

	if !cached {
		moleculeFracClassificationUpdateCacheMut.Lock()
		moleculeFracClassificationUpdateCache[key] = cache
		moleculeFracClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q moleculeFracClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for molecule_frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for molecule_frac_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoleculeFracClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeFracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"molecule_frac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeFracClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moleculeFracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moleculeFracClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MoleculeFracClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_frac_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeFracClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moleculeFracClassificationUpsertCacheMut.RLock()
	cache, cached := moleculeFracClassificationUpsertCache[key]
	moleculeFracClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			moleculeFracClassificationAllColumns,
			moleculeFracClassificationColumnsWithDefault,
			moleculeFracClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			moleculeFracClassificationAllColumns,
			moleculeFracClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert molecule_frac_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(moleculeFracClassificationPrimaryKeyColumns))
			copy(conflict, moleculeFracClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"molecule_frac_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moleculeFracClassificationType, moleculeFracClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert molecule_frac_classification")
	}

	if !cached {
		moleculeFracClassificationUpsertCacheMut.Lock()
		moleculeFracClassificationUpsertCache[key] = cache
		moleculeFracClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MoleculeFracClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MoleculeFracClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MoleculeFracClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moleculeFracClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"molecule_frac_classification\" WHERE \"mol_frac_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from molecule_frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for molecule_frac_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q moleculeFracClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moleculeFracClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from molecule_frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_frac_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoleculeFracClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moleculeFracClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeFracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"molecule_frac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeFracClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moleculeFracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_frac_classification")
	}

	if len(moleculeFracClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MoleculeFracClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoleculeFracClassification(ctx, exec, o.MolFracID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoleculeFracClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoleculeFracClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeFracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"molecule_frac_classification\".* FROM \"molecule_frac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeFracClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MoleculeFracClassificationSlice")
	}

	*o = slice

	return nil
}

// MoleculeFracClassificationExists checks if the MoleculeFracClassification row exists.
func MoleculeFracClassificationExists(ctx context.Context, exec boil.ContextExecutor, molFracID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"molecule_frac_classification\" where \"mol_frac_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, molFracID)
	}
	row := exec.QueryRowContext(ctx, sql, molFracID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if molecule_frac_classification exists")
	}

	return exists, nil
}
