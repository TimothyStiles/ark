// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MetabolismRef is an object representing the database table.
type MetabolismRef struct {
	MetrefID int64       `boil:"metref_id" json:"metref_id" toml:"metref_id" yaml:"metref_id"`
	MetID    int64       `boil:"met_id" json:"met_id" toml:"met_id" yaml:"met_id"`
	RefType  string      `boil:"ref_type" json:"ref_type" toml:"ref_type" yaml:"ref_type"`
	RefID    null.String `boil:"ref_id" json:"ref_id,omitempty" toml:"ref_id" yaml:"ref_id,omitempty"`
	RefURL   null.String `boil:"ref_url" json:"ref_url,omitempty" toml:"ref_url" yaml:"ref_url,omitempty"`

	R *metabolismRefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metabolismRefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetabolismRefColumns = struct {
	MetrefID string
	MetID    string
	RefType  string
	RefID    string
	RefURL   string
}{
	MetrefID: "metref_id",
	MetID:    "met_id",
	RefType:  "ref_type",
	RefID:    "ref_id",
	RefURL:   "ref_url",
}

var MetabolismRefTableColumns = struct {
	MetrefID string
	MetID    string
	RefType  string
	RefID    string
	RefURL   string
}{
	MetrefID: "metabolism_refs.metref_id",
	MetID:    "metabolism_refs.met_id",
	RefType:  "metabolism_refs.ref_type",
	RefID:    "metabolism_refs.ref_id",
	RefURL:   "metabolism_refs.ref_url",
}

// Generated where

var MetabolismRefWhere = struct {
	MetrefID whereHelperint64
	MetID    whereHelperint64
	RefType  whereHelperstring
	RefID    whereHelpernull_String
	RefURL   whereHelpernull_String
}{
	MetrefID: whereHelperint64{field: "\"metabolism_refs\".\"metref_id\""},
	MetID:    whereHelperint64{field: "\"metabolism_refs\".\"met_id\""},
	RefType:  whereHelperstring{field: "\"metabolism_refs\".\"ref_type\""},
	RefID:    whereHelpernull_String{field: "\"metabolism_refs\".\"ref_id\""},
	RefURL:   whereHelpernull_String{field: "\"metabolism_refs\".\"ref_url\""},
}

// MetabolismRefRels is where relationship names are stored.
var MetabolismRefRels = struct {
	Met string
}{
	Met: "Met",
}

// metabolismRefR is where relationships are stored.
type metabolismRefR struct {
	Met *Metabolism `boil:"Met" json:"Met" toml:"Met" yaml:"Met"`
}

// NewStruct creates a new relationship struct
func (*metabolismRefR) NewStruct() *metabolismRefR {
	return &metabolismRefR{}
}

func (r *metabolismRefR) GetMet() *Metabolism {
	if r == nil {
		return nil
	}
	return r.Met
}

// metabolismRefL is where Load methods for each relationship are stored.
type metabolismRefL struct{}

var (
	metabolismRefAllColumns            = []string{"metref_id", "met_id", "ref_type", "ref_id", "ref_url"}
	metabolismRefColumnsWithoutDefault = []string{"metref_id", "met_id", "ref_type"}
	metabolismRefColumnsWithDefault    = []string{"ref_id", "ref_url"}
	metabolismRefPrimaryKeyColumns     = []string{"metref_id"}
	metabolismRefGeneratedColumns      = []string{}
)

type (
	// MetabolismRefSlice is an alias for a slice of pointers to MetabolismRef.
	// This should almost always be used instead of []MetabolismRef.
	MetabolismRefSlice []*MetabolismRef
	// MetabolismRefHook is the signature for custom MetabolismRef hook methods
	MetabolismRefHook func(context.Context, boil.ContextExecutor, *MetabolismRef) error

	metabolismRefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metabolismRefType                 = reflect.TypeOf(&MetabolismRef{})
	metabolismRefMapping              = queries.MakeStructMapping(metabolismRefType)
	metabolismRefPrimaryKeyMapping, _ = queries.BindMapping(metabolismRefType, metabolismRefMapping, metabolismRefPrimaryKeyColumns)
	metabolismRefInsertCacheMut       sync.RWMutex
	metabolismRefInsertCache          = make(map[string]insertCache)
	metabolismRefUpdateCacheMut       sync.RWMutex
	metabolismRefUpdateCache          = make(map[string]updateCache)
	metabolismRefUpsertCacheMut       sync.RWMutex
	metabolismRefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metabolismRefAfterSelectHooks []MetabolismRefHook

var metabolismRefBeforeInsertHooks []MetabolismRefHook
var metabolismRefAfterInsertHooks []MetabolismRefHook

var metabolismRefBeforeUpdateHooks []MetabolismRefHook
var metabolismRefAfterUpdateHooks []MetabolismRefHook

var metabolismRefBeforeDeleteHooks []MetabolismRefHook
var metabolismRefAfterDeleteHooks []MetabolismRefHook

var metabolismRefBeforeUpsertHooks []MetabolismRefHook
var metabolismRefAfterUpsertHooks []MetabolismRefHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetabolismRef) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetabolismRef) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetabolismRef) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetabolismRef) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetabolismRef) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetabolismRef) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetabolismRef) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetabolismRef) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetabolismRef) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismRefAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetabolismRefHook registers your hook function for all future operations.
func AddMetabolismRefHook(hookPoint boil.HookPoint, metabolismRefHook MetabolismRefHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metabolismRefAfterSelectHooks = append(metabolismRefAfterSelectHooks, metabolismRefHook)
	case boil.BeforeInsertHook:
		metabolismRefBeforeInsertHooks = append(metabolismRefBeforeInsertHooks, metabolismRefHook)
	case boil.AfterInsertHook:
		metabolismRefAfterInsertHooks = append(metabolismRefAfterInsertHooks, metabolismRefHook)
	case boil.BeforeUpdateHook:
		metabolismRefBeforeUpdateHooks = append(metabolismRefBeforeUpdateHooks, metabolismRefHook)
	case boil.AfterUpdateHook:
		metabolismRefAfterUpdateHooks = append(metabolismRefAfterUpdateHooks, metabolismRefHook)
	case boil.BeforeDeleteHook:
		metabolismRefBeforeDeleteHooks = append(metabolismRefBeforeDeleteHooks, metabolismRefHook)
	case boil.AfterDeleteHook:
		metabolismRefAfterDeleteHooks = append(metabolismRefAfterDeleteHooks, metabolismRefHook)
	case boil.BeforeUpsertHook:
		metabolismRefBeforeUpsertHooks = append(metabolismRefBeforeUpsertHooks, metabolismRefHook)
	case boil.AfterUpsertHook:
		metabolismRefAfterUpsertHooks = append(metabolismRefAfterUpsertHooks, metabolismRefHook)
	}
}

// One returns a single metabolismRef record from the query.
func (q metabolismRefQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetabolismRef, error) {
	o := &MetabolismRef{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for metabolism_refs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetabolismRef records from the query.
func (q metabolismRefQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetabolismRefSlice, error) {
	var o []*MetabolismRef

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetabolismRef slice")
	}

	if len(metabolismRefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetabolismRef records in the query.
func (q metabolismRefQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count metabolism_refs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metabolismRefQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if metabolism_refs exists")
	}

	return count > 0, nil
}

// Met pointed to by the foreign key.
func (o *MetabolismRef) Met(mods ...qm.QueryMod) metabolismQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"met_id\" = ?", o.MetID),
	}

	queryMods = append(queryMods, mods...)

	return Metabolisms(queryMods...)
}

// LoadMet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (metabolismRefL) LoadMet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolismRef interface{}, mods queries.Applicator) error {
	var slice []*MetabolismRef
	var object *MetabolismRef

	if singular {
		object = maybeMetabolismRef.(*MetabolismRef)
	} else {
		slice = *maybeMetabolismRef.(*[]*MetabolismRef)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismRefR{}
		}
		args = append(args, object.MetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismRefR{}
			}

			for _, a := range args {
				if a == obj.MetID {
					continue Outer
				}
			}

			args = append(args, obj.MetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism`),
		qm.WhereIn(`metabolism.met_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Metabolism")
	}

	var resultSlice []*Metabolism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Metabolism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for metabolism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism")
	}

	if len(metabolismRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Met = foreign
		if foreign.R == nil {
			foreign.R = &metabolismR{}
		}
		foreign.R.MetMetabolismRefs = append(foreign.R.MetMetabolismRefs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MetID == foreign.MetID {
				local.R.Met = foreign
				if foreign.R == nil {
					foreign.R = &metabolismR{}
				}
				foreign.R.MetMetabolismRefs = append(foreign.R.MetMetabolismRefs, local)
				break
			}
		}
	}

	return nil
}

// SetMet of the metabolismRef to the related item.
// Sets o.R.Met to related.
// Adds o to related.R.MetMetabolismRefs.
func (o *MetabolismRef) SetMet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Metabolism) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metabolism_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"met_id"}),
		strmangle.WhereClause("\"", "\"", 0, metabolismRefPrimaryKeyColumns),
	)
	values := []interface{}{related.MetID, o.MetrefID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MetID = related.MetID
	if o.R == nil {
		o.R = &metabolismRefR{
			Met: related,
		}
	} else {
		o.R.Met = related
	}

	if related.R == nil {
		related.R = &metabolismR{
			MetMetabolismRefs: MetabolismRefSlice{o},
		}
	} else {
		related.R.MetMetabolismRefs = append(related.R.MetMetabolismRefs, o)
	}

	return nil
}

// MetabolismRefs retrieves all the records using an executor.
func MetabolismRefs(mods ...qm.QueryMod) metabolismRefQuery {
	mods = append(mods, qm.From("\"metabolism_refs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"metabolism_refs\".*"})
	}

	return metabolismRefQuery{q}
}

// FindMetabolismRef retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetabolismRef(ctx context.Context, exec boil.ContextExecutor, metrefID int64, selectCols ...string) (*MetabolismRef, error) {
	metabolismRefObj := &MetabolismRef{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metabolism_refs\" where \"metref_id\"=?", sel,
	)

	q := queries.Raw(query, metrefID)

	err := q.Bind(ctx, exec, metabolismRefObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from metabolism_refs")
	}

	if err = metabolismRefObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metabolismRefObj, err
	}

	return metabolismRefObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetabolismRef) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metabolism_refs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metabolismRefColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metabolismRefInsertCacheMut.RLock()
	cache, cached := metabolismRefInsertCache[key]
	metabolismRefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metabolismRefAllColumns,
			metabolismRefColumnsWithDefault,
			metabolismRefColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metabolismRefType, metabolismRefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metabolismRefType, metabolismRefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metabolism_refs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metabolism_refs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into metabolism_refs")
	}

	if !cached {
		metabolismRefInsertCacheMut.Lock()
		metabolismRefInsertCache[key] = cache
		metabolismRefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetabolismRef.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetabolismRef) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metabolismRefUpdateCacheMut.RLock()
	cache, cached := metabolismRefUpdateCache[key]
	metabolismRefUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metabolismRefAllColumns,
			metabolismRefPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update metabolism_refs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metabolism_refs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, metabolismRefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metabolismRefType, metabolismRefMapping, append(wl, metabolismRefPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update metabolism_refs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for metabolism_refs")
	}

	if !cached {
		metabolismRefUpdateCacheMut.Lock()
		metabolismRefUpdateCache[key] = cache
		metabolismRefUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metabolismRefQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for metabolism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for metabolism_refs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetabolismRefSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"metabolism_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismRefPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metabolismRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metabolismRef")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetabolismRef) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metabolism_refs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metabolismRefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metabolismRefUpsertCacheMut.RLock()
	cache, cached := metabolismRefUpsertCache[key]
	metabolismRefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			metabolismRefAllColumns,
			metabolismRefColumnsWithDefault,
			metabolismRefColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			metabolismRefAllColumns,
			metabolismRefPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert metabolism_refs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metabolismRefPrimaryKeyColumns))
			copy(conflict, metabolismRefPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"metabolism_refs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(metabolismRefType, metabolismRefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metabolismRefType, metabolismRefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert metabolism_refs")
	}

	if !cached {
		metabolismRefUpsertCacheMut.Lock()
		metabolismRefUpsertCache[key] = cache
		metabolismRefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetabolismRef record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetabolismRef) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetabolismRef provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metabolismRefPrimaryKeyMapping)
	sql := "DELETE FROM \"metabolism_refs\" WHERE \"metref_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from metabolism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for metabolism_refs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metabolismRefQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metabolismRefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metabolism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metabolism_refs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetabolismRefSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metabolismRefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"metabolism_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismRefPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metabolismRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metabolism_refs")
	}

	if len(metabolismRefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetabolismRef) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetabolismRef(ctx, exec, o.MetrefID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetabolismRefSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetabolismRefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"metabolism_refs\".* FROM \"metabolism_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismRefPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetabolismRefSlice")
	}

	*o = slice

	return nil
}

// MetabolismRefExists checks if the MetabolismRef row exists.
func MetabolismRefExists(ctx context.Context, exec boil.ContextExecutor, metrefID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"metabolism_refs\" where \"metref_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, metrefID)
	}
	row := exec.QueryRowContext(ctx, sql, metrefID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if metabolism_refs exists")
	}

	return exists, nil
}
