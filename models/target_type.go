// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TargetType is an object representing the database table.
type TargetType struct {
	TargetType string      `boil:"target_type" json:"target_type" toml:"target_type" yaml:"target_type"`
	TargetDesc null.String `boil:"target_desc" json:"target_desc,omitempty" toml:"target_desc" yaml:"target_desc,omitempty"`
	ParentType null.String `boil:"parent_type" json:"parent_type,omitempty" toml:"parent_type" yaml:"parent_type,omitempty"`

	R *targetTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetTypeColumns = struct {
	TargetType string
	TargetDesc string
	ParentType string
}{
	TargetType: "target_type",
	TargetDesc: "target_desc",
	ParentType: "parent_type",
}

var TargetTypeTableColumns = struct {
	TargetType string
	TargetDesc string
	ParentType string
}{
	TargetType: "target_type.target_type",
	TargetDesc: "target_type.target_desc",
	ParentType: "target_type.parent_type",
}

// Generated where

var TargetTypeWhere = struct {
	TargetType whereHelperstring
	TargetDesc whereHelpernull_String
	ParentType whereHelpernull_String
}{
	TargetType: whereHelperstring{field: "\"target_type\".\"target_type\""},
	TargetDesc: whereHelpernull_String{field: "\"target_type\".\"target_desc\""},
	ParentType: whereHelpernull_String{field: "\"target_type\".\"parent_type\""},
}

// TargetTypeRels is where relationship names are stored.
var TargetTypeRels = struct {
	TargetDictionaries string
}{
	TargetDictionaries: "TargetDictionaries",
}

// targetTypeR is where relationships are stored.
type targetTypeR struct {
	TargetDictionaries TargetDictionarySlice `boil:"TargetDictionaries" json:"TargetDictionaries" toml:"TargetDictionaries" yaml:"TargetDictionaries"`
}

// NewStruct creates a new relationship struct
func (*targetTypeR) NewStruct() *targetTypeR {
	return &targetTypeR{}
}

func (r *targetTypeR) GetTargetDictionaries() TargetDictionarySlice {
	if r == nil {
		return nil
	}
	return r.TargetDictionaries
}

// targetTypeL is where Load methods for each relationship are stored.
type targetTypeL struct{}

var (
	targetTypeAllColumns            = []string{"target_type", "target_desc", "parent_type"}
	targetTypeColumnsWithoutDefault = []string{"target_type"}
	targetTypeColumnsWithDefault    = []string{"target_desc", "parent_type"}
	targetTypePrimaryKeyColumns     = []string{"target_type"}
	targetTypeGeneratedColumns      = []string{}
)

type (
	// TargetTypeSlice is an alias for a slice of pointers to TargetType.
	// This should almost always be used instead of []TargetType.
	TargetTypeSlice []*TargetType
	// TargetTypeHook is the signature for custom TargetType hook methods
	TargetTypeHook func(context.Context, boil.ContextExecutor, *TargetType) error

	targetTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetTypeType                 = reflect.TypeOf(&TargetType{})
	targetTypeMapping              = queries.MakeStructMapping(targetTypeType)
	targetTypePrimaryKeyMapping, _ = queries.BindMapping(targetTypeType, targetTypeMapping, targetTypePrimaryKeyColumns)
	targetTypeInsertCacheMut       sync.RWMutex
	targetTypeInsertCache          = make(map[string]insertCache)
	targetTypeUpdateCacheMut       sync.RWMutex
	targetTypeUpdateCache          = make(map[string]updateCache)
	targetTypeUpsertCacheMut       sync.RWMutex
	targetTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetTypeAfterSelectHooks []TargetTypeHook

var targetTypeBeforeInsertHooks []TargetTypeHook
var targetTypeAfterInsertHooks []TargetTypeHook

var targetTypeBeforeUpdateHooks []TargetTypeHook
var targetTypeAfterUpdateHooks []TargetTypeHook

var targetTypeBeforeDeleteHooks []TargetTypeHook
var targetTypeAfterDeleteHooks []TargetTypeHook

var targetTypeBeforeUpsertHooks []TargetTypeHook
var targetTypeAfterUpsertHooks []TargetTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TargetType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TargetType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TargetType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TargetType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TargetType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TargetType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TargetType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TargetType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TargetType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetTypeHook registers your hook function for all future operations.
func AddTargetTypeHook(hookPoint boil.HookPoint, targetTypeHook TargetTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		targetTypeAfterSelectHooks = append(targetTypeAfterSelectHooks, targetTypeHook)
	case boil.BeforeInsertHook:
		targetTypeBeforeInsertHooks = append(targetTypeBeforeInsertHooks, targetTypeHook)
	case boil.AfterInsertHook:
		targetTypeAfterInsertHooks = append(targetTypeAfterInsertHooks, targetTypeHook)
	case boil.BeforeUpdateHook:
		targetTypeBeforeUpdateHooks = append(targetTypeBeforeUpdateHooks, targetTypeHook)
	case boil.AfterUpdateHook:
		targetTypeAfterUpdateHooks = append(targetTypeAfterUpdateHooks, targetTypeHook)
	case boil.BeforeDeleteHook:
		targetTypeBeforeDeleteHooks = append(targetTypeBeforeDeleteHooks, targetTypeHook)
	case boil.AfterDeleteHook:
		targetTypeAfterDeleteHooks = append(targetTypeAfterDeleteHooks, targetTypeHook)
	case boil.BeforeUpsertHook:
		targetTypeBeforeUpsertHooks = append(targetTypeBeforeUpsertHooks, targetTypeHook)
	case boil.AfterUpsertHook:
		targetTypeAfterUpsertHooks = append(targetTypeAfterUpsertHooks, targetTypeHook)
	}
}

// One returns a single targetType record from the query.
func (q targetTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TargetType, error) {
	o := &TargetType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for target_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TargetType records from the query.
func (q targetTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetTypeSlice, error) {
	var o []*TargetType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TargetType slice")
	}

	if len(targetTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TargetType records in the query.
func (q targetTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count target_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if target_type exists")
	}

	return count > 0, nil
}

// TargetDictionaries retrieves all the target_dictionary's TargetDictionaries with an executor.
func (o *TargetType) TargetDictionaries(mods ...qm.QueryMod) targetDictionaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"target_dictionary\".\"target_type\"=?", o.TargetType),
	)

	return TargetDictionaries(queryMods...)
}

// LoadTargetDictionaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetTypeL) LoadTargetDictionaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetType interface{}, mods queries.Applicator) error {
	var slice []*TargetType
	var object *TargetType

	if singular {
		object = maybeTargetType.(*TargetType)
	} else {
		slice = *maybeTargetType.(*[]*TargetType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetTypeR{}
		}
		args = append(args, object.TargetType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TargetType) {
					continue Outer
				}
			}

			args = append(args, obj.TargetType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.target_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load target_dictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice target_dictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(targetDictionaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetDictionaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetDictionaryR{}
			}
			foreign.R.TargetDictionaryTargetType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TargetType, foreign.TargetType) {
				local.R.TargetDictionaries = append(local.R.TargetDictionaries, foreign)
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.TargetDictionaryTargetType = local
				break
			}
		}
	}

	return nil
}

// AddTargetDictionaries adds the given related objects to the existing relationships
// of the target_type, optionally inserting them as new records.
// Appends related to o.R.TargetDictionaries.
// Sets related.R.TargetDictionaryTargetType appropriately.
func (o *TargetType) AddTargetDictionaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetDictionary) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TargetType, o.TargetType)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"target_dictionary\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"target_type"}),
				strmangle.WhereClause("\"", "\"", 0, targetDictionaryPrimaryKeyColumns),
			)
			values := []interface{}{o.TargetType, rel.Tid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TargetType, o.TargetType)
		}
	}

	if o.R == nil {
		o.R = &targetTypeR{
			TargetDictionaries: related,
		}
	} else {
		o.R.TargetDictionaries = append(o.R.TargetDictionaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetDictionaryR{
				TargetDictionaryTargetType: o,
			}
		} else {
			rel.R.TargetDictionaryTargetType = o
		}
	}
	return nil
}

// SetTargetDictionaries removes all previously related items of the
// target_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TargetDictionaryTargetType's TargetDictionaries accordingly.
// Replaces o.R.TargetDictionaries with related.
// Sets related.R.TargetDictionaryTargetType's TargetDictionaries accordingly.
func (o *TargetType) SetTargetDictionaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetDictionary) error {
	query := "update \"target_dictionary\" set \"target_type\" = null where \"target_type\" = ?"
	values := []interface{}{o.TargetType}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TargetDictionaries {
			queries.SetScanner(&rel.TargetType, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TargetDictionaryTargetType = nil
		}
		o.R.TargetDictionaries = nil
	}

	return o.AddTargetDictionaries(ctx, exec, insert, related...)
}

// RemoveTargetDictionaries relationships from objects passed in.
// Removes related items from R.TargetDictionaries (uses pointer comparison, removal does not keep order)
// Sets related.R.TargetDictionaryTargetType.
func (o *TargetType) RemoveTargetDictionaries(ctx context.Context, exec boil.ContextExecutor, related ...*TargetDictionary) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TargetType, nil)
		if rel.R != nil {
			rel.R.TargetDictionaryTargetType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("target_type")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TargetDictionaries {
			if rel != ri {
				continue
			}

			ln := len(o.R.TargetDictionaries)
			if ln > 1 && i < ln-1 {
				o.R.TargetDictionaries[i] = o.R.TargetDictionaries[ln-1]
			}
			o.R.TargetDictionaries = o.R.TargetDictionaries[:ln-1]
			break
		}
	}

	return nil
}

// TargetTypes retrieves all the records using an executor.
func TargetTypes(mods ...qm.QueryMod) targetTypeQuery {
	mods = append(mods, qm.From("\"target_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"target_type\".*"})
	}

	return targetTypeQuery{q}
}

// FindTargetType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTargetType(ctx context.Context, exec boil.ContextExecutor, targetType string, selectCols ...string) (*TargetType, error) {
	targetTypeObj := &TargetType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"target_type\" where \"target_type\"=?", sel,
	)

	q := queries.Raw(query, targetType)

	err := q.Bind(ctx, exec, targetTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from target_type")
	}

	if err = targetTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return targetTypeObj, err
	}

	return targetTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TargetType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetTypeInsertCacheMut.RLock()
	cache, cached := targetTypeInsertCache[key]
	targetTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetTypeAllColumns,
			targetTypeColumnsWithDefault,
			targetTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetTypeType, targetTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetTypeType, targetTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"target_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"target_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into target_type")
	}

	if !cached {
		targetTypeInsertCacheMut.Lock()
		targetTypeInsertCache[key] = cache
		targetTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TargetType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TargetType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetTypeUpdateCacheMut.RLock()
	cache, cached := targetTypeUpdateCache[key]
	targetTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetTypeAllColumns,
			targetTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update target_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"target_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, targetTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetTypeType, targetTypeMapping, append(wl, targetTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update target_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for target_type")
	}

	if !cached {
		targetTypeUpdateCacheMut.Lock()
		targetTypeUpdateCache[key] = cache
		targetTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for target_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for target_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"target_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in targetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all targetType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TargetType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetTypeUpsertCacheMut.RLock()
	cache, cached := targetTypeUpsertCache[key]
	targetTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			targetTypeAllColumns,
			targetTypeColumnsWithDefault,
			targetTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			targetTypeAllColumns,
			targetTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert target_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(targetTypePrimaryKeyColumns))
			copy(conflict, targetTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"target_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(targetTypeType, targetTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetTypeType, targetTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert target_type")
	}

	if !cached {
		targetTypeUpsertCacheMut.Lock()
		targetTypeUpsertCache[key] = cache
		targetTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TargetType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TargetType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TargetType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetTypePrimaryKeyMapping)
	sql := "DELETE FROM \"target_type\" WHERE \"target_type\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from target_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for target_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from target_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"target_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_type")
	}

	if len(targetTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TargetType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTargetType(ctx, exec, o.TargetType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"target_type\".* FROM \"target_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetTypeSlice")
	}

	*o = slice

	return nil
}

// TargetTypeExists checks if the TargetType row exists.
func TargetTypeExists(ctx context.Context, exec boil.ContextExecutor, targetType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"target_type\" where \"target_type\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, targetType)
	}
	row := exec.QueryRowContext(ctx, sql, targetType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if target_type exists")
	}

	return exists, nil
}
