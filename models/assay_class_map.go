// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssayClassMap is an object representing the database table.
type AssayClassMap struct {
	AssCLSMapID  int64 `boil:"ass_cls_map_id" json:"ass_cls_map_id" toml:"ass_cls_map_id" yaml:"ass_cls_map_id"`
	AssayID      int64 `boil:"assay_id" json:"assay_id" toml:"assay_id" yaml:"assay_id"`
	AssayClassID int64 `boil:"assay_class_id" json:"assay_class_id" toml:"assay_class_id" yaml:"assay_class_id"`

	R *assayClassMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assayClassMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssayClassMapColumns = struct {
	AssCLSMapID  string
	AssayID      string
	AssayClassID string
}{
	AssCLSMapID:  "ass_cls_map_id",
	AssayID:      "assay_id",
	AssayClassID: "assay_class_id",
}

var AssayClassMapTableColumns = struct {
	AssCLSMapID  string
	AssayID      string
	AssayClassID string
}{
	AssCLSMapID:  "assay_class_map.ass_cls_map_id",
	AssayID:      "assay_class_map.assay_id",
	AssayClassID: "assay_class_map.assay_class_id",
}

// Generated where

var AssayClassMapWhere = struct {
	AssCLSMapID  whereHelperint64
	AssayID      whereHelperint64
	AssayClassID whereHelperint64
}{
	AssCLSMapID:  whereHelperint64{field: "\"assay_class_map\".\"ass_cls_map_id\""},
	AssayID:      whereHelperint64{field: "\"assay_class_map\".\"assay_id\""},
	AssayClassID: whereHelperint64{field: "\"assay_class_map\".\"assay_class_id\""},
}

// AssayClassMapRels is where relationship names are stored.
var AssayClassMapRels = struct {
	AssayClass string
	Assay      string
}{
	AssayClass: "AssayClass",
	Assay:      "Assay",
}

// assayClassMapR is where relationships are stored.
type assayClassMapR struct {
	AssayClass *AssayClassification `boil:"AssayClass" json:"AssayClass" toml:"AssayClass" yaml:"AssayClass"`
	Assay      *Assay               `boil:"Assay" json:"Assay" toml:"Assay" yaml:"Assay"`
}

// NewStruct creates a new relationship struct
func (*assayClassMapR) NewStruct() *assayClassMapR {
	return &assayClassMapR{}
}

func (r *assayClassMapR) GetAssayClass() *AssayClassification {
	if r == nil {
		return nil
	}
	return r.AssayClass
}

func (r *assayClassMapR) GetAssay() *Assay {
	if r == nil {
		return nil
	}
	return r.Assay
}

// assayClassMapL is where Load methods for each relationship are stored.
type assayClassMapL struct{}

var (
	assayClassMapAllColumns            = []string{"ass_cls_map_id", "assay_id", "assay_class_id"}
	assayClassMapColumnsWithoutDefault = []string{"ass_cls_map_id", "assay_id", "assay_class_id"}
	assayClassMapColumnsWithDefault    = []string{}
	assayClassMapPrimaryKeyColumns     = []string{"ass_cls_map_id"}
	assayClassMapGeneratedColumns      = []string{}
)

type (
	// AssayClassMapSlice is an alias for a slice of pointers to AssayClassMap.
	// This should almost always be used instead of []AssayClassMap.
	AssayClassMapSlice []*AssayClassMap
	// AssayClassMapHook is the signature for custom AssayClassMap hook methods
	AssayClassMapHook func(context.Context, boil.ContextExecutor, *AssayClassMap) error

	assayClassMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assayClassMapType                 = reflect.TypeOf(&AssayClassMap{})
	assayClassMapMapping              = queries.MakeStructMapping(assayClassMapType)
	assayClassMapPrimaryKeyMapping, _ = queries.BindMapping(assayClassMapType, assayClassMapMapping, assayClassMapPrimaryKeyColumns)
	assayClassMapInsertCacheMut       sync.RWMutex
	assayClassMapInsertCache          = make(map[string]insertCache)
	assayClassMapUpdateCacheMut       sync.RWMutex
	assayClassMapUpdateCache          = make(map[string]updateCache)
	assayClassMapUpsertCacheMut       sync.RWMutex
	assayClassMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assayClassMapAfterSelectHooks []AssayClassMapHook

var assayClassMapBeforeInsertHooks []AssayClassMapHook
var assayClassMapAfterInsertHooks []AssayClassMapHook

var assayClassMapBeforeUpdateHooks []AssayClassMapHook
var assayClassMapAfterUpdateHooks []AssayClassMapHook

var assayClassMapBeforeDeleteHooks []AssayClassMapHook
var assayClassMapAfterDeleteHooks []AssayClassMapHook

var assayClassMapBeforeUpsertHooks []AssayClassMapHook
var assayClassMapAfterUpsertHooks []AssayClassMapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssayClassMap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssayClassMap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssayClassMap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssayClassMap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssayClassMap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssayClassMap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssayClassMap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssayClassMap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssayClassMap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassMapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssayClassMapHook registers your hook function for all future operations.
func AddAssayClassMapHook(hookPoint boil.HookPoint, assayClassMapHook AssayClassMapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assayClassMapAfterSelectHooks = append(assayClassMapAfterSelectHooks, assayClassMapHook)
	case boil.BeforeInsertHook:
		assayClassMapBeforeInsertHooks = append(assayClassMapBeforeInsertHooks, assayClassMapHook)
	case boil.AfterInsertHook:
		assayClassMapAfterInsertHooks = append(assayClassMapAfterInsertHooks, assayClassMapHook)
	case boil.BeforeUpdateHook:
		assayClassMapBeforeUpdateHooks = append(assayClassMapBeforeUpdateHooks, assayClassMapHook)
	case boil.AfterUpdateHook:
		assayClassMapAfterUpdateHooks = append(assayClassMapAfterUpdateHooks, assayClassMapHook)
	case boil.BeforeDeleteHook:
		assayClassMapBeforeDeleteHooks = append(assayClassMapBeforeDeleteHooks, assayClassMapHook)
	case boil.AfterDeleteHook:
		assayClassMapAfterDeleteHooks = append(assayClassMapAfterDeleteHooks, assayClassMapHook)
	case boil.BeforeUpsertHook:
		assayClassMapBeforeUpsertHooks = append(assayClassMapBeforeUpsertHooks, assayClassMapHook)
	case boil.AfterUpsertHook:
		assayClassMapAfterUpsertHooks = append(assayClassMapAfterUpsertHooks, assayClassMapHook)
	}
}

// One returns a single assayClassMap record from the query.
func (q assayClassMapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssayClassMap, error) {
	o := &AssayClassMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assay_class_map")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssayClassMap records from the query.
func (q assayClassMapQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssayClassMapSlice, error) {
	var o []*AssayClassMap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssayClassMap slice")
	}

	if len(assayClassMapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssayClassMap records in the query.
func (q assayClassMapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assay_class_map rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assayClassMapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assay_class_map exists")
	}

	return count > 0, nil
}

// AssayClass pointed to by the foreign key.
func (o *AssayClassMap) AssayClass(mods ...qm.QueryMod) assayClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"assay_class_id\" = ?", o.AssayClassID),
	}

	queryMods = append(queryMods, mods...)

	return AssayClassifications(queryMods...)
}

// Assay pointed to by the foreign key.
func (o *AssayClassMap) Assay(mods ...qm.QueryMod) assayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"assay_id\" = ?", o.AssayID),
	}

	queryMods = append(queryMods, mods...)

	return Assays(queryMods...)
}

// LoadAssayClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assayClassMapL) LoadAssayClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssayClassMap interface{}, mods queries.Applicator) error {
	var slice []*AssayClassMap
	var object *AssayClassMap

	if singular {
		object = maybeAssayClassMap.(*AssayClassMap)
	} else {
		slice = *maybeAssayClassMap.(*[]*AssayClassMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assayClassMapR{}
		}
		args = append(args, object.AssayClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assayClassMapR{}
			}

			for _, a := range args {
				if a == obj.AssayClassID {
					continue Outer
				}
			}

			args = append(args, obj.AssayClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assay_classification`),
		qm.WhereIn(`assay_classification.assay_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssayClassification")
	}

	var resultSlice []*AssayClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssayClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assay_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assay_classification")
	}

	if len(assayClassMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssayClass = foreign
		if foreign.R == nil {
			foreign.R = &assayClassificationR{}
		}
		foreign.R.AssayClassAssayClassMaps = append(foreign.R.AssayClassAssayClassMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssayClassID == foreign.AssayClassID {
				local.R.AssayClass = foreign
				if foreign.R == nil {
					foreign.R = &assayClassificationR{}
				}
				foreign.R.AssayClassAssayClassMaps = append(foreign.R.AssayClassAssayClassMaps, local)
				break
			}
		}
	}

	return nil
}

// LoadAssay allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assayClassMapL) LoadAssay(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssayClassMap interface{}, mods queries.Applicator) error {
	var slice []*AssayClassMap
	var object *AssayClassMap

	if singular {
		object = maybeAssayClassMap.(*AssayClassMap)
	} else {
		slice = *maybeAssayClassMap.(*[]*AssayClassMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assayClassMapR{}
		}
		args = append(args, object.AssayID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assayClassMapR{}
			}

			for _, a := range args {
				if a == obj.AssayID {
					continue Outer
				}
			}

			args = append(args, obj.AssayID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.assay_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assay")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assay")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayClassMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assay = foreign
		if foreign.R == nil {
			foreign.R = &assayR{}
		}
		foreign.R.AssayClassMaps = append(foreign.R.AssayClassMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssayID == foreign.AssayID {
				local.R.Assay = foreign
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.AssayClassMaps = append(foreign.R.AssayClassMaps, local)
				break
			}
		}
	}

	return nil
}

// SetAssayClass of the assayClassMap to the related item.
// Sets o.R.AssayClass to related.
// Adds o to related.R.AssayClassAssayClassMaps.
func (o *AssayClassMap) SetAssayClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssayClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assay_class_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"assay_class_id"}),
		strmangle.WhereClause("\"", "\"", 0, assayClassMapPrimaryKeyColumns),
	)
	values := []interface{}{related.AssayClassID, o.AssCLSMapID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssayClassID = related.AssayClassID
	if o.R == nil {
		o.R = &assayClassMapR{
			AssayClass: related,
		}
	} else {
		o.R.AssayClass = related
	}

	if related.R == nil {
		related.R = &assayClassificationR{
			AssayClassAssayClassMaps: AssayClassMapSlice{o},
		}
	} else {
		related.R.AssayClassAssayClassMaps = append(related.R.AssayClassAssayClassMaps, o)
	}

	return nil
}

// SetAssay of the assayClassMap to the related item.
// Sets o.R.Assay to related.
// Adds o to related.R.AssayClassMaps.
func (o *AssayClassMap) SetAssay(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Assay) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assay_class_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"assay_id"}),
		strmangle.WhereClause("\"", "\"", 0, assayClassMapPrimaryKeyColumns),
	)
	values := []interface{}{related.AssayID, o.AssCLSMapID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssayID = related.AssayID
	if o.R == nil {
		o.R = &assayClassMapR{
			Assay: related,
		}
	} else {
		o.R.Assay = related
	}

	if related.R == nil {
		related.R = &assayR{
			AssayClassMaps: AssayClassMapSlice{o},
		}
	} else {
		related.R.AssayClassMaps = append(related.R.AssayClassMaps, o)
	}

	return nil
}

// AssayClassMaps retrieves all the records using an executor.
func AssayClassMaps(mods ...qm.QueryMod) assayClassMapQuery {
	mods = append(mods, qm.From("\"assay_class_map\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assay_class_map\".*"})
	}

	return assayClassMapQuery{q}
}

// FindAssayClassMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssayClassMap(ctx context.Context, exec boil.ContextExecutor, assCLSMapID int64, selectCols ...string) (*AssayClassMap, error) {
	assayClassMapObj := &AssayClassMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assay_class_map\" where \"ass_cls_map_id\"=?", sel,
	)

	q := queries.Raw(query, assCLSMapID)

	err := q.Bind(ctx, exec, assayClassMapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assay_class_map")
	}

	if err = assayClassMapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assayClassMapObj, err
	}

	return assayClassMapObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssayClassMap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_class_map provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayClassMapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assayClassMapInsertCacheMut.RLock()
	cache, cached := assayClassMapInsertCache[key]
	assayClassMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assayClassMapAllColumns,
			assayClassMapColumnsWithDefault,
			assayClassMapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assayClassMapType, assayClassMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assayClassMapType, assayClassMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assay_class_map\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assay_class_map\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assay_class_map")
	}

	if !cached {
		assayClassMapInsertCacheMut.Lock()
		assayClassMapInsertCache[key] = cache
		assayClassMapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssayClassMap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssayClassMap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assayClassMapUpdateCacheMut.RLock()
	cache, cached := assayClassMapUpdateCache[key]
	assayClassMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assayClassMapAllColumns,
			assayClassMapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assay_class_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assay_class_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, assayClassMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assayClassMapType, assayClassMapMapping, append(wl, assayClassMapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assay_class_map row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assay_class_map")
	}

	if !cached {
		assayClassMapUpdateCacheMut.Lock()
		assayClassMapUpdateCache[key] = cache
		assayClassMapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assayClassMapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assay_class_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assay_class_map")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssayClassMapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assay_class_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassMapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assayClassMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assayClassMap")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssayClassMap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_class_map provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayClassMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assayClassMapUpsertCacheMut.RLock()
	cache, cached := assayClassMapUpsertCache[key]
	assayClassMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assayClassMapAllColumns,
			assayClassMapColumnsWithDefault,
			assayClassMapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assayClassMapAllColumns,
			assayClassMapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assay_class_map, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assayClassMapPrimaryKeyColumns))
			copy(conflict, assayClassMapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"assay_class_map\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assayClassMapType, assayClassMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assayClassMapType, assayClassMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assay_class_map")
	}

	if !cached {
		assayClassMapUpsertCacheMut.Lock()
		assayClassMapUpsertCache[key] = cache
		assayClassMapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssayClassMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssayClassMap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssayClassMap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assayClassMapPrimaryKeyMapping)
	sql := "DELETE FROM \"assay_class_map\" WHERE \"ass_cls_map_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assay_class_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assay_class_map")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assayClassMapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assayClassMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assay_class_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_class_map")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssayClassMapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assayClassMapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assay_class_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassMapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assayClassMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_class_map")
	}

	if len(assayClassMapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssayClassMap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssayClassMap(ctx, exec, o.AssCLSMapID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssayClassMapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssayClassMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assay_class_map\".* FROM \"assay_class_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssayClassMapSlice")
	}

	*o = slice

	return nil
}

// AssayClassMapExists checks if the AssayClassMap row exists.
func AssayClassMapExists(ctx context.Context, exec boil.ContextExecutor, assCLSMapID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assay_class_map\" where \"ass_cls_map_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assCLSMapID)
	}
	row := exec.QueryRowContext(ctx, sql, assCLSMapID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assay_class_map exists")
	}

	return exists, nil
}
