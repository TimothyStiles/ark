// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoClassification is an object representing the database table.
type GoClassification struct {
	GoID       string      `boil:"go_id" json:"go_id" toml:"go_id" yaml:"go_id"`
	ParentGoID null.String `boil:"parent_go_id" json:"parent_go_id,omitempty" toml:"parent_go_id" yaml:"parent_go_id,omitempty"`
	PrefName   null.String `boil:"pref_name" json:"pref_name,omitempty" toml:"pref_name" yaml:"pref_name,omitempty"`
	ClassLevel null.Int16  `boil:"class_level" json:"class_level,omitempty" toml:"class_level" yaml:"class_level,omitempty"`
	Aspect     null.String `boil:"aspect" json:"aspect,omitempty" toml:"aspect" yaml:"aspect,omitempty"`
	Path       null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`

	R *goClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoClassificationColumns = struct {
	GoID       string
	ParentGoID string
	PrefName   string
	ClassLevel string
	Aspect     string
	Path       string
}{
	GoID:       "go_id",
	ParentGoID: "parent_go_id",
	PrefName:   "pref_name",
	ClassLevel: "class_level",
	Aspect:     "aspect",
	Path:       "path",
}

var GoClassificationTableColumns = struct {
	GoID       string
	ParentGoID string
	PrefName   string
	ClassLevel string
	Aspect     string
	Path       string
}{
	GoID:       "go_classification.go_id",
	ParentGoID: "go_classification.parent_go_id",
	PrefName:   "go_classification.pref_name",
	ClassLevel: "go_classification.class_level",
	Aspect:     "go_classification.aspect",
	Path:       "go_classification.path",
}

// Generated where

var GoClassificationWhere = struct {
	GoID       whereHelperstring
	ParentGoID whereHelpernull_String
	PrefName   whereHelpernull_String
	ClassLevel whereHelpernull_Int16
	Aspect     whereHelpernull_String
	Path       whereHelpernull_String
}{
	GoID:       whereHelperstring{field: "\"go_classification\".\"go_id\""},
	ParentGoID: whereHelpernull_String{field: "\"go_classification\".\"parent_go_id\""},
	PrefName:   whereHelpernull_String{field: "\"go_classification\".\"pref_name\""},
	ClassLevel: whereHelpernull_Int16{field: "\"go_classification\".\"class_level\""},
	Aspect:     whereHelpernull_String{field: "\"go_classification\".\"aspect\""},
	Path:       whereHelpernull_String{field: "\"go_classification\".\"path\""},
}

// GoClassificationRels is where relationship names are stored.
var GoClassificationRels = struct {
	GoComponentGos string
}{
	GoComponentGos: "GoComponentGos",
}

// goClassificationR is where relationships are stored.
type goClassificationR struct {
	GoComponentGos ComponentGoSlice `boil:"GoComponentGos" json:"GoComponentGos" toml:"GoComponentGos" yaml:"GoComponentGos"`
}

// NewStruct creates a new relationship struct
func (*goClassificationR) NewStruct() *goClassificationR {
	return &goClassificationR{}
}

func (r *goClassificationR) GetGoComponentGos() ComponentGoSlice {
	if r == nil {
		return nil
	}
	return r.GoComponentGos
}

// goClassificationL is where Load methods for each relationship are stored.
type goClassificationL struct{}

var (
	goClassificationAllColumns            = []string{"go_id", "parent_go_id", "pref_name", "class_level", "aspect", "path"}
	goClassificationColumnsWithoutDefault = []string{"go_id"}
	goClassificationColumnsWithDefault    = []string{"parent_go_id", "pref_name", "class_level", "aspect", "path"}
	goClassificationPrimaryKeyColumns     = []string{"go_id"}
	goClassificationGeneratedColumns      = []string{}
)

type (
	// GoClassificationSlice is an alias for a slice of pointers to GoClassification.
	// This should almost always be used instead of []GoClassification.
	GoClassificationSlice []*GoClassification
	// GoClassificationHook is the signature for custom GoClassification hook methods
	GoClassificationHook func(context.Context, boil.ContextExecutor, *GoClassification) error

	goClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goClassificationType                 = reflect.TypeOf(&GoClassification{})
	goClassificationMapping              = queries.MakeStructMapping(goClassificationType)
	goClassificationPrimaryKeyMapping, _ = queries.BindMapping(goClassificationType, goClassificationMapping, goClassificationPrimaryKeyColumns)
	goClassificationInsertCacheMut       sync.RWMutex
	goClassificationInsertCache          = make(map[string]insertCache)
	goClassificationUpdateCacheMut       sync.RWMutex
	goClassificationUpdateCache          = make(map[string]updateCache)
	goClassificationUpsertCacheMut       sync.RWMutex
	goClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goClassificationAfterSelectHooks []GoClassificationHook

var goClassificationBeforeInsertHooks []GoClassificationHook
var goClassificationAfterInsertHooks []GoClassificationHook

var goClassificationBeforeUpdateHooks []GoClassificationHook
var goClassificationAfterUpdateHooks []GoClassificationHook

var goClassificationBeforeDeleteHooks []GoClassificationHook
var goClassificationAfterDeleteHooks []GoClassificationHook

var goClassificationBeforeUpsertHooks []GoClassificationHook
var goClassificationAfterUpsertHooks []GoClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoClassificationHook registers your hook function for all future operations.
func AddGoClassificationHook(hookPoint boil.HookPoint, goClassificationHook GoClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goClassificationAfterSelectHooks = append(goClassificationAfterSelectHooks, goClassificationHook)
	case boil.BeforeInsertHook:
		goClassificationBeforeInsertHooks = append(goClassificationBeforeInsertHooks, goClassificationHook)
	case boil.AfterInsertHook:
		goClassificationAfterInsertHooks = append(goClassificationAfterInsertHooks, goClassificationHook)
	case boil.BeforeUpdateHook:
		goClassificationBeforeUpdateHooks = append(goClassificationBeforeUpdateHooks, goClassificationHook)
	case boil.AfterUpdateHook:
		goClassificationAfterUpdateHooks = append(goClassificationAfterUpdateHooks, goClassificationHook)
	case boil.BeforeDeleteHook:
		goClassificationBeforeDeleteHooks = append(goClassificationBeforeDeleteHooks, goClassificationHook)
	case boil.AfterDeleteHook:
		goClassificationAfterDeleteHooks = append(goClassificationAfterDeleteHooks, goClassificationHook)
	case boil.BeforeUpsertHook:
		goClassificationBeforeUpsertHooks = append(goClassificationBeforeUpsertHooks, goClassificationHook)
	case boil.AfterUpsertHook:
		goClassificationAfterUpsertHooks = append(goClassificationAfterUpsertHooks, goClassificationHook)
	}
}

// One returns a single goClassification record from the query.
func (q goClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoClassification, error) {
	o := &GoClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for go_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoClassification records from the query.
func (q goClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoClassificationSlice, error) {
	var o []*GoClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GoClassification slice")
	}

	if len(goClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoClassification records in the query.
func (q goClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count go_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if go_classification exists")
	}

	return count > 0, nil
}

// GoComponentGos retrieves all the component_go's ComponentGos with an executor via go_id column.
func (o *GoClassification) GoComponentGos(mods ...qm.QueryMod) componentGoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_go\".\"go_id\"=?", o.GoID),
	)

	return ComponentGos(queryMods...)
}

// LoadGoComponentGos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goClassificationL) LoadGoComponentGos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoClassification interface{}, mods queries.Applicator) error {
	var slice []*GoClassification
	var object *GoClassification

	if singular {
		object = maybeGoClassification.(*GoClassification)
	} else {
		slice = *maybeGoClassification.(*[]*GoClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &goClassificationR{}
		}
		args = append(args, object.GoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goClassificationR{}
			}

			for _, a := range args {
				if a == obj.GoID {
					continue Outer
				}
			}

			args = append(args, obj.GoID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_go`),
		qm.WhereIn(`component_go.go_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_go")
	}

	var resultSlice []*ComponentGo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_go")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_go")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_go")
	}

	if len(componentGoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoComponentGos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentGoR{}
			}
			foreign.R.Go = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GoID == foreign.GoID {
				local.R.GoComponentGos = append(local.R.GoComponentGos, foreign)
				if foreign.R == nil {
					foreign.R = &componentGoR{}
				}
				foreign.R.Go = local
				break
			}
		}
	}

	return nil
}

// AddGoComponentGos adds the given related objects to the existing relationships
// of the go_classification, optionally inserting them as new records.
// Appends related to o.R.GoComponentGos.
// Sets related.R.Go appropriately.
func (o *GoClassification) AddGoComponentGos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentGo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoID = o.GoID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_go\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"go_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentGoPrimaryKeyColumns),
			)
			values := []interface{}{o.GoID, rel.CompGoID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoID = o.GoID
		}
	}

	if o.R == nil {
		o.R = &goClassificationR{
			GoComponentGos: related,
		}
	} else {
		o.R.GoComponentGos = append(o.R.GoComponentGos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentGoR{
				Go: o,
			}
		} else {
			rel.R.Go = o
		}
	}
	return nil
}

// GoClassifications retrieves all the records using an executor.
func GoClassifications(mods ...qm.QueryMod) goClassificationQuery {
	mods = append(mods, qm.From("\"go_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"go_classification\".*"})
	}

	return goClassificationQuery{q}
}

// FindGoClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoClassification(ctx context.Context, exec boil.ContextExecutor, goID string, selectCols ...string) (*GoClassification, error) {
	goClassificationObj := &GoClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"go_classification\" where \"go_id\"=?", sel,
	)

	q := queries.Raw(query, goID)

	err := q.Bind(ctx, exec, goClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from go_classification")
	}

	if err = goClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goClassificationObj, err
	}

	return goClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no go_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goClassificationInsertCacheMut.RLock()
	cache, cached := goClassificationInsertCache[key]
	goClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goClassificationAllColumns,
			goClassificationColumnsWithDefault,
			goClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goClassificationType, goClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goClassificationType, goClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"go_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"go_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into go_classification")
	}

	if !cached {
		goClassificationInsertCacheMut.Lock()
		goClassificationInsertCache[key] = cache
		goClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goClassificationUpdateCacheMut.RLock()
	cache, cached := goClassificationUpdateCache[key]
	goClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goClassificationAllColumns,
			goClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update go_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"go_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, goClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goClassificationType, goClassificationMapping, append(wl, goClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update go_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for go_classification")
	}

	if !cached {
		goClassificationUpdateCacheMut.Lock()
		goClassificationUpdateCache[key] = cache
		goClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for go_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for go_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"go_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in goClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all goClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no go_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goClassificationUpsertCacheMut.RLock()
	cache, cached := goClassificationUpsertCache[key]
	goClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			goClassificationAllColumns,
			goClassificationColumnsWithDefault,
			goClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			goClassificationAllColumns,
			goClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert go_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(goClassificationPrimaryKeyColumns))
			copy(conflict, goClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"go_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(goClassificationType, goClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goClassificationType, goClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert go_classification")
	}

	if !cached {
		goClassificationUpsertCacheMut.Lock()
		goClassificationUpsertCache[key] = cache
		goClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"go_classification\" WHERE \"go_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from go_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for go_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no goClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from go_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for go_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"go_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for go_classification")
	}

	if len(goClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoClassification(ctx, exec, o.GoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"go_classification\".* FROM \"go_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoClassificationSlice")
	}

	*o = slice

	return nil
}

// GoClassificationExists checks if the GoClassification row exists.
func GoClassificationExists(ctx context.Context, exec boil.ContextExecutor, goID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"go_classification\" where \"go_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, goID)
	}
	row := exec.QueryRowContext(ctx, sql, goID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if go_classification exists")
	}

	return exists, nil
}
