// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteComponent is an object representing the database table.
type SiteComponent struct {
	SitecompID   int64       `boil:"sitecomp_id" json:"sitecomp_id" toml:"sitecomp_id" yaml:"sitecomp_id"`
	SiteID       int64       `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	ComponentID  null.Int64  `boil:"component_id" json:"component_id,omitempty" toml:"component_id" yaml:"component_id,omitempty"`
	DomainID     null.Int64  `boil:"domain_id" json:"domain_id,omitempty" toml:"domain_id" yaml:"domain_id,omitempty"`
	SiteResidues null.String `boil:"site_residues" json:"site_residues,omitempty" toml:"site_residues" yaml:"site_residues,omitempty"`

	R *siteComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteComponentColumns = struct {
	SitecompID   string
	SiteID       string
	ComponentID  string
	DomainID     string
	SiteResidues string
}{
	SitecompID:   "sitecomp_id",
	SiteID:       "site_id",
	ComponentID:  "component_id",
	DomainID:     "domain_id",
	SiteResidues: "site_residues",
}

var SiteComponentTableColumns = struct {
	SitecompID   string
	SiteID       string
	ComponentID  string
	DomainID     string
	SiteResidues string
}{
	SitecompID:   "site_components.sitecomp_id",
	SiteID:       "site_components.site_id",
	ComponentID:  "site_components.component_id",
	DomainID:     "site_components.domain_id",
	SiteResidues: "site_components.site_residues",
}

// Generated where

var SiteComponentWhere = struct {
	SitecompID   whereHelperint64
	SiteID       whereHelperint64
	ComponentID  whereHelpernull_Int64
	DomainID     whereHelpernull_Int64
	SiteResidues whereHelpernull_String
}{
	SitecompID:   whereHelperint64{field: "\"site_components\".\"sitecomp_id\""},
	SiteID:       whereHelperint64{field: "\"site_components\".\"site_id\""},
	ComponentID:  whereHelpernull_Int64{field: "\"site_components\".\"component_id\""},
	DomainID:     whereHelpernull_Int64{field: "\"site_components\".\"domain_id\""},
	SiteResidues: whereHelpernull_String{field: "\"site_components\".\"site_residues\""},
}

// SiteComponentRels is where relationship names are stored.
var SiteComponentRels = struct {
	Site      string
	Domain    string
	Component string
}{
	Site:      "Site",
	Domain:    "Domain",
	Component: "Component",
}

// siteComponentR is where relationships are stored.
type siteComponentR struct {
	Site      *BindingSite       `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	Domain    *Domain            `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
	Component *ComponentSequence `boil:"Component" json:"Component" toml:"Component" yaml:"Component"`
}

// NewStruct creates a new relationship struct
func (*siteComponentR) NewStruct() *siteComponentR {
	return &siteComponentR{}
}

func (r *siteComponentR) GetSite() *BindingSite {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *siteComponentR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

func (r *siteComponentR) GetComponent() *ComponentSequence {
	if r == nil {
		return nil
	}
	return r.Component
}

// siteComponentL is where Load methods for each relationship are stored.
type siteComponentL struct{}

var (
	siteComponentAllColumns            = []string{"sitecomp_id", "site_id", "component_id", "domain_id", "site_residues"}
	siteComponentColumnsWithoutDefault = []string{"sitecomp_id", "site_id"}
	siteComponentColumnsWithDefault    = []string{"component_id", "domain_id", "site_residues"}
	siteComponentPrimaryKeyColumns     = []string{"sitecomp_id"}
	siteComponentGeneratedColumns      = []string{}
)

type (
	// SiteComponentSlice is an alias for a slice of pointers to SiteComponent.
	// This should almost always be used instead of []SiteComponent.
	SiteComponentSlice []*SiteComponent
	// SiteComponentHook is the signature for custom SiteComponent hook methods
	SiteComponentHook func(context.Context, boil.ContextExecutor, *SiteComponent) error

	siteComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteComponentType                 = reflect.TypeOf(&SiteComponent{})
	siteComponentMapping              = queries.MakeStructMapping(siteComponentType)
	siteComponentPrimaryKeyMapping, _ = queries.BindMapping(siteComponentType, siteComponentMapping, siteComponentPrimaryKeyColumns)
	siteComponentInsertCacheMut       sync.RWMutex
	siteComponentInsertCache          = make(map[string]insertCache)
	siteComponentUpdateCacheMut       sync.RWMutex
	siteComponentUpdateCache          = make(map[string]updateCache)
	siteComponentUpsertCacheMut       sync.RWMutex
	siteComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteComponentAfterSelectHooks []SiteComponentHook

var siteComponentBeforeInsertHooks []SiteComponentHook
var siteComponentAfterInsertHooks []SiteComponentHook

var siteComponentBeforeUpdateHooks []SiteComponentHook
var siteComponentAfterUpdateHooks []SiteComponentHook

var siteComponentBeforeDeleteHooks []SiteComponentHook
var siteComponentAfterDeleteHooks []SiteComponentHook

var siteComponentBeforeUpsertHooks []SiteComponentHook
var siteComponentAfterUpsertHooks []SiteComponentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteComponentHook registers your hook function for all future operations.
func AddSiteComponentHook(hookPoint boil.HookPoint, siteComponentHook SiteComponentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteComponentAfterSelectHooks = append(siteComponentAfterSelectHooks, siteComponentHook)
	case boil.BeforeInsertHook:
		siteComponentBeforeInsertHooks = append(siteComponentBeforeInsertHooks, siteComponentHook)
	case boil.AfterInsertHook:
		siteComponentAfterInsertHooks = append(siteComponentAfterInsertHooks, siteComponentHook)
	case boil.BeforeUpdateHook:
		siteComponentBeforeUpdateHooks = append(siteComponentBeforeUpdateHooks, siteComponentHook)
	case boil.AfterUpdateHook:
		siteComponentAfterUpdateHooks = append(siteComponentAfterUpdateHooks, siteComponentHook)
	case boil.BeforeDeleteHook:
		siteComponentBeforeDeleteHooks = append(siteComponentBeforeDeleteHooks, siteComponentHook)
	case boil.AfterDeleteHook:
		siteComponentAfterDeleteHooks = append(siteComponentAfterDeleteHooks, siteComponentHook)
	case boil.BeforeUpsertHook:
		siteComponentBeforeUpsertHooks = append(siteComponentBeforeUpsertHooks, siteComponentHook)
	case boil.AfterUpsertHook:
		siteComponentAfterUpsertHooks = append(siteComponentAfterUpsertHooks, siteComponentHook)
	}
}

// One returns a single siteComponent record from the query.
func (q siteComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteComponent, error) {
	o := &SiteComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteComponent records from the query.
func (q siteComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteComponentSlice, error) {
	var o []*SiteComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteComponent slice")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteComponent records in the query.
func (q siteComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_components rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_components exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *SiteComponent) Site(mods ...qm.QueryMod) bindingSiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return BindingSites(queryMods...)
}

// Domain pointed to by the foreign key.
func (o *SiteComponent) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"domain_id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// Component pointed to by the foreign key.
func (o *SiteComponent) Component(mods ...qm.QueryMod) componentSequenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"component_id\" = ?", o.ComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentSequences(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteComponentL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteComponent interface{}, mods queries.Applicator) error {
	var slice []*SiteComponent
	var object *SiteComponent

	if singular {
		object = maybeSiteComponent.(*SiteComponent)
	} else {
		slice = *maybeSiteComponent.(*[]*SiteComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &siteComponentR{}
		}
		args = append(args, object.SiteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteComponentR{}
			}

			for _, a := range args {
				if a == obj.SiteID {
					continue Outer
				}
			}

			args = append(args, obj.SiteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`binding_sites`),
		qm.WhereIn(`binding_sites.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BindingSite")
	}

	var resultSlice []*BindingSite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BindingSite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for binding_sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for binding_sites")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &bindingSiteR{}
		}
		foreign.R.SiteSiteComponents = append(foreign.R.SiteSiteComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.SiteID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &bindingSiteR{}
				}
				foreign.R.SiteSiteComponents = append(foreign.R.SiteSiteComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteComponentL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteComponent interface{}, mods queries.Applicator) error {
	var slice []*SiteComponent
	var object *SiteComponent

	if singular {
		object = maybeSiteComponent.(*SiteComponent)
	} else {
		slice = *maybeSiteComponent.(*[]*SiteComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &siteComponentR{}
		}
		if !queries.IsNil(object.DomainID) {
			args = append(args, object.DomainID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteComponentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DomainID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DomainID) {
				args = append(args, obj.DomainID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.SiteComponents = append(foreign.R.SiteComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DomainID, foreign.DomainID) {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.SiteComponents = append(foreign.R.SiteComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteComponentL) LoadComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteComponent interface{}, mods queries.Applicator) error {
	var slice []*SiteComponent
	var object *SiteComponent

	if singular {
		object = maybeSiteComponent.(*SiteComponent)
	} else {
		slice = *maybeSiteComponent.(*[]*SiteComponent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &siteComponentR{}
		}
		if !queries.IsNil(object.ComponentID) {
			args = append(args, object.ComponentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteComponentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ComponentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ComponentID) {
				args = append(args, obj.ComponentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_sequences`),
		qm.WhereIn(`component_sequences.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentSequence")
	}

	var resultSlice []*ComponentSequence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentSequence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_sequences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_sequences")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Component = foreign
		if foreign.R == nil {
			foreign.R = &componentSequenceR{}
		}
		foreign.R.ComponentSiteComponents = append(foreign.R.ComponentSiteComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ComponentID, foreign.ComponentID) {
				local.R.Component = foreign
				if foreign.R == nil {
					foreign.R = &componentSequenceR{}
				}
				foreign.R.ComponentSiteComponents = append(foreign.R.ComponentSiteComponents, local)
				break
			}
		}
	}

	return nil
}

// SetSite of the siteComponent to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteSiteComponents.
func (o *SiteComponent) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BindingSite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.SitecompID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.SiteID
	if o.R == nil {
		o.R = &siteComponentR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &bindingSiteR{
			SiteSiteComponents: SiteComponentSlice{o},
		}
	} else {
		related.R.SiteSiteComponents = append(related.R.SiteSiteComponents, o)
	}

	return nil
}

// SetDomain of the siteComponent to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.SiteComponents.
func (o *SiteComponent) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.DomainID, o.SitecompID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DomainID, related.DomainID)
	if o.R == nil {
		o.R = &siteComponentR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			SiteComponents: SiteComponentSlice{o},
		}
	} else {
		related.R.SiteComponents = append(related.R.SiteComponents, o)
	}

	return nil
}

// RemoveDomain relationship.
// Sets o.R.Domain to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SiteComponent) RemoveDomain(ctx context.Context, exec boil.ContextExecutor, related *Domain) error {
	var err error

	queries.SetScanner(&o.DomainID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("domain_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Domain = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SiteComponents {
		if queries.Equal(o.DomainID, ri.DomainID) {
			continue
		}

		ln := len(related.R.SiteComponents)
		if ln > 1 && i < ln-1 {
			related.R.SiteComponents[i] = related.R.SiteComponents[ln-1]
		}
		related.R.SiteComponents = related.R.SiteComponents[:ln-1]
		break
	}
	return nil
}

// SetComponent of the siteComponent to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentSiteComponents.
func (o *SiteComponent) SetComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentSequence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
		strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ComponentID, o.SitecompID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ComponentID, related.ComponentID)
	if o.R == nil {
		o.R = &siteComponentR{
			Component: related,
		}
	} else {
		o.R.Component = related
	}

	if related.R == nil {
		related.R = &componentSequenceR{
			ComponentSiteComponents: SiteComponentSlice{o},
		}
	} else {
		related.R.ComponentSiteComponents = append(related.R.ComponentSiteComponents, o)
	}

	return nil
}

// RemoveComponent relationship.
// Sets o.R.Component to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SiteComponent) RemoveComponent(ctx context.Context, exec boil.ContextExecutor, related *ComponentSequence) error {
	var err error

	queries.SetScanner(&o.ComponentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("component_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Component = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ComponentSiteComponents {
		if queries.Equal(o.ComponentID, ri.ComponentID) {
			continue
		}

		ln := len(related.R.ComponentSiteComponents)
		if ln > 1 && i < ln-1 {
			related.R.ComponentSiteComponents[i] = related.R.ComponentSiteComponents[ln-1]
		}
		related.R.ComponentSiteComponents = related.R.ComponentSiteComponents[:ln-1]
		break
	}
	return nil
}

// SiteComponents retrieves all the records using an executor.
func SiteComponents(mods ...qm.QueryMod) siteComponentQuery {
	mods = append(mods, qm.From("\"site_components\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"site_components\".*"})
	}

	return siteComponentQuery{q}
}

// FindSiteComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteComponent(ctx context.Context, exec boil.ContextExecutor, sitecompID int64, selectCols ...string) (*SiteComponent, error) {
	siteComponentObj := &SiteComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"site_components\" where \"sitecomp_id\"=?", sel,
	)

	q := queries.Raw(query, sitecompID)

	err := q.Bind(ctx, exec, siteComponentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_components")
	}

	if err = siteComponentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteComponentObj, err
	}

	return siteComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_components provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteComponentInsertCacheMut.RLock()
	cache, cached := siteComponentInsertCache[key]
	siteComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteComponentAllColumns,
			siteComponentColumnsWithDefault,
			siteComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteComponentType, siteComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteComponentType, siteComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"site_components\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"site_components\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_components")
	}

	if !cached {
		siteComponentInsertCacheMut.Lock()
		siteComponentInsertCache[key] = cache
		siteComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteComponentUpdateCacheMut.RLock()
	cache, cached := siteComponentUpdateCache[key]
	siteComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteComponentAllColumns,
			siteComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"site_components\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteComponentType, siteComponentMapping, append(wl, siteComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_components")
	}

	if !cached {
		siteComponentUpdateCacheMut.Lock()
		siteComponentUpdateCache[key] = cache
		siteComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_components")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"site_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteComponent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_components provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteComponentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteComponentUpsertCacheMut.RLock()
	cache, cached := siteComponentUpsertCache[key]
	siteComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			siteComponentAllColumns,
			siteComponentColumnsWithDefault,
			siteComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			siteComponentAllColumns,
			siteComponentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert site_components, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(siteComponentPrimaryKeyColumns))
			copy(conflict, siteComponentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"site_components\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(siteComponentType, siteComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteComponentType, siteComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert site_components")
	}

	if !cached {
		siteComponentUpsertCacheMut.Lock()
		siteComponentUpsertCache[key] = cache
		siteComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"site_components\" WHERE \"sitecomp_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_components")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"site_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_components")
	}

	if len(siteComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteComponent(ctx, exec, o.SitecompID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"site_components\".* FROM \"site_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteComponentSlice")
	}

	*o = slice

	return nil
}

// SiteComponentExists checks if the SiteComponent row exists.
func SiteComponentExists(ctx context.Context, exec boil.ContextExecutor, sitecompID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"site_components\" where \"sitecomp_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sitecompID)
	}
	row := exec.QueryRowContext(ctx, sql, sitecompID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_components exists")
	}

	return exists, nil
}
