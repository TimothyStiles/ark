// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProteinClassification is an object representing the database table.
type ProteinClassification struct {
	ProteinClassID   int64       `boil:"protein_class_id" json:"protein_class_id" toml:"protein_class_id" yaml:"protein_class_id"`
	ParentID         null.Int64  `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	PrefName         null.String `boil:"pref_name" json:"pref_name,omitempty" toml:"pref_name" yaml:"pref_name,omitempty"`
	ShortName        null.String `boil:"short_name" json:"short_name,omitempty" toml:"short_name" yaml:"short_name,omitempty"`
	ProteinClassDesc string      `boil:"protein_class_desc" json:"protein_class_desc" toml:"protein_class_desc" yaml:"protein_class_desc"`
	Definition       null.String `boil:"definition" json:"definition,omitempty" toml:"definition" yaml:"definition,omitempty"`
	ClassLevel       int64       `boil:"class_level" json:"class_level" toml:"class_level" yaml:"class_level"`

	R *proteinClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L proteinClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProteinClassificationColumns = struct {
	ProteinClassID   string
	ParentID         string
	PrefName         string
	ShortName        string
	ProteinClassDesc string
	Definition       string
	ClassLevel       string
}{
	ProteinClassID:   "protein_class_id",
	ParentID:         "parent_id",
	PrefName:         "pref_name",
	ShortName:        "short_name",
	ProteinClassDesc: "protein_class_desc",
	Definition:       "definition",
	ClassLevel:       "class_level",
}

var ProteinClassificationTableColumns = struct {
	ProteinClassID   string
	ParentID         string
	PrefName         string
	ShortName        string
	ProteinClassDesc string
	Definition       string
	ClassLevel       string
}{
	ProteinClassID:   "protein_classification.protein_class_id",
	ParentID:         "protein_classification.parent_id",
	PrefName:         "protein_classification.pref_name",
	ShortName:        "protein_classification.short_name",
	ProteinClassDesc: "protein_classification.protein_class_desc",
	Definition:       "protein_classification.definition",
	ClassLevel:       "protein_classification.class_level",
}

// Generated where

var ProteinClassificationWhere = struct {
	ProteinClassID   whereHelperint64
	ParentID         whereHelpernull_Int64
	PrefName         whereHelpernull_String
	ShortName        whereHelpernull_String
	ProteinClassDesc whereHelperstring
	Definition       whereHelpernull_String
	ClassLevel       whereHelperint64
}{
	ProteinClassID:   whereHelperint64{field: "\"protein_classification\".\"protein_class_id\""},
	ParentID:         whereHelpernull_Int64{field: "\"protein_classification\".\"parent_id\""},
	PrefName:         whereHelpernull_String{field: "\"protein_classification\".\"pref_name\""},
	ShortName:        whereHelpernull_String{field: "\"protein_classification\".\"short_name\""},
	ProteinClassDesc: whereHelperstring{field: "\"protein_classification\".\"protein_class_desc\""},
	Definition:       whereHelpernull_String{field: "\"protein_classification\".\"definition\""},
	ClassLevel:       whereHelperint64{field: "\"protein_classification\".\"class_level\""},
}

// ProteinClassificationRels is where relationship names are stored.
var ProteinClassificationRels = struct {
	ProteinClassComponentClasses     string
	ProteinClassProteinClassSynonyms string
}{
	ProteinClassComponentClasses:     "ProteinClassComponentClasses",
	ProteinClassProteinClassSynonyms: "ProteinClassProteinClassSynonyms",
}

// proteinClassificationR is where relationships are stored.
type proteinClassificationR struct {
	ProteinClassComponentClasses     ComponentClassSlice      `boil:"ProteinClassComponentClasses" json:"ProteinClassComponentClasses" toml:"ProteinClassComponentClasses" yaml:"ProteinClassComponentClasses"`
	ProteinClassProteinClassSynonyms ProteinClassSynonymSlice `boil:"ProteinClassProteinClassSynonyms" json:"ProteinClassProteinClassSynonyms" toml:"ProteinClassProteinClassSynonyms" yaml:"ProteinClassProteinClassSynonyms"`
}

// NewStruct creates a new relationship struct
func (*proteinClassificationR) NewStruct() *proteinClassificationR {
	return &proteinClassificationR{}
}

func (r *proteinClassificationR) GetProteinClassComponentClasses() ComponentClassSlice {
	if r == nil {
		return nil
	}
	return r.ProteinClassComponentClasses
}

func (r *proteinClassificationR) GetProteinClassProteinClassSynonyms() ProteinClassSynonymSlice {
	if r == nil {
		return nil
	}
	return r.ProteinClassProteinClassSynonyms
}

// proteinClassificationL is where Load methods for each relationship are stored.
type proteinClassificationL struct{}

var (
	proteinClassificationAllColumns            = []string{"protein_class_id", "parent_id", "pref_name", "short_name", "protein_class_desc", "definition", "class_level"}
	proteinClassificationColumnsWithoutDefault = []string{"protein_class_id", "protein_class_desc", "class_level"}
	proteinClassificationColumnsWithDefault    = []string{"parent_id", "pref_name", "short_name", "definition"}
	proteinClassificationPrimaryKeyColumns     = []string{"protein_class_id"}
	proteinClassificationGeneratedColumns      = []string{}
)

type (
	// ProteinClassificationSlice is an alias for a slice of pointers to ProteinClassification.
	// This should almost always be used instead of []ProteinClassification.
	ProteinClassificationSlice []*ProteinClassification
	// ProteinClassificationHook is the signature for custom ProteinClassification hook methods
	ProteinClassificationHook func(context.Context, boil.ContextExecutor, *ProteinClassification) error

	proteinClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	proteinClassificationType                 = reflect.TypeOf(&ProteinClassification{})
	proteinClassificationMapping              = queries.MakeStructMapping(proteinClassificationType)
	proteinClassificationPrimaryKeyMapping, _ = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, proteinClassificationPrimaryKeyColumns)
	proteinClassificationInsertCacheMut       sync.RWMutex
	proteinClassificationInsertCache          = make(map[string]insertCache)
	proteinClassificationUpdateCacheMut       sync.RWMutex
	proteinClassificationUpdateCache          = make(map[string]updateCache)
	proteinClassificationUpsertCacheMut       sync.RWMutex
	proteinClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var proteinClassificationAfterSelectHooks []ProteinClassificationHook

var proteinClassificationBeforeInsertHooks []ProteinClassificationHook
var proteinClassificationAfterInsertHooks []ProteinClassificationHook

var proteinClassificationBeforeUpdateHooks []ProteinClassificationHook
var proteinClassificationAfterUpdateHooks []ProteinClassificationHook

var proteinClassificationBeforeDeleteHooks []ProteinClassificationHook
var proteinClassificationAfterDeleteHooks []ProteinClassificationHook

var proteinClassificationBeforeUpsertHooks []ProteinClassificationHook
var proteinClassificationAfterUpsertHooks []ProteinClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProteinClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProteinClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProteinClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProteinClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProteinClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProteinClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProteinClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProteinClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProteinClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProteinClassificationHook registers your hook function for all future operations.
func AddProteinClassificationHook(hookPoint boil.HookPoint, proteinClassificationHook ProteinClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		proteinClassificationAfterSelectHooks = append(proteinClassificationAfterSelectHooks, proteinClassificationHook)
	case boil.BeforeInsertHook:
		proteinClassificationBeforeInsertHooks = append(proteinClassificationBeforeInsertHooks, proteinClassificationHook)
	case boil.AfterInsertHook:
		proteinClassificationAfterInsertHooks = append(proteinClassificationAfterInsertHooks, proteinClassificationHook)
	case boil.BeforeUpdateHook:
		proteinClassificationBeforeUpdateHooks = append(proteinClassificationBeforeUpdateHooks, proteinClassificationHook)
	case boil.AfterUpdateHook:
		proteinClassificationAfterUpdateHooks = append(proteinClassificationAfterUpdateHooks, proteinClassificationHook)
	case boil.BeforeDeleteHook:
		proteinClassificationBeforeDeleteHooks = append(proteinClassificationBeforeDeleteHooks, proteinClassificationHook)
	case boil.AfterDeleteHook:
		proteinClassificationAfterDeleteHooks = append(proteinClassificationAfterDeleteHooks, proteinClassificationHook)
	case boil.BeforeUpsertHook:
		proteinClassificationBeforeUpsertHooks = append(proteinClassificationBeforeUpsertHooks, proteinClassificationHook)
	case boil.AfterUpsertHook:
		proteinClassificationAfterUpsertHooks = append(proteinClassificationAfterUpsertHooks, proteinClassificationHook)
	}
}

// One returns a single proteinClassification record from the query.
func (q proteinClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProteinClassification, error) {
	o := &ProteinClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for protein_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProteinClassification records from the query.
func (q proteinClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProteinClassificationSlice, error) {
	var o []*ProteinClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProteinClassification slice")
	}

	if len(proteinClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProteinClassification records in the query.
func (q proteinClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count protein_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q proteinClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if protein_classification exists")
	}

	return count > 0, nil
}

// ProteinClassComponentClasses retrieves all the component_class's ComponentClasses with an executor via protein_class_id column.
func (o *ProteinClassification) ProteinClassComponentClasses(mods ...qm.QueryMod) componentClassQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"component_class\".\"protein_class_id\"=?", o.ProteinClassID),
	)

	return ComponentClasses(queryMods...)
}

// ProteinClassProteinClassSynonyms retrieves all the protein_class_synonym's ProteinClassSynonyms with an executor via protein_class_id column.
func (o *ProteinClassification) ProteinClassProteinClassSynonyms(mods ...qm.QueryMod) proteinClassSynonymQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"protein_class_synonyms\".\"protein_class_id\"=?", o.ProteinClassID),
	)

	return ProteinClassSynonyms(queryMods...)
}

// LoadProteinClassComponentClasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (proteinClassificationL) LoadProteinClassComponentClasses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProteinClassification interface{}, mods queries.Applicator) error {
	var slice []*ProteinClassification
	var object *ProteinClassification

	if singular {
		object = maybeProteinClassification.(*ProteinClassification)
	} else {
		slice = *maybeProteinClassification.(*[]*ProteinClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proteinClassificationR{}
		}
		args = append(args, object.ProteinClassID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proteinClassificationR{}
			}

			for _, a := range args {
				if a == obj.ProteinClassID {
					continue Outer
				}
			}

			args = append(args, obj.ProteinClassID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_class`),
		qm.WhereIn(`component_class.protein_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load component_class")
	}

	var resultSlice []*ComponentClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice component_class")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on component_class")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_class")
	}

	if len(componentClassAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProteinClassComponentClasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &componentClassR{}
			}
			foreign.R.ProteinClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProteinClassID == foreign.ProteinClassID {
				local.R.ProteinClassComponentClasses = append(local.R.ProteinClassComponentClasses, foreign)
				if foreign.R == nil {
					foreign.R = &componentClassR{}
				}
				foreign.R.ProteinClass = local
				break
			}
		}
	}

	return nil
}

// LoadProteinClassProteinClassSynonyms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (proteinClassificationL) LoadProteinClassProteinClassSynonyms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProteinClassification interface{}, mods queries.Applicator) error {
	var slice []*ProteinClassification
	var object *ProteinClassification

	if singular {
		object = maybeProteinClassification.(*ProteinClassification)
	} else {
		slice = *maybeProteinClassification.(*[]*ProteinClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proteinClassificationR{}
		}
		args = append(args, object.ProteinClassID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proteinClassificationR{}
			}

			for _, a := range args {
				if a == obj.ProteinClassID {
					continue Outer
				}
			}

			args = append(args, obj.ProteinClassID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`protein_class_synonyms`),
		qm.WhereIn(`protein_class_synonyms.protein_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load protein_class_synonyms")
	}

	var resultSlice []*ProteinClassSynonym
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice protein_class_synonyms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on protein_class_synonyms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for protein_class_synonyms")
	}

	if len(proteinClassSynonymAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProteinClassProteinClassSynonyms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &proteinClassSynonymR{}
			}
			foreign.R.ProteinClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProteinClassID == foreign.ProteinClassID {
				local.R.ProteinClassProteinClassSynonyms = append(local.R.ProteinClassProteinClassSynonyms, foreign)
				if foreign.R == nil {
					foreign.R = &proteinClassSynonymR{}
				}
				foreign.R.ProteinClass = local
				break
			}
		}
	}

	return nil
}

// AddProteinClassComponentClasses adds the given related objects to the existing relationships
// of the protein_classification, optionally inserting them as new records.
// Appends related to o.R.ProteinClassComponentClasses.
// Sets related.R.ProteinClass appropriately.
func (o *ProteinClassification) AddProteinClassComponentClasses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ComponentClass) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProteinClassID = o.ProteinClassID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"component_class\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"protein_class_id"}),
				strmangle.WhereClause("\"", "\"", 0, componentClassPrimaryKeyColumns),
			)
			values := []interface{}{o.ProteinClassID, rel.CompClassID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProteinClassID = o.ProteinClassID
		}
	}

	if o.R == nil {
		o.R = &proteinClassificationR{
			ProteinClassComponentClasses: related,
		}
	} else {
		o.R.ProteinClassComponentClasses = append(o.R.ProteinClassComponentClasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &componentClassR{
				ProteinClass: o,
			}
		} else {
			rel.R.ProteinClass = o
		}
	}
	return nil
}

// AddProteinClassProteinClassSynonyms adds the given related objects to the existing relationships
// of the protein_classification, optionally inserting them as new records.
// Appends related to o.R.ProteinClassProteinClassSynonyms.
// Sets related.R.ProteinClass appropriately.
func (o *ProteinClassification) AddProteinClassProteinClassSynonyms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProteinClassSynonym) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProteinClassID = o.ProteinClassID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"protein_class_synonyms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"protein_class_id"}),
				strmangle.WhereClause("\"", "\"", 0, proteinClassSynonymPrimaryKeyColumns),
			)
			values := []interface{}{o.ProteinClassID, rel.ProtclasssynID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProteinClassID = o.ProteinClassID
		}
	}

	if o.R == nil {
		o.R = &proteinClassificationR{
			ProteinClassProteinClassSynonyms: related,
		}
	} else {
		o.R.ProteinClassProteinClassSynonyms = append(o.R.ProteinClassProteinClassSynonyms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &proteinClassSynonymR{
				ProteinClass: o,
			}
		} else {
			rel.R.ProteinClass = o
		}
	}
	return nil
}

// ProteinClassifications retrieves all the records using an executor.
func ProteinClassifications(mods ...qm.QueryMod) proteinClassificationQuery {
	mods = append(mods, qm.From("\"protein_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"protein_classification\".*"})
	}

	return proteinClassificationQuery{q}
}

// FindProteinClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProteinClassification(ctx context.Context, exec boil.ContextExecutor, proteinClassID int64, selectCols ...string) (*ProteinClassification, error) {
	proteinClassificationObj := &ProteinClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"protein_classification\" where \"protein_class_id\"=?", sel,
	)

	q := queries.Raw(query, proteinClassID)

	err := q.Bind(ctx, exec, proteinClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from protein_classification")
	}

	if err = proteinClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return proteinClassificationObj, err
	}

	return proteinClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProteinClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	proteinClassificationInsertCacheMut.RLock()
	cache, cached := proteinClassificationInsertCache[key]
	proteinClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			proteinClassificationAllColumns,
			proteinClassificationColumnsWithDefault,
			proteinClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"protein_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"protein_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into protein_classification")
	}

	if !cached {
		proteinClassificationInsertCacheMut.Lock()
		proteinClassificationInsertCache[key] = cache
		proteinClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProteinClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProteinClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	proteinClassificationUpdateCacheMut.RLock()
	cache, cached := proteinClassificationUpdateCache[key]
	proteinClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			proteinClassificationAllColumns,
			proteinClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update protein_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"protein_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, proteinClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, append(wl, proteinClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update protein_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for protein_classification")
	}

	if !cached {
		proteinClassificationUpdateCacheMut.Lock()
		proteinClassificationUpdateCache[key] = cache
		proteinClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q proteinClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for protein_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for protein_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProteinClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"protein_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in proteinClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all proteinClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProteinClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	proteinClassificationUpsertCacheMut.RLock()
	cache, cached := proteinClassificationUpsertCache[key]
	proteinClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			proteinClassificationAllColumns,
			proteinClassificationColumnsWithDefault,
			proteinClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			proteinClassificationAllColumns,
			proteinClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert protein_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(proteinClassificationPrimaryKeyColumns))
			copy(conflict, proteinClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"protein_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(proteinClassificationType, proteinClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert protein_classification")
	}

	if !cached {
		proteinClassificationUpsertCacheMut.Lock()
		proteinClassificationUpsertCache[key] = cache
		proteinClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProteinClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProteinClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProteinClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), proteinClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"protein_classification\" WHERE \"protein_class_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from protein_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for protein_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q proteinClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no proteinClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protein_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProteinClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(proteinClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"protein_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proteinClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_classification")
	}

	if len(proteinClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProteinClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProteinClassification(ctx, exec, o.ProteinClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProteinClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProteinClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"protein_classification\".* FROM \"protein_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProteinClassificationSlice")
	}

	*o = slice

	return nil
}

// ProteinClassificationExists checks if the ProteinClassification row exists.
func ProteinClassificationExists(ctx context.Context, exec boil.ContextExecutor, proteinClassID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"protein_classification\" where \"protein_class_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, proteinClassID)
	}
	row := exec.QueryRowContext(ctx, sql, proteinClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if protein_classification exists")
	}

	return exists, nil
}
