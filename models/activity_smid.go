// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ActivitySmid is an object representing the database table.
type ActivitySmid struct {
	Smid int64 `boil:"smid" json:"smid" toml:"smid" yaml:"smid"`

	R *activitySmidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activitySmidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActivitySmidColumns = struct {
	Smid string
}{
	Smid: "smid",
}

var ActivitySmidTableColumns = struct {
	Smid string
}{
	Smid: "activity_smid.smid",
}

// Generated where

var ActivitySmidWhere = struct {
	Smid whereHelperint64
}{
	Smid: whereHelperint64{field: "\"activity_smid\".\"smid\""},
}

// ActivitySmidRels is where relationship names are stored.
var ActivitySmidRels = struct {
	SmidActivitySupps    string
	SmidActivitySuppMaps string
}{
	SmidActivitySupps:    "SmidActivitySupps",
	SmidActivitySuppMaps: "SmidActivitySuppMaps",
}

// activitySmidR is where relationships are stored.
type activitySmidR struct {
	SmidActivitySupps    ActivitySuppSlice    `boil:"SmidActivitySupps" json:"SmidActivitySupps" toml:"SmidActivitySupps" yaml:"SmidActivitySupps"`
	SmidActivitySuppMaps ActivitySuppMapSlice `boil:"SmidActivitySuppMaps" json:"SmidActivitySuppMaps" toml:"SmidActivitySuppMaps" yaml:"SmidActivitySuppMaps"`
}

// NewStruct creates a new relationship struct
func (*activitySmidR) NewStruct() *activitySmidR {
	return &activitySmidR{}
}

func (r *activitySmidR) GetSmidActivitySupps() ActivitySuppSlice {
	if r == nil {
		return nil
	}
	return r.SmidActivitySupps
}

func (r *activitySmidR) GetSmidActivitySuppMaps() ActivitySuppMapSlice {
	if r == nil {
		return nil
	}
	return r.SmidActivitySuppMaps
}

// activitySmidL is where Load methods for each relationship are stored.
type activitySmidL struct{}

var (
	activitySmidAllColumns            = []string{"smid"}
	activitySmidColumnsWithoutDefault = []string{"smid"}
	activitySmidColumnsWithDefault    = []string{}
	activitySmidPrimaryKeyColumns     = []string{"smid"}
	activitySmidGeneratedColumns      = []string{}
)

type (
	// ActivitySmidSlice is an alias for a slice of pointers to ActivitySmid.
	// This should almost always be used instead of []ActivitySmid.
	ActivitySmidSlice []*ActivitySmid
	// ActivitySmidHook is the signature for custom ActivitySmid hook methods
	ActivitySmidHook func(context.Context, boil.ContextExecutor, *ActivitySmid) error

	activitySmidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activitySmidType                 = reflect.TypeOf(&ActivitySmid{})
	activitySmidMapping              = queries.MakeStructMapping(activitySmidType)
	activitySmidPrimaryKeyMapping, _ = queries.BindMapping(activitySmidType, activitySmidMapping, activitySmidPrimaryKeyColumns)
	activitySmidInsertCacheMut       sync.RWMutex
	activitySmidInsertCache          = make(map[string]insertCache)
	activitySmidUpdateCacheMut       sync.RWMutex
	activitySmidUpdateCache          = make(map[string]updateCache)
	activitySmidUpsertCacheMut       sync.RWMutex
	activitySmidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activitySmidAfterSelectHooks []ActivitySmidHook

var activitySmidBeforeInsertHooks []ActivitySmidHook
var activitySmidAfterInsertHooks []ActivitySmidHook

var activitySmidBeforeUpdateHooks []ActivitySmidHook
var activitySmidAfterUpdateHooks []ActivitySmidHook

var activitySmidBeforeDeleteHooks []ActivitySmidHook
var activitySmidAfterDeleteHooks []ActivitySmidHook

var activitySmidBeforeUpsertHooks []ActivitySmidHook
var activitySmidAfterUpsertHooks []ActivitySmidHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActivitySmid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActivitySmid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActivitySmid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActivitySmid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActivitySmid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActivitySmid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActivitySmid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActivitySmid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActivitySmid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySmidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActivitySmidHook registers your hook function for all future operations.
func AddActivitySmidHook(hookPoint boil.HookPoint, activitySmidHook ActivitySmidHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activitySmidAfterSelectHooks = append(activitySmidAfterSelectHooks, activitySmidHook)
	case boil.BeforeInsertHook:
		activitySmidBeforeInsertHooks = append(activitySmidBeforeInsertHooks, activitySmidHook)
	case boil.AfterInsertHook:
		activitySmidAfterInsertHooks = append(activitySmidAfterInsertHooks, activitySmidHook)
	case boil.BeforeUpdateHook:
		activitySmidBeforeUpdateHooks = append(activitySmidBeforeUpdateHooks, activitySmidHook)
	case boil.AfterUpdateHook:
		activitySmidAfterUpdateHooks = append(activitySmidAfterUpdateHooks, activitySmidHook)
	case boil.BeforeDeleteHook:
		activitySmidBeforeDeleteHooks = append(activitySmidBeforeDeleteHooks, activitySmidHook)
	case boil.AfterDeleteHook:
		activitySmidAfterDeleteHooks = append(activitySmidAfterDeleteHooks, activitySmidHook)
	case boil.BeforeUpsertHook:
		activitySmidBeforeUpsertHooks = append(activitySmidBeforeUpsertHooks, activitySmidHook)
	case boil.AfterUpsertHook:
		activitySmidAfterUpsertHooks = append(activitySmidAfterUpsertHooks, activitySmidHook)
	}
}

// One returns a single activitySmid record from the query.
func (q activitySmidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActivitySmid, error) {
	o := &ActivitySmid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for activity_smid")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActivitySmid records from the query.
func (q activitySmidQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActivitySmidSlice, error) {
	var o []*ActivitySmid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActivitySmid slice")
	}

	if len(activitySmidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActivitySmid records in the query.
func (q activitySmidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count activity_smid rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q activitySmidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if activity_smid exists")
	}

	return count > 0, nil
}

// SmidActivitySupps retrieves all the activity_supp's ActivitySupps with an executor via smid column.
func (o *ActivitySmid) SmidActivitySupps(mods ...qm.QueryMod) activitySuppQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activity_supp\".\"smid\"=?", o.Smid),
	)

	return ActivitySupps(queryMods...)
}

// SmidActivitySuppMaps retrieves all the activity_supp_map's ActivitySuppMaps with an executor via smid column.
func (o *ActivitySmid) SmidActivitySuppMaps(mods ...qm.QueryMod) activitySuppMapQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activity_supp_map\".\"smid\"=?", o.Smid),
	)

	return ActivitySuppMaps(queryMods...)
}

// LoadSmidActivitySupps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (activitySmidL) LoadSmidActivitySupps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivitySmid interface{}, mods queries.Applicator) error {
	var slice []*ActivitySmid
	var object *ActivitySmid

	if singular {
		object = maybeActivitySmid.(*ActivitySmid)
	} else {
		slice = *maybeActivitySmid.(*[]*ActivitySmid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activitySmidR{}
		}
		args = append(args, object.Smid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activitySmidR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Smid) {
					continue Outer
				}
			}

			args = append(args, obj.Smid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activity_supp`),
		qm.WhereIn(`activity_supp.smid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activity_supp")
	}

	var resultSlice []*ActivitySupp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activity_supp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activity_supp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activity_supp")
	}

	if len(activitySuppAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SmidActivitySupps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activitySuppR{}
			}
			foreign.R.SmidActivitySmid = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Smid, foreign.Smid) {
				local.R.SmidActivitySupps = append(local.R.SmidActivitySupps, foreign)
				if foreign.R == nil {
					foreign.R = &activitySuppR{}
				}
				foreign.R.SmidActivitySmid = local
				break
			}
		}
	}

	return nil
}

// LoadSmidActivitySuppMaps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (activitySmidL) LoadSmidActivitySuppMaps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivitySmid interface{}, mods queries.Applicator) error {
	var slice []*ActivitySmid
	var object *ActivitySmid

	if singular {
		object = maybeActivitySmid.(*ActivitySmid)
	} else {
		slice = *maybeActivitySmid.(*[]*ActivitySmid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activitySmidR{}
		}
		args = append(args, object.Smid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activitySmidR{}
			}

			for _, a := range args {
				if a == obj.Smid {
					continue Outer
				}
			}

			args = append(args, obj.Smid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activity_supp_map`),
		qm.WhereIn(`activity_supp_map.smid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activity_supp_map")
	}

	var resultSlice []*ActivitySuppMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activity_supp_map")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activity_supp_map")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activity_supp_map")
	}

	if len(activitySuppMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SmidActivitySuppMaps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activitySuppMapR{}
			}
			foreign.R.SmidActivitySmid = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Smid == foreign.Smid {
				local.R.SmidActivitySuppMaps = append(local.R.SmidActivitySuppMaps, foreign)
				if foreign.R == nil {
					foreign.R = &activitySuppMapR{}
				}
				foreign.R.SmidActivitySmid = local
				break
			}
		}
	}

	return nil
}

// AddSmidActivitySupps adds the given related objects to the existing relationships
// of the activity_smid, optionally inserting them as new records.
// Appends related to o.R.SmidActivitySupps.
// Sets related.R.SmidActivitySmid appropriately.
func (o *ActivitySmid) AddSmidActivitySupps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActivitySupp) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Smid, o.Smid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activity_supp\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"smid"}),
				strmangle.WhereClause("\"", "\"", 0, activitySuppPrimaryKeyColumns),
			)
			values := []interface{}{o.Smid, rel.AsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Smid, o.Smid)
		}
	}

	if o.R == nil {
		o.R = &activitySmidR{
			SmidActivitySupps: related,
		}
	} else {
		o.R.SmidActivitySupps = append(o.R.SmidActivitySupps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activitySuppR{
				SmidActivitySmid: o,
			}
		} else {
			rel.R.SmidActivitySmid = o
		}
	}
	return nil
}

// SetSmidActivitySupps removes all previously related items of the
// activity_smid replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SmidActivitySmid's SmidActivitySupps accordingly.
// Replaces o.R.SmidActivitySupps with related.
// Sets related.R.SmidActivitySmid's SmidActivitySupps accordingly.
func (o *ActivitySmid) SetSmidActivitySupps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActivitySupp) error {
	query := "update \"activity_supp\" set \"smid\" = null where \"smid\" = ?"
	values := []interface{}{o.Smid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SmidActivitySupps {
			queries.SetScanner(&rel.Smid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SmidActivitySmid = nil
		}
		o.R.SmidActivitySupps = nil
	}

	return o.AddSmidActivitySupps(ctx, exec, insert, related...)
}

// RemoveSmidActivitySupps relationships from objects passed in.
// Removes related items from R.SmidActivitySupps (uses pointer comparison, removal does not keep order)
// Sets related.R.SmidActivitySmid.
func (o *ActivitySmid) RemoveSmidActivitySupps(ctx context.Context, exec boil.ContextExecutor, related ...*ActivitySupp) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Smid, nil)
		if rel.R != nil {
			rel.R.SmidActivitySmid = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("smid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SmidActivitySupps {
			if rel != ri {
				continue
			}

			ln := len(o.R.SmidActivitySupps)
			if ln > 1 && i < ln-1 {
				o.R.SmidActivitySupps[i] = o.R.SmidActivitySupps[ln-1]
			}
			o.R.SmidActivitySupps = o.R.SmidActivitySupps[:ln-1]
			break
		}
	}

	return nil
}

// AddSmidActivitySuppMaps adds the given related objects to the existing relationships
// of the activity_smid, optionally inserting them as new records.
// Appends related to o.R.SmidActivitySuppMaps.
// Sets related.R.SmidActivitySmid appropriately.
func (o *ActivitySmid) AddSmidActivitySuppMaps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActivitySuppMap) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Smid = o.Smid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activity_supp_map\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"smid"}),
				strmangle.WhereClause("\"", "\"", 0, activitySuppMapPrimaryKeyColumns),
			)
			values := []interface{}{o.Smid, rel.ActsmID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Smid = o.Smid
		}
	}

	if o.R == nil {
		o.R = &activitySmidR{
			SmidActivitySuppMaps: related,
		}
	} else {
		o.R.SmidActivitySuppMaps = append(o.R.SmidActivitySuppMaps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activitySuppMapR{
				SmidActivitySmid: o,
			}
		} else {
			rel.R.SmidActivitySmid = o
		}
	}
	return nil
}

// ActivitySmids retrieves all the records using an executor.
func ActivitySmids(mods ...qm.QueryMod) activitySmidQuery {
	mods = append(mods, qm.From("\"activity_smid\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"activity_smid\".*"})
	}

	return activitySmidQuery{q}
}

// FindActivitySmid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActivitySmid(ctx context.Context, exec boil.ContextExecutor, smid int64, selectCols ...string) (*ActivitySmid, error) {
	activitySmidObj := &ActivitySmid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"activity_smid\" where \"smid\"=?", sel,
	)

	q := queries.Raw(query, smid)

	err := q.Bind(ctx, exec, activitySmidObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from activity_smid")
	}

	if err = activitySmidObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activitySmidObj, err
	}

	return activitySmidObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActivitySmid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_smid provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySmidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activitySmidInsertCacheMut.RLock()
	cache, cached := activitySmidInsertCache[key]
	activitySmidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activitySmidAllColumns,
			activitySmidColumnsWithDefault,
			activitySmidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activitySmidType, activitySmidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activitySmidType, activitySmidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"activity_smid\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"activity_smid\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into activity_smid")
	}

	if !cached {
		activitySmidInsertCacheMut.Lock()
		activitySmidInsertCache[key] = cache
		activitySmidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActivitySmid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActivitySmid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activitySmidUpdateCacheMut.RLock()
	cache, cached := activitySmidUpdateCache[key]
	activitySmidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activitySmidAllColumns,
			activitySmidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update activity_smid, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"activity_smid\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, activitySmidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activitySmidType, activitySmidMapping, append(wl, activitySmidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update activity_smid row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for activity_smid")
	}

	if !cached {
		activitySmidUpdateCacheMut.Lock()
		activitySmidUpdateCache[key] = cache
		activitySmidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q activitySmidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for activity_smid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for activity_smid")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActivitySmidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySmidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"activity_smid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySmidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activitySmid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activitySmid")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActivitySmid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_smid provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySmidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activitySmidUpsertCacheMut.RLock()
	cache, cached := activitySmidUpsertCache[key]
	activitySmidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activitySmidAllColumns,
			activitySmidColumnsWithDefault,
			activitySmidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			activitySmidAllColumns,
			activitySmidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert activity_smid, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(activitySmidPrimaryKeyColumns))
			copy(conflict, activitySmidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"activity_smid\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(activitySmidType, activitySmidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activitySmidType, activitySmidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert activity_smid")
	}

	if !cached {
		activitySmidUpsertCacheMut.Lock()
		activitySmidUpsertCache[key] = cache
		activitySmidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActivitySmid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActivitySmid) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActivitySmid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activitySmidPrimaryKeyMapping)
	sql := "DELETE FROM \"activity_smid\" WHERE \"smid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from activity_smid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for activity_smid")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q activitySmidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activitySmidQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activity_smid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_smid")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActivitySmidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activitySmidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySmidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"activity_smid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySmidPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activitySmid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_smid")
	}

	if len(activitySmidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActivitySmid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActivitySmid(ctx, exec, o.Smid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActivitySmidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActivitySmidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySmidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"activity_smid\".* FROM \"activity_smid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySmidPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActivitySmidSlice")
	}

	*o = slice

	return nil
}

// ActivitySmidExists checks if the ActivitySmid row exists.
func ActivitySmidExists(ctx context.Context, exec boil.ContextExecutor, smid int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"activity_smid\" where \"smid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, smid)
	}
	row := exec.QueryRowContext(ctx, sql, smid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if activity_smid exists")
	}

	return exists, nil
}
