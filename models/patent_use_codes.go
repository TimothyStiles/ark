// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PatentUseCode is an object representing the database table.
type PatentUseCode struct {
	PatentUseCode string `boil:"patent_use_code" json:"patent_use_code" toml:"patent_use_code" yaml:"patent_use_code"`
	Definition    string `boil:"definition" json:"definition" toml:"definition" yaml:"definition"`

	R *patentUseCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patentUseCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatentUseCodeColumns = struct {
	PatentUseCode string
	Definition    string
}{
	PatentUseCode: "patent_use_code",
	Definition:    "definition",
}

var PatentUseCodeTableColumns = struct {
	PatentUseCode string
	Definition    string
}{
	PatentUseCode: "patent_use_codes.patent_use_code",
	Definition:    "patent_use_codes.definition",
}

// Generated where

var PatentUseCodeWhere = struct {
	PatentUseCode whereHelperstring
	Definition    whereHelperstring
}{
	PatentUseCode: whereHelperstring{field: "\"patent_use_codes\".\"patent_use_code\""},
	Definition:    whereHelperstring{field: "\"patent_use_codes\".\"definition\""},
}

// PatentUseCodeRels is where relationship names are stored.
var PatentUseCodeRels = struct {
	ProductPatents string
}{
	ProductPatents: "ProductPatents",
}

// patentUseCodeR is where relationships are stored.
type patentUseCodeR struct {
	ProductPatents ProductPatentSlice `boil:"ProductPatents" json:"ProductPatents" toml:"ProductPatents" yaml:"ProductPatents"`
}

// NewStruct creates a new relationship struct
func (*patentUseCodeR) NewStruct() *patentUseCodeR {
	return &patentUseCodeR{}
}

func (r *patentUseCodeR) GetProductPatents() ProductPatentSlice {
	if r == nil {
		return nil
	}
	return r.ProductPatents
}

// patentUseCodeL is where Load methods for each relationship are stored.
type patentUseCodeL struct{}

var (
	patentUseCodeAllColumns            = []string{"patent_use_code", "definition"}
	patentUseCodeColumnsWithoutDefault = []string{"patent_use_code", "definition"}
	patentUseCodeColumnsWithDefault    = []string{}
	patentUseCodePrimaryKeyColumns     = []string{"patent_use_code"}
	patentUseCodeGeneratedColumns      = []string{}
)

type (
	// PatentUseCodeSlice is an alias for a slice of pointers to PatentUseCode.
	// This should almost always be used instead of []PatentUseCode.
	PatentUseCodeSlice []*PatentUseCode
	// PatentUseCodeHook is the signature for custom PatentUseCode hook methods
	PatentUseCodeHook func(context.Context, boil.ContextExecutor, *PatentUseCode) error

	patentUseCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patentUseCodeType                 = reflect.TypeOf(&PatentUseCode{})
	patentUseCodeMapping              = queries.MakeStructMapping(patentUseCodeType)
	patentUseCodePrimaryKeyMapping, _ = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, patentUseCodePrimaryKeyColumns)
	patentUseCodeInsertCacheMut       sync.RWMutex
	patentUseCodeInsertCache          = make(map[string]insertCache)
	patentUseCodeUpdateCacheMut       sync.RWMutex
	patentUseCodeUpdateCache          = make(map[string]updateCache)
	patentUseCodeUpsertCacheMut       sync.RWMutex
	patentUseCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patentUseCodeAfterSelectHooks []PatentUseCodeHook

var patentUseCodeBeforeInsertHooks []PatentUseCodeHook
var patentUseCodeAfterInsertHooks []PatentUseCodeHook

var patentUseCodeBeforeUpdateHooks []PatentUseCodeHook
var patentUseCodeAfterUpdateHooks []PatentUseCodeHook

var patentUseCodeBeforeDeleteHooks []PatentUseCodeHook
var patentUseCodeAfterDeleteHooks []PatentUseCodeHook

var patentUseCodeBeforeUpsertHooks []PatentUseCodeHook
var patentUseCodeAfterUpsertHooks []PatentUseCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PatentUseCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PatentUseCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PatentUseCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PatentUseCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PatentUseCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PatentUseCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PatentUseCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PatentUseCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PatentUseCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patentUseCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatentUseCodeHook registers your hook function for all future operations.
func AddPatentUseCodeHook(hookPoint boil.HookPoint, patentUseCodeHook PatentUseCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		patentUseCodeAfterSelectHooks = append(patentUseCodeAfterSelectHooks, patentUseCodeHook)
	case boil.BeforeInsertHook:
		patentUseCodeBeforeInsertHooks = append(patentUseCodeBeforeInsertHooks, patentUseCodeHook)
	case boil.AfterInsertHook:
		patentUseCodeAfterInsertHooks = append(patentUseCodeAfterInsertHooks, patentUseCodeHook)
	case boil.BeforeUpdateHook:
		patentUseCodeBeforeUpdateHooks = append(patentUseCodeBeforeUpdateHooks, patentUseCodeHook)
	case boil.AfterUpdateHook:
		patentUseCodeAfterUpdateHooks = append(patentUseCodeAfterUpdateHooks, patentUseCodeHook)
	case boil.BeforeDeleteHook:
		patentUseCodeBeforeDeleteHooks = append(patentUseCodeBeforeDeleteHooks, patentUseCodeHook)
	case boil.AfterDeleteHook:
		patentUseCodeAfterDeleteHooks = append(patentUseCodeAfterDeleteHooks, patentUseCodeHook)
	case boil.BeforeUpsertHook:
		patentUseCodeBeforeUpsertHooks = append(patentUseCodeBeforeUpsertHooks, patentUseCodeHook)
	case boil.AfterUpsertHook:
		patentUseCodeAfterUpsertHooks = append(patentUseCodeAfterUpsertHooks, patentUseCodeHook)
	}
}

// One returns a single patentUseCode record from the query.
func (q patentUseCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PatentUseCode, error) {
	o := &PatentUseCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for patent_use_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PatentUseCode records from the query.
func (q patentUseCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatentUseCodeSlice, error) {
	var o []*PatentUseCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PatentUseCode slice")
	}

	if len(patentUseCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PatentUseCode records in the query.
func (q patentUseCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count patent_use_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patentUseCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if patent_use_codes exists")
	}

	return count > 0, nil
}

// ProductPatents retrieves all the product_patent's ProductPatents with an executor.
func (o *PatentUseCode) ProductPatents(mods ...qm.QueryMod) productPatentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_patents\".\"patent_use_code\"=?", o.PatentUseCode),
	)

	return ProductPatents(queryMods...)
}

// LoadProductPatents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (patentUseCodeL) LoadProductPatents(ctx context.Context, e boil.ContextExecutor, singular bool, maybePatentUseCode interface{}, mods queries.Applicator) error {
	var slice []*PatentUseCode
	var object *PatentUseCode

	if singular {
		object = maybePatentUseCode.(*PatentUseCode)
	} else {
		slice = *maybePatentUseCode.(*[]*PatentUseCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &patentUseCodeR{}
		}
		args = append(args, object.PatentUseCode)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &patentUseCodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PatentUseCode) {
					continue Outer
				}
			}

			args = append(args, obj.PatentUseCode)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_patents`),
		qm.WhereIn(`product_patents.patent_use_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_patents")
	}

	var resultSlice []*ProductPatent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_patents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_patents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_patents")
	}

	if len(productPatentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductPatents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productPatentR{}
			}
			foreign.R.ProductPatentPatentUseCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PatentUseCode, foreign.PatentUseCode) {
				local.R.ProductPatents = append(local.R.ProductPatents, foreign)
				if foreign.R == nil {
					foreign.R = &productPatentR{}
				}
				foreign.R.ProductPatentPatentUseCode = local
				break
			}
		}
	}

	return nil
}

// AddProductPatents adds the given related objects to the existing relationships
// of the patent_use_code, optionally inserting them as new records.
// Appends related to o.R.ProductPatents.
// Sets related.R.ProductPatentPatentUseCode appropriately.
func (o *PatentUseCode) AddProductPatents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductPatent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PatentUseCode, o.PatentUseCode)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_patents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"patent_use_code"}),
				strmangle.WhereClause("\"", "\"", 0, productPatentPrimaryKeyColumns),
			)
			values := []interface{}{o.PatentUseCode, rel.ProdPatID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PatentUseCode, o.PatentUseCode)
		}
	}

	if o.R == nil {
		o.R = &patentUseCodeR{
			ProductPatents: related,
		}
	} else {
		o.R.ProductPatents = append(o.R.ProductPatents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productPatentR{
				ProductPatentPatentUseCode: o,
			}
		} else {
			rel.R.ProductPatentPatentUseCode = o
		}
	}
	return nil
}

// SetProductPatents removes all previously related items of the
// patent_use_code replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductPatentPatentUseCode's ProductPatents accordingly.
// Replaces o.R.ProductPatents with related.
// Sets related.R.ProductPatentPatentUseCode's ProductPatents accordingly.
func (o *PatentUseCode) SetProductPatents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductPatent) error {
	query := "update \"product_patents\" set \"patent_use_code\" = null where \"patent_use_code\" = ?"
	values := []interface{}{o.PatentUseCode}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductPatents {
			queries.SetScanner(&rel.PatentUseCode, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductPatentPatentUseCode = nil
		}
		o.R.ProductPatents = nil
	}

	return o.AddProductPatents(ctx, exec, insert, related...)
}

// RemoveProductPatents relationships from objects passed in.
// Removes related items from R.ProductPatents (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductPatentPatentUseCode.
func (o *PatentUseCode) RemoveProductPatents(ctx context.Context, exec boil.ContextExecutor, related ...*ProductPatent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PatentUseCode, nil)
		if rel.R != nil {
			rel.R.ProductPatentPatentUseCode = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("patent_use_code")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductPatents {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductPatents)
			if ln > 1 && i < ln-1 {
				o.R.ProductPatents[i] = o.R.ProductPatents[ln-1]
			}
			o.R.ProductPatents = o.R.ProductPatents[:ln-1]
			break
		}
	}

	return nil
}

// PatentUseCodes retrieves all the records using an executor.
func PatentUseCodes(mods ...qm.QueryMod) patentUseCodeQuery {
	mods = append(mods, qm.From("\"patent_use_codes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"patent_use_codes\".*"})
	}

	return patentUseCodeQuery{q}
}

// FindPatentUseCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatentUseCode(ctx context.Context, exec boil.ContextExecutor, patentUseCode string, selectCols ...string) (*PatentUseCode, error) {
	patentUseCodeObj := &PatentUseCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"patent_use_codes\" where \"patent_use_code\"=?", sel,
	)

	q := queries.Raw(query, patentUseCode)

	err := q.Bind(ctx, exec, patentUseCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from patent_use_codes")
	}

	if err = patentUseCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return patentUseCodeObj, err
	}

	return patentUseCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PatentUseCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patent_use_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patentUseCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patentUseCodeInsertCacheMut.RLock()
	cache, cached := patentUseCodeInsertCache[key]
	patentUseCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patentUseCodeAllColumns,
			patentUseCodeColumnsWithDefault,
			patentUseCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"patent_use_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"patent_use_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into patent_use_codes")
	}

	if !cached {
		patentUseCodeInsertCacheMut.Lock()
		patentUseCodeInsertCache[key] = cache
		patentUseCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PatentUseCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PatentUseCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patentUseCodeUpdateCacheMut.RLock()
	cache, cached := patentUseCodeUpdateCache[key]
	patentUseCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patentUseCodeAllColumns,
			patentUseCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update patent_use_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"patent_use_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, patentUseCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, append(wl, patentUseCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update patent_use_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for patent_use_codes")
	}

	if !cached {
		patentUseCodeUpdateCacheMut.Lock()
		patentUseCodeUpdateCache[key] = cache
		patentUseCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patentUseCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for patent_use_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for patent_use_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatentUseCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patentUseCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"patent_use_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, patentUseCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patentUseCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patentUseCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PatentUseCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patent_use_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patentUseCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patentUseCodeUpsertCacheMut.RLock()
	cache, cached := patentUseCodeUpsertCache[key]
	patentUseCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patentUseCodeAllColumns,
			patentUseCodeColumnsWithDefault,
			patentUseCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			patentUseCodeAllColumns,
			patentUseCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert patent_use_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(patentUseCodePrimaryKeyColumns))
			copy(conflict, patentUseCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"patent_use_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patentUseCodeType, patentUseCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert patent_use_codes")
	}

	if !cached {
		patentUseCodeUpsertCacheMut.Lock()
		patentUseCodeUpsertCache[key] = cache
		patentUseCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PatentUseCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PatentUseCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PatentUseCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patentUseCodePrimaryKeyMapping)
	sql := "DELETE FROM \"patent_use_codes\" WHERE \"patent_use_code\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from patent_use_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for patent_use_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patentUseCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patentUseCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patent_use_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patent_use_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatentUseCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patentUseCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patentUseCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"patent_use_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, patentUseCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patentUseCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patent_use_codes")
	}

	if len(patentUseCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PatentUseCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatentUseCode(ctx, exec, o.PatentUseCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatentUseCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatentUseCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patentUseCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"patent_use_codes\".* FROM \"patent_use_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, patentUseCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatentUseCodeSlice")
	}

	*o = slice

	return nil
}

// PatentUseCodeExists checks if the PatentUseCode row exists.
func PatentUseCodeExists(ctx context.Context, exec boil.ContextExecutor, patentUseCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"patent_use_codes\" where \"patent_use_code\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, patentUseCode)
	}
	row := exec.QueryRowContext(ctx, sql, patentUseCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if patent_use_codes exists")
	}

	return exists, nil
}
