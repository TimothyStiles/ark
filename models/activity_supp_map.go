// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ActivitySuppMap is an object representing the database table.
type ActivitySuppMap struct {
	ActsmID    int64 `boil:"actsm_id" json:"actsm_id" toml:"actsm_id" yaml:"actsm_id"`
	ActivityID int64 `boil:"activity_id" json:"activity_id" toml:"activity_id" yaml:"activity_id"`
	Smid       int64 `boil:"smid" json:"smid" toml:"smid" yaml:"smid"`

	R *activitySuppMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activitySuppMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActivitySuppMapColumns = struct {
	ActsmID    string
	ActivityID string
	Smid       string
}{
	ActsmID:    "actsm_id",
	ActivityID: "activity_id",
	Smid:       "smid",
}

var ActivitySuppMapTableColumns = struct {
	ActsmID    string
	ActivityID string
	Smid       string
}{
	ActsmID:    "activity_supp_map.actsm_id",
	ActivityID: "activity_supp_map.activity_id",
	Smid:       "activity_supp_map.smid",
}

// Generated where

var ActivitySuppMapWhere = struct {
	ActsmID    whereHelperint64
	ActivityID whereHelperint64
	Smid       whereHelperint64
}{
	ActsmID:    whereHelperint64{field: "\"activity_supp_map\".\"actsm_id\""},
	ActivityID: whereHelperint64{field: "\"activity_supp_map\".\"activity_id\""},
	Smid:       whereHelperint64{field: "\"activity_supp_map\".\"smid\""},
}

// ActivitySuppMapRels is where relationship names are stored.
var ActivitySuppMapRels = struct {
	Activity         string
	SmidActivitySmid string
}{
	Activity:         "Activity",
	SmidActivitySmid: "SmidActivitySmid",
}

// activitySuppMapR is where relationships are stored.
type activitySuppMapR struct {
	Activity         *Activity     `boil:"Activity" json:"Activity" toml:"Activity" yaml:"Activity"`
	SmidActivitySmid *ActivitySmid `boil:"SmidActivitySmid" json:"SmidActivitySmid" toml:"SmidActivitySmid" yaml:"SmidActivitySmid"`
}

// NewStruct creates a new relationship struct
func (*activitySuppMapR) NewStruct() *activitySuppMapR {
	return &activitySuppMapR{}
}

func (r *activitySuppMapR) GetActivity() *Activity {
	if r == nil {
		return nil
	}
	return r.Activity
}

func (r *activitySuppMapR) GetSmidActivitySmid() *ActivitySmid {
	if r == nil {
		return nil
	}
	return r.SmidActivitySmid
}

// activitySuppMapL is where Load methods for each relationship are stored.
type activitySuppMapL struct{}

var (
	activitySuppMapAllColumns            = []string{"actsm_id", "activity_id", "smid"}
	activitySuppMapColumnsWithoutDefault = []string{"actsm_id", "activity_id", "smid"}
	activitySuppMapColumnsWithDefault    = []string{}
	activitySuppMapPrimaryKeyColumns     = []string{"actsm_id"}
	activitySuppMapGeneratedColumns      = []string{}
)

type (
	// ActivitySuppMapSlice is an alias for a slice of pointers to ActivitySuppMap.
	// This should almost always be used instead of []ActivitySuppMap.
	ActivitySuppMapSlice []*ActivitySuppMap
	// ActivitySuppMapHook is the signature for custom ActivitySuppMap hook methods
	ActivitySuppMapHook func(context.Context, boil.ContextExecutor, *ActivitySuppMap) error

	activitySuppMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activitySuppMapType                 = reflect.TypeOf(&ActivitySuppMap{})
	activitySuppMapMapping              = queries.MakeStructMapping(activitySuppMapType)
	activitySuppMapPrimaryKeyMapping, _ = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, activitySuppMapPrimaryKeyColumns)
	activitySuppMapInsertCacheMut       sync.RWMutex
	activitySuppMapInsertCache          = make(map[string]insertCache)
	activitySuppMapUpdateCacheMut       sync.RWMutex
	activitySuppMapUpdateCache          = make(map[string]updateCache)
	activitySuppMapUpsertCacheMut       sync.RWMutex
	activitySuppMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activitySuppMapAfterSelectHooks []ActivitySuppMapHook

var activitySuppMapBeforeInsertHooks []ActivitySuppMapHook
var activitySuppMapAfterInsertHooks []ActivitySuppMapHook

var activitySuppMapBeforeUpdateHooks []ActivitySuppMapHook
var activitySuppMapAfterUpdateHooks []ActivitySuppMapHook

var activitySuppMapBeforeDeleteHooks []ActivitySuppMapHook
var activitySuppMapAfterDeleteHooks []ActivitySuppMapHook

var activitySuppMapBeforeUpsertHooks []ActivitySuppMapHook
var activitySuppMapAfterUpsertHooks []ActivitySuppMapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActivitySuppMap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActivitySuppMap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActivitySuppMap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActivitySuppMap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActivitySuppMap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActivitySuppMap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActivitySuppMap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActivitySuppMap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActivitySuppMap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySuppMapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActivitySuppMapHook registers your hook function for all future operations.
func AddActivitySuppMapHook(hookPoint boil.HookPoint, activitySuppMapHook ActivitySuppMapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activitySuppMapAfterSelectHooks = append(activitySuppMapAfterSelectHooks, activitySuppMapHook)
	case boil.BeforeInsertHook:
		activitySuppMapBeforeInsertHooks = append(activitySuppMapBeforeInsertHooks, activitySuppMapHook)
	case boil.AfterInsertHook:
		activitySuppMapAfterInsertHooks = append(activitySuppMapAfterInsertHooks, activitySuppMapHook)
	case boil.BeforeUpdateHook:
		activitySuppMapBeforeUpdateHooks = append(activitySuppMapBeforeUpdateHooks, activitySuppMapHook)
	case boil.AfterUpdateHook:
		activitySuppMapAfterUpdateHooks = append(activitySuppMapAfterUpdateHooks, activitySuppMapHook)
	case boil.BeforeDeleteHook:
		activitySuppMapBeforeDeleteHooks = append(activitySuppMapBeforeDeleteHooks, activitySuppMapHook)
	case boil.AfterDeleteHook:
		activitySuppMapAfterDeleteHooks = append(activitySuppMapAfterDeleteHooks, activitySuppMapHook)
	case boil.BeforeUpsertHook:
		activitySuppMapBeforeUpsertHooks = append(activitySuppMapBeforeUpsertHooks, activitySuppMapHook)
	case boil.AfterUpsertHook:
		activitySuppMapAfterUpsertHooks = append(activitySuppMapAfterUpsertHooks, activitySuppMapHook)
	}
}

// One returns a single activitySuppMap record from the query.
func (q activitySuppMapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActivitySuppMap, error) {
	o := &ActivitySuppMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for activity_supp_map")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActivitySuppMap records from the query.
func (q activitySuppMapQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActivitySuppMapSlice, error) {
	var o []*ActivitySuppMap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActivitySuppMap slice")
	}

	if len(activitySuppMapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActivitySuppMap records in the query.
func (q activitySuppMapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count activity_supp_map rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q activitySuppMapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if activity_supp_map exists")
	}

	return count > 0, nil
}

// Activity pointed to by the foreign key.
func (o *ActivitySuppMap) Activity(mods ...qm.QueryMod) activityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"activity_id\" = ?", o.ActivityID),
	}

	queryMods = append(queryMods, mods...)

	return Activities(queryMods...)
}

// SmidActivitySmid pointed to by the foreign key.
func (o *ActivitySuppMap) SmidActivitySmid(mods ...qm.QueryMod) activitySmidQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"smid\" = ?", o.Smid),
	}

	queryMods = append(queryMods, mods...)

	return ActivitySmids(queryMods...)
}

// LoadActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activitySuppMapL) LoadActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivitySuppMap interface{}, mods queries.Applicator) error {
	var slice []*ActivitySuppMap
	var object *ActivitySuppMap

	if singular {
		object = maybeActivitySuppMap.(*ActivitySuppMap)
	} else {
		slice = *maybeActivitySuppMap.(*[]*ActivitySuppMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activitySuppMapR{}
		}
		args = append(args, object.ActivityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activitySuppMapR{}
			}

			for _, a := range args {
				if a == obj.ActivityID {
					continue Outer
				}
			}

			args = append(args, obj.ActivityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.activity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Activity")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Activity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activitySuppMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Activity = foreign
		if foreign.R == nil {
			foreign.R = &activityR{}
		}
		foreign.R.ActivitySuppMaps = append(foreign.R.ActivitySuppMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActivityID == foreign.ActivityID {
				local.R.Activity = foreign
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.ActivitySuppMaps = append(foreign.R.ActivitySuppMaps, local)
				break
			}
		}
	}

	return nil
}

// LoadSmidActivitySmid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activitySuppMapL) LoadSmidActivitySmid(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivitySuppMap interface{}, mods queries.Applicator) error {
	var slice []*ActivitySuppMap
	var object *ActivitySuppMap

	if singular {
		object = maybeActivitySuppMap.(*ActivitySuppMap)
	} else {
		slice = *maybeActivitySuppMap.(*[]*ActivitySuppMap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activitySuppMapR{}
		}
		args = append(args, object.Smid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activitySuppMapR{}
			}

			for _, a := range args {
				if a == obj.Smid {
					continue Outer
				}
			}

			args = append(args, obj.Smid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activity_smid`),
		qm.WhereIn(`activity_smid.smid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActivitySmid")
	}

	var resultSlice []*ActivitySmid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActivitySmid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activity_smid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activity_smid")
	}

	if len(activitySuppMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SmidActivitySmid = foreign
		if foreign.R == nil {
			foreign.R = &activitySmidR{}
		}
		foreign.R.SmidActivitySuppMaps = append(foreign.R.SmidActivitySuppMaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Smid == foreign.Smid {
				local.R.SmidActivitySmid = foreign
				if foreign.R == nil {
					foreign.R = &activitySmidR{}
				}
				foreign.R.SmidActivitySuppMaps = append(foreign.R.SmidActivitySuppMaps, local)
				break
			}
		}
	}

	return nil
}

// SetActivity of the activitySuppMap to the related item.
// Sets o.R.Activity to related.
// Adds o to related.R.ActivitySuppMaps.
func (o *ActivitySuppMap) SetActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Activity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"activity_supp_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"activity_id"}),
		strmangle.WhereClause("\"", "\"", 0, activitySuppMapPrimaryKeyColumns),
	)
	values := []interface{}{related.ActivityID, o.ActsmID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActivityID = related.ActivityID
	if o.R == nil {
		o.R = &activitySuppMapR{
			Activity: related,
		}
	} else {
		o.R.Activity = related
	}

	if related.R == nil {
		related.R = &activityR{
			ActivitySuppMaps: ActivitySuppMapSlice{o},
		}
	} else {
		related.R.ActivitySuppMaps = append(related.R.ActivitySuppMaps, o)
	}

	return nil
}

// SetSmidActivitySmid of the activitySuppMap to the related item.
// Sets o.R.SmidActivitySmid to related.
// Adds o to related.R.SmidActivitySuppMaps.
func (o *ActivitySuppMap) SetSmidActivitySmid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActivitySmid) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"activity_supp_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"smid"}),
		strmangle.WhereClause("\"", "\"", 0, activitySuppMapPrimaryKeyColumns),
	)
	values := []interface{}{related.Smid, o.ActsmID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Smid = related.Smid
	if o.R == nil {
		o.R = &activitySuppMapR{
			SmidActivitySmid: related,
		}
	} else {
		o.R.SmidActivitySmid = related
	}

	if related.R == nil {
		related.R = &activitySmidR{
			SmidActivitySuppMaps: ActivitySuppMapSlice{o},
		}
	} else {
		related.R.SmidActivitySuppMaps = append(related.R.SmidActivitySuppMaps, o)
	}

	return nil
}

// ActivitySuppMaps retrieves all the records using an executor.
func ActivitySuppMaps(mods ...qm.QueryMod) activitySuppMapQuery {
	mods = append(mods, qm.From("\"activity_supp_map\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"activity_supp_map\".*"})
	}

	return activitySuppMapQuery{q}
}

// FindActivitySuppMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActivitySuppMap(ctx context.Context, exec boil.ContextExecutor, actsmID int64, selectCols ...string) (*ActivitySuppMap, error) {
	activitySuppMapObj := &ActivitySuppMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"activity_supp_map\" where \"actsm_id\"=?", sel,
	)

	q := queries.Raw(query, actsmID)

	err := q.Bind(ctx, exec, activitySuppMapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from activity_supp_map")
	}

	if err = activitySuppMapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activitySuppMapObj, err
	}

	return activitySuppMapObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActivitySuppMap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_supp_map provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySuppMapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activitySuppMapInsertCacheMut.RLock()
	cache, cached := activitySuppMapInsertCache[key]
	activitySuppMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activitySuppMapAllColumns,
			activitySuppMapColumnsWithDefault,
			activitySuppMapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"activity_supp_map\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"activity_supp_map\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into activity_supp_map")
	}

	if !cached {
		activitySuppMapInsertCacheMut.Lock()
		activitySuppMapInsertCache[key] = cache
		activitySuppMapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActivitySuppMap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActivitySuppMap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activitySuppMapUpdateCacheMut.RLock()
	cache, cached := activitySuppMapUpdateCache[key]
	activitySuppMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activitySuppMapAllColumns,
			activitySuppMapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update activity_supp_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"activity_supp_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, activitySuppMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, append(wl, activitySuppMapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update activity_supp_map row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for activity_supp_map")
	}

	if !cached {
		activitySuppMapUpdateCacheMut.Lock()
		activitySuppMapUpdateCache[key] = cache
		activitySuppMapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q activitySuppMapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for activity_supp_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for activity_supp_map")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActivitySuppMapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"activity_supp_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppMapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activitySuppMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activitySuppMap")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActivitySuppMap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_supp_map provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySuppMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activitySuppMapUpsertCacheMut.RLock()
	cache, cached := activitySuppMapUpsertCache[key]
	activitySuppMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activitySuppMapAllColumns,
			activitySuppMapColumnsWithDefault,
			activitySuppMapColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			activitySuppMapAllColumns,
			activitySuppMapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert activity_supp_map, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(activitySuppMapPrimaryKeyColumns))
			copy(conflict, activitySuppMapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"activity_supp_map\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activitySuppMapType, activitySuppMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert activity_supp_map")
	}

	if !cached {
		activitySuppMapUpsertCacheMut.Lock()
		activitySuppMapUpsertCache[key] = cache
		activitySuppMapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActivitySuppMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActivitySuppMap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActivitySuppMap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activitySuppMapPrimaryKeyMapping)
	sql := "DELETE FROM \"activity_supp_map\" WHERE \"actsm_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from activity_supp_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for activity_supp_map")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q activitySuppMapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activitySuppMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activity_supp_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_supp_map")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActivitySuppMapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activitySuppMapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"activity_supp_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppMapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activitySuppMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_supp_map")
	}

	if len(activitySuppMapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActivitySuppMap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActivitySuppMap(ctx, exec, o.ActsmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActivitySuppMapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActivitySuppMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySuppMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"activity_supp_map\".* FROM \"activity_supp_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySuppMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActivitySuppMapSlice")
	}

	*o = slice

	return nil
}

// ActivitySuppMapExists checks if the ActivitySuppMap row exists.
func ActivitySuppMapExists(ctx context.Context, exec boil.ContextExecutor, actsmID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"activity_supp_map\" where \"actsm_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, actsmID)
	}
	row := exec.QueryRowContext(ctx, sql, actsmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if activity_supp_map exists")
	}

	return exists, nil
}
