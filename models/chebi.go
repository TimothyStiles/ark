// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chebi is an object representing the database table.
type Chebi struct {
	Accession  null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	SubclassOf null.String `boil:"subclass_of" json:"subclass_of,omitempty" toml:"subclass_of" yaml:"subclass_of,omitempty"`

	R *chebiR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chebiL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChebiColumns = struct {
	Accession  string
	SubclassOf string
}{
	Accession:  "accession",
	SubclassOf: "subclass_of",
}

var ChebiTableColumns = struct {
	Accession  string
	SubclassOf string
}{
	Accession:  "chebi.accession",
	SubclassOf: "chebi.subclass_of",
}

// Generated where

var ChebiWhere = struct {
	Accession  whereHelpernull_String
	SubclassOf whereHelpernull_String
}{
	Accession:  whereHelpernull_String{field: "\"chebi\".\"accession\""},
	SubclassOf: whereHelpernull_String{field: "\"chebi\".\"subclass_of\""},
}

// ChebiRels is where relationship names are stored.
var ChebiRels = struct {
	SubclassOfChebi  string
	SubclassOfChebis string
	Compounds        string
}{
	SubclassOfChebi:  "SubclassOfChebi",
	SubclassOfChebis: "SubclassOfChebis",
	Compounds:        "Compounds",
}

// chebiR is where relationships are stored.
type chebiR struct {
	SubclassOfChebi  *Chebi        `boil:"SubclassOfChebi" json:"SubclassOfChebi" toml:"SubclassOfChebi" yaml:"SubclassOfChebi"`
	SubclassOfChebis ChebiSlice    `boil:"SubclassOfChebis" json:"SubclassOfChebis" toml:"SubclassOfChebis" yaml:"SubclassOfChebis"`
	Compounds        CompoundSlice `boil:"Compounds" json:"Compounds" toml:"Compounds" yaml:"Compounds"`
}

// NewStruct creates a new relationship struct
func (*chebiR) NewStruct() *chebiR {
	return &chebiR{}
}

func (r *chebiR) GetSubclassOfChebi() *Chebi {
	if r == nil {
		return nil
	}
	return r.SubclassOfChebi
}

func (r *chebiR) GetSubclassOfChebis() ChebiSlice {
	if r == nil {
		return nil
	}
	return r.SubclassOfChebis
}

func (r *chebiR) GetCompounds() CompoundSlice {
	if r == nil {
		return nil
	}
	return r.Compounds
}

// chebiL is where Load methods for each relationship are stored.
type chebiL struct{}

var (
	chebiAllColumns            = []string{"accession", "subclass_of"}
	chebiColumnsWithoutDefault = []string{}
	chebiColumnsWithDefault    = []string{"accession", "subclass_of"}
	chebiPrimaryKeyColumns     = []string{"accession"}
	chebiGeneratedColumns      = []string{}
)

type (
	// ChebiSlice is an alias for a slice of pointers to Chebi.
	// This should almost always be used instead of []Chebi.
	ChebiSlice []*Chebi
	// ChebiHook is the signature for custom Chebi hook methods
	ChebiHook func(context.Context, boil.ContextExecutor, *Chebi) error

	chebiQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chebiType                 = reflect.TypeOf(&Chebi{})
	chebiMapping              = queries.MakeStructMapping(chebiType)
	chebiPrimaryKeyMapping, _ = queries.BindMapping(chebiType, chebiMapping, chebiPrimaryKeyColumns)
	chebiInsertCacheMut       sync.RWMutex
	chebiInsertCache          = make(map[string]insertCache)
	chebiUpdateCacheMut       sync.RWMutex
	chebiUpdateCache          = make(map[string]updateCache)
	chebiUpsertCacheMut       sync.RWMutex
	chebiUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chebiAfterSelectHooks []ChebiHook

var chebiBeforeInsertHooks []ChebiHook
var chebiAfterInsertHooks []ChebiHook

var chebiBeforeUpdateHooks []ChebiHook
var chebiAfterUpdateHooks []ChebiHook

var chebiBeforeDeleteHooks []ChebiHook
var chebiAfterDeleteHooks []ChebiHook

var chebiBeforeUpsertHooks []ChebiHook
var chebiAfterUpsertHooks []ChebiHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chebi) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chebi) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chebi) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chebi) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chebi) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chebi) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chebi) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chebi) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chebi) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chebiAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChebiHook registers your hook function for all future operations.
func AddChebiHook(hookPoint boil.HookPoint, chebiHook ChebiHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chebiAfterSelectHooks = append(chebiAfterSelectHooks, chebiHook)
	case boil.BeforeInsertHook:
		chebiBeforeInsertHooks = append(chebiBeforeInsertHooks, chebiHook)
	case boil.AfterInsertHook:
		chebiAfterInsertHooks = append(chebiAfterInsertHooks, chebiHook)
	case boil.BeforeUpdateHook:
		chebiBeforeUpdateHooks = append(chebiBeforeUpdateHooks, chebiHook)
	case boil.AfterUpdateHook:
		chebiAfterUpdateHooks = append(chebiAfterUpdateHooks, chebiHook)
	case boil.BeforeDeleteHook:
		chebiBeforeDeleteHooks = append(chebiBeforeDeleteHooks, chebiHook)
	case boil.AfterDeleteHook:
		chebiAfterDeleteHooks = append(chebiAfterDeleteHooks, chebiHook)
	case boil.BeforeUpsertHook:
		chebiBeforeUpsertHooks = append(chebiBeforeUpsertHooks, chebiHook)
	case boil.AfterUpsertHook:
		chebiAfterUpsertHooks = append(chebiAfterUpsertHooks, chebiHook)
	}
}

// One returns a single chebi record from the query.
func (q chebiQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chebi, error) {
	o := &Chebi{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chebi")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chebi records from the query.
func (q chebiQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChebiSlice, error) {
	var o []*Chebi

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chebi slice")
	}

	if len(chebiAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chebi records in the query.
func (q chebiQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chebi rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chebiQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chebi exists")
	}

	return count > 0, nil
}

// SubclassOfChebi pointed to by the foreign key.
func (o *Chebi) SubclassOfChebi(mods ...qm.QueryMod) chebiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.SubclassOf),
	}

	queryMods = append(queryMods, mods...)

	return Chebis(queryMods...)
}

// SubclassOfChebis retrieves all the chebi's Chebis with an executor via subclass_of column.
func (o *Chebi) SubclassOfChebis(mods ...qm.QueryMod) chebiQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chebi\".\"subclass_of\"=?", o.Accession),
	)

	return Chebis(queryMods...)
}

// Compounds retrieves all the compound's Compounds with an executor.
func (o *Chebi) Compounds(mods ...qm.QueryMod) compoundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"compound\".\"chebi\"=?", o.Accession),
	)

	return Compounds(queryMods...)
}

// LoadSubclassOfChebi allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chebiL) LoadSubclassOfChebi(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChebi interface{}, mods queries.Applicator) error {
	var slice []*Chebi
	var object *Chebi

	if singular {
		object = maybeChebi.(*Chebi)
	} else {
		slice = *maybeChebi.(*[]*Chebi)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chebiR{}
		}
		if !queries.IsNil(object.SubclassOf) {
			args = append(args, object.SubclassOf)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chebiR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubclassOf) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubclassOf) {
				args = append(args, obj.SubclassOf)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chebi`),
		qm.WhereIn(`chebi.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chebi")
	}

	var resultSlice []*Chebi
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chebi")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chebi")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chebi")
	}

	if len(chebiAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubclassOfChebi = foreign
		if foreign.R == nil {
			foreign.R = &chebiR{}
		}
		foreign.R.SubclassOfChebis = append(foreign.R.SubclassOfChebis, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubclassOf, foreign.Accession) {
				local.R.SubclassOfChebi = foreign
				if foreign.R == nil {
					foreign.R = &chebiR{}
				}
				foreign.R.SubclassOfChebis = append(foreign.R.SubclassOfChebis, local)
				break
			}
		}
	}

	return nil
}

// LoadSubclassOfChebis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chebiL) LoadSubclassOfChebis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChebi interface{}, mods queries.Applicator) error {
	var slice []*Chebi
	var object *Chebi

	if singular {
		object = maybeChebi.(*Chebi)
	} else {
		slice = *maybeChebi.(*[]*Chebi)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chebiR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chebiR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chebi`),
		qm.WhereIn(`chebi.subclass_of in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chebi")
	}

	var resultSlice []*Chebi
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chebi")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chebi")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chebi")
	}

	if len(chebiAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubclassOfChebis = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chebiR{}
			}
			foreign.R.SubclassOfChebi = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.SubclassOf) {
				local.R.SubclassOfChebis = append(local.R.SubclassOfChebis, foreign)
				if foreign.R == nil {
					foreign.R = &chebiR{}
				}
				foreign.R.SubclassOfChebi = local
				break
			}
		}
	}

	return nil
}

// LoadCompounds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chebiL) LoadCompounds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChebi interface{}, mods queries.Applicator) error {
	var slice []*Chebi
	var object *Chebi

	if singular {
		object = maybeChebi.(*Chebi)
	} else {
		slice = *maybeChebi.(*[]*Chebi)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chebiR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chebiR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound`),
		qm.WhereIn(`compound.chebi in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load compound")
	}

	var resultSlice []*Compound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice compound")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on compound")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound")
	}

	if len(compoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Compounds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &compoundR{}
			}
			foreign.R.CompoundChebi = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Chebi) {
				local.R.Compounds = append(local.R.Compounds, foreign)
				if foreign.R == nil {
					foreign.R = &compoundR{}
				}
				foreign.R.CompoundChebi = local
				break
			}
		}
	}

	return nil
}

// SetSubclassOfChebi of the chebi to the related item.
// Sets o.R.SubclassOfChebi to related.
// Adds o to related.R.SubclassOfChebis.
func (o *Chebi) SetSubclassOfChebi(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chebi) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chebi\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"subclass_of"}),
		strmangle.WhereClause("\"", "\"", 0, chebiPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Accession}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubclassOf, related.Accession)
	if o.R == nil {
		o.R = &chebiR{
			SubclassOfChebi: related,
		}
	} else {
		o.R.SubclassOfChebi = related
	}

	if related.R == nil {
		related.R = &chebiR{
			SubclassOfChebis: ChebiSlice{o},
		}
	} else {
		related.R.SubclassOfChebis = append(related.R.SubclassOfChebis, o)
	}

	return nil
}

// RemoveSubclassOfChebi relationship.
// Sets o.R.SubclassOfChebi to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Chebi) RemoveSubclassOfChebi(ctx context.Context, exec boil.ContextExecutor, related *Chebi) error {
	var err error

	queries.SetScanner(&o.SubclassOf, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subclass_of")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubclassOfChebi = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubclassOfChebis {
		if queries.Equal(o.SubclassOf, ri.SubclassOf) {
			continue
		}

		ln := len(related.R.SubclassOfChebis)
		if ln > 1 && i < ln-1 {
			related.R.SubclassOfChebis[i] = related.R.SubclassOfChebis[ln-1]
		}
		related.R.SubclassOfChebis = related.R.SubclassOfChebis[:ln-1]
		break
	}
	return nil
}

// AddSubclassOfChebis adds the given related objects to the existing relationships
// of the chebi, optionally inserting them as new records.
// Appends related to o.R.SubclassOfChebis.
// Sets related.R.SubclassOfChebi appropriately.
func (o *Chebi) AddSubclassOfChebis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Chebi) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SubclassOf, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chebi\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"subclass_of"}),
				strmangle.WhereClause("\"", "\"", 0, chebiPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Accession}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SubclassOf, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &chebiR{
			SubclassOfChebis: related,
		}
	} else {
		o.R.SubclassOfChebis = append(o.R.SubclassOfChebis, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chebiR{
				SubclassOfChebi: o,
			}
		} else {
			rel.R.SubclassOfChebi = o
		}
	}
	return nil
}

// SetSubclassOfChebis removes all previously related items of the
// chebi replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SubclassOfChebi's SubclassOfChebis accordingly.
// Replaces o.R.SubclassOfChebis with related.
// Sets related.R.SubclassOfChebi's SubclassOfChebis accordingly.
func (o *Chebi) SetSubclassOfChebis(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Chebi) error {
	query := "update \"chebi\" set \"subclass_of\" = null where \"subclass_of\" = ?"
	values := []interface{}{o.Accession}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SubclassOfChebis {
			queries.SetScanner(&rel.SubclassOf, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SubclassOfChebi = nil
		}
		o.R.SubclassOfChebis = nil
	}

	return o.AddSubclassOfChebis(ctx, exec, insert, related...)
}

// RemoveSubclassOfChebis relationships from objects passed in.
// Removes related items from R.SubclassOfChebis (uses pointer comparison, removal does not keep order)
// Sets related.R.SubclassOfChebi.
func (o *Chebi) RemoveSubclassOfChebis(ctx context.Context, exec boil.ContextExecutor, related ...*Chebi) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SubclassOf, nil)
		if rel.R != nil {
			rel.R.SubclassOfChebi = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("subclass_of")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SubclassOfChebis {
			if rel != ri {
				continue
			}

			ln := len(o.R.SubclassOfChebis)
			if ln > 1 && i < ln-1 {
				o.R.SubclassOfChebis[i] = o.R.SubclassOfChebis[ln-1]
			}
			o.R.SubclassOfChebis = o.R.SubclassOfChebis[:ln-1]
			break
		}
	}

	return nil
}

// AddCompounds adds the given related objects to the existing relationships
// of the chebi, optionally inserting them as new records.
// Appends related to o.R.Compounds.
// Sets related.R.CompoundChebi appropriately.
func (o *Chebi) AddCompounds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Compound) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Chebi, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"compound\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"chebi"}),
				strmangle.WhereClause("\"", "\"", 0, compoundPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Accession}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Chebi, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &chebiR{
			Compounds: related,
		}
	} else {
		o.R.Compounds = append(o.R.Compounds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &compoundR{
				CompoundChebi: o,
			}
		} else {
			rel.R.CompoundChebi = o
		}
	}
	return nil
}

// SetCompounds removes all previously related items of the
// chebi replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CompoundChebi's Compounds accordingly.
// Replaces o.R.Compounds with related.
// Sets related.R.CompoundChebi's Compounds accordingly.
func (o *Chebi) SetCompounds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Compound) error {
	query := "update \"compound\" set \"chebi\" = null where \"chebi\" = ?"
	values := []interface{}{o.Accession}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Compounds {
			queries.SetScanner(&rel.Chebi, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CompoundChebi = nil
		}
		o.R.Compounds = nil
	}

	return o.AddCompounds(ctx, exec, insert, related...)
}

// RemoveCompounds relationships from objects passed in.
// Removes related items from R.Compounds (uses pointer comparison, removal does not keep order)
// Sets related.R.CompoundChebi.
func (o *Chebi) RemoveCompounds(ctx context.Context, exec boil.ContextExecutor, related ...*Compound) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Chebi, nil)
		if rel.R != nil {
			rel.R.CompoundChebi = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("chebi")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Compounds {
			if rel != ri {
				continue
			}

			ln := len(o.R.Compounds)
			if ln > 1 && i < ln-1 {
				o.R.Compounds[i] = o.R.Compounds[ln-1]
			}
			o.R.Compounds = o.R.Compounds[:ln-1]
			break
		}
	}

	return nil
}

// Chebis retrieves all the records using an executor.
func Chebis(mods ...qm.QueryMod) chebiQuery {
	mods = append(mods, qm.From("\"chebi\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chebi\".*"})
	}

	return chebiQuery{q}
}

// FindChebi retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChebi(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*Chebi, error) {
	chebiObj := &Chebi{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chebi\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, chebiObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chebi")
	}

	if err = chebiObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chebiObj, err
	}

	return chebiObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chebi) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chebi provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chebiColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chebiInsertCacheMut.RLock()
	cache, cached := chebiInsertCache[key]
	chebiInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chebiAllColumns,
			chebiColumnsWithDefault,
			chebiColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chebiType, chebiMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chebiType, chebiMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chebi\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chebi\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chebi")
	}

	if !cached {
		chebiInsertCacheMut.Lock()
		chebiInsertCache[key] = cache
		chebiInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Chebi.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chebi) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chebiUpdateCacheMut.RLock()
	cache, cached := chebiUpdateCache[key]
	chebiUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chebiAllColumns,
			chebiPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chebi, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chebi\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chebiPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chebiType, chebiMapping, append(wl, chebiPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chebi row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chebi")
	}

	if !cached {
		chebiUpdateCacheMut.Lock()
		chebiUpdateCache[key] = cache
		chebiUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chebiQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chebi")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chebi")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChebiSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chebiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chebi\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chebiPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chebi slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chebi")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chebi) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chebi provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chebiColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chebiUpsertCacheMut.RLock()
	cache, cached := chebiUpsertCache[key]
	chebiUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chebiAllColumns,
			chebiColumnsWithDefault,
			chebiColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chebiAllColumns,
			chebiPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chebi, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chebiPrimaryKeyColumns))
			copy(conflict, chebiPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"chebi\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chebiType, chebiMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chebiType, chebiMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chebi")
	}

	if !cached {
		chebiUpsertCacheMut.Lock()
		chebiUpsertCache[key] = cache
		chebiUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Chebi record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chebi) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chebi provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chebiPrimaryKeyMapping)
	sql := "DELETE FROM \"chebi\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chebi")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chebi")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chebiQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chebiQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chebi")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chebi")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChebiSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chebiBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chebiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chebi\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chebiPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chebi slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chebi")
	}

	if len(chebiAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chebi) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChebi(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChebiSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChebiSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chebiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chebi\".* FROM \"chebi\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chebiPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChebiSlice")
	}

	*o = slice

	return nil
}

// ChebiExists checks if the Chebi row exists.
func ChebiExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chebi\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chebi exists")
	}

	return exists, nil
}
