// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BioComponentSequence is an object representing the database table.
type BioComponentSequence struct {
	ComponentID    int64       `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	ComponentType  string      `boil:"component_type" json:"component_type" toml:"component_type" yaml:"component_type"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Sequence       null.String `boil:"sequence" json:"sequence,omitempty" toml:"sequence" yaml:"sequence,omitempty"`
	SequenceMd5sum null.String `boil:"sequence_md5sum" json:"sequence_md5sum,omitempty" toml:"sequence_md5sum" yaml:"sequence_md5sum,omitempty"`
	TaxID          null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	Organism       null.String `boil:"organism" json:"organism,omitempty" toml:"organism" yaml:"organism,omitempty"`

	R *bioComponentSequenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bioComponentSequenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BioComponentSequenceColumns = struct {
	ComponentID    string
	ComponentType  string
	Description    string
	Sequence       string
	SequenceMd5sum string
	TaxID          string
	Organism       string
}{
	ComponentID:    "component_id",
	ComponentType:  "component_type",
	Description:    "description",
	Sequence:       "sequence",
	SequenceMd5sum: "sequence_md5sum",
	TaxID:          "tax_id",
	Organism:       "organism",
}

var BioComponentSequenceTableColumns = struct {
	ComponentID    string
	ComponentType  string
	Description    string
	Sequence       string
	SequenceMd5sum string
	TaxID          string
	Organism       string
}{
	ComponentID:    "bio_component_sequences.component_id",
	ComponentType:  "bio_component_sequences.component_type",
	Description:    "bio_component_sequences.description",
	Sequence:       "bio_component_sequences.sequence",
	SequenceMd5sum: "bio_component_sequences.sequence_md5sum",
	TaxID:          "bio_component_sequences.tax_id",
	Organism:       "bio_component_sequences.organism",
}

// Generated where

var BioComponentSequenceWhere = struct {
	ComponentID    whereHelperint64
	ComponentType  whereHelperstring
	Description    whereHelpernull_String
	Sequence       whereHelpernull_String
	SequenceMd5sum whereHelpernull_String
	TaxID          whereHelpernull_Int64
	Organism       whereHelpernull_String
}{
	ComponentID:    whereHelperint64{field: "\"bio_component_sequences\".\"component_id\""},
	ComponentType:  whereHelperstring{field: "\"bio_component_sequences\".\"component_type\""},
	Description:    whereHelpernull_String{field: "\"bio_component_sequences\".\"description\""},
	Sequence:       whereHelpernull_String{field: "\"bio_component_sequences\".\"sequence\""},
	SequenceMd5sum: whereHelpernull_String{field: "\"bio_component_sequences\".\"sequence_md5sum\""},
	TaxID:          whereHelpernull_Int64{field: "\"bio_component_sequences\".\"tax_id\""},
	Organism:       whereHelpernull_String{field: "\"bio_component_sequences\".\"organism\""},
}

// BioComponentSequenceRels is where relationship names are stored.
var BioComponentSequenceRels = struct {
	ComponentBiotherapeuticComponents string
}{
	ComponentBiotherapeuticComponents: "ComponentBiotherapeuticComponents",
}

// bioComponentSequenceR is where relationships are stored.
type bioComponentSequenceR struct {
	ComponentBiotherapeuticComponents BiotherapeuticComponentSlice `boil:"ComponentBiotherapeuticComponents" json:"ComponentBiotherapeuticComponents" toml:"ComponentBiotherapeuticComponents" yaml:"ComponentBiotherapeuticComponents"`
}

// NewStruct creates a new relationship struct
func (*bioComponentSequenceR) NewStruct() *bioComponentSequenceR {
	return &bioComponentSequenceR{}
}

func (r *bioComponentSequenceR) GetComponentBiotherapeuticComponents() BiotherapeuticComponentSlice {
	if r == nil {
		return nil
	}
	return r.ComponentBiotherapeuticComponents
}

// bioComponentSequenceL is where Load methods for each relationship are stored.
type bioComponentSequenceL struct{}

var (
	bioComponentSequenceAllColumns            = []string{"component_id", "component_type", "description", "sequence", "sequence_md5sum", "tax_id", "organism"}
	bioComponentSequenceColumnsWithoutDefault = []string{"component_id", "component_type"}
	bioComponentSequenceColumnsWithDefault    = []string{"description", "sequence", "sequence_md5sum", "tax_id", "organism"}
	bioComponentSequencePrimaryKeyColumns     = []string{"component_id"}
	bioComponentSequenceGeneratedColumns      = []string{}
)

type (
	// BioComponentSequenceSlice is an alias for a slice of pointers to BioComponentSequence.
	// This should almost always be used instead of []BioComponentSequence.
	BioComponentSequenceSlice []*BioComponentSequence
	// BioComponentSequenceHook is the signature for custom BioComponentSequence hook methods
	BioComponentSequenceHook func(context.Context, boil.ContextExecutor, *BioComponentSequence) error

	bioComponentSequenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bioComponentSequenceType                 = reflect.TypeOf(&BioComponentSequence{})
	bioComponentSequenceMapping              = queries.MakeStructMapping(bioComponentSequenceType)
	bioComponentSequencePrimaryKeyMapping, _ = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, bioComponentSequencePrimaryKeyColumns)
	bioComponentSequenceInsertCacheMut       sync.RWMutex
	bioComponentSequenceInsertCache          = make(map[string]insertCache)
	bioComponentSequenceUpdateCacheMut       sync.RWMutex
	bioComponentSequenceUpdateCache          = make(map[string]updateCache)
	bioComponentSequenceUpsertCacheMut       sync.RWMutex
	bioComponentSequenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bioComponentSequenceAfterSelectHooks []BioComponentSequenceHook

var bioComponentSequenceBeforeInsertHooks []BioComponentSequenceHook
var bioComponentSequenceAfterInsertHooks []BioComponentSequenceHook

var bioComponentSequenceBeforeUpdateHooks []BioComponentSequenceHook
var bioComponentSequenceAfterUpdateHooks []BioComponentSequenceHook

var bioComponentSequenceBeforeDeleteHooks []BioComponentSequenceHook
var bioComponentSequenceAfterDeleteHooks []BioComponentSequenceHook

var bioComponentSequenceBeforeUpsertHooks []BioComponentSequenceHook
var bioComponentSequenceAfterUpsertHooks []BioComponentSequenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BioComponentSequence) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BioComponentSequence) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BioComponentSequence) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BioComponentSequence) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BioComponentSequence) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BioComponentSequence) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BioComponentSequence) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BioComponentSequence) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BioComponentSequence) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioComponentSequenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBioComponentSequenceHook registers your hook function for all future operations.
func AddBioComponentSequenceHook(hookPoint boil.HookPoint, bioComponentSequenceHook BioComponentSequenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bioComponentSequenceAfterSelectHooks = append(bioComponentSequenceAfterSelectHooks, bioComponentSequenceHook)
	case boil.BeforeInsertHook:
		bioComponentSequenceBeforeInsertHooks = append(bioComponentSequenceBeforeInsertHooks, bioComponentSequenceHook)
	case boil.AfterInsertHook:
		bioComponentSequenceAfterInsertHooks = append(bioComponentSequenceAfterInsertHooks, bioComponentSequenceHook)
	case boil.BeforeUpdateHook:
		bioComponentSequenceBeforeUpdateHooks = append(bioComponentSequenceBeforeUpdateHooks, bioComponentSequenceHook)
	case boil.AfterUpdateHook:
		bioComponentSequenceAfterUpdateHooks = append(bioComponentSequenceAfterUpdateHooks, bioComponentSequenceHook)
	case boil.BeforeDeleteHook:
		bioComponentSequenceBeforeDeleteHooks = append(bioComponentSequenceBeforeDeleteHooks, bioComponentSequenceHook)
	case boil.AfterDeleteHook:
		bioComponentSequenceAfterDeleteHooks = append(bioComponentSequenceAfterDeleteHooks, bioComponentSequenceHook)
	case boil.BeforeUpsertHook:
		bioComponentSequenceBeforeUpsertHooks = append(bioComponentSequenceBeforeUpsertHooks, bioComponentSequenceHook)
	case boil.AfterUpsertHook:
		bioComponentSequenceAfterUpsertHooks = append(bioComponentSequenceAfterUpsertHooks, bioComponentSequenceHook)
	}
}

// One returns a single bioComponentSequence record from the query.
func (q bioComponentSequenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BioComponentSequence, error) {
	o := &BioComponentSequence{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bio_component_sequences")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BioComponentSequence records from the query.
func (q bioComponentSequenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (BioComponentSequenceSlice, error) {
	var o []*BioComponentSequence

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BioComponentSequence slice")
	}

	if len(bioComponentSequenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BioComponentSequence records in the query.
func (q bioComponentSequenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bio_component_sequences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bioComponentSequenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bio_component_sequences exists")
	}

	return count > 0, nil
}

// ComponentBiotherapeuticComponents retrieves all the biotherapeutic_component's BiotherapeuticComponents with an executor via component_id column.
func (o *BioComponentSequence) ComponentBiotherapeuticComponents(mods ...qm.QueryMod) biotherapeuticComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"biotherapeutic_components\".\"component_id\"=?", o.ComponentID),
	)

	return BiotherapeuticComponents(queryMods...)
}

// LoadComponentBiotherapeuticComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bioComponentSequenceL) LoadComponentBiotherapeuticComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBioComponentSequence interface{}, mods queries.Applicator) error {
	var slice []*BioComponentSequence
	var object *BioComponentSequence

	if singular {
		object = maybeBioComponentSequence.(*BioComponentSequence)
	} else {
		slice = *maybeBioComponentSequence.(*[]*BioComponentSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bioComponentSequenceR{}
		}
		args = append(args, object.ComponentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bioComponentSequenceR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`biotherapeutic_components`),
		qm.WhereIn(`biotherapeutic_components.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load biotherapeutic_components")
	}

	var resultSlice []*BiotherapeuticComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice biotherapeutic_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on biotherapeutic_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biotherapeutic_components")
	}

	if len(biotherapeuticComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ComponentBiotherapeuticComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &biotherapeuticComponentR{}
			}
			foreign.R.Component = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ComponentID == foreign.ComponentID {
				local.R.ComponentBiotherapeuticComponents = append(local.R.ComponentBiotherapeuticComponents, foreign)
				if foreign.R == nil {
					foreign.R = &biotherapeuticComponentR{}
				}
				foreign.R.Component = local
				break
			}
		}
	}

	return nil
}

// AddComponentBiotherapeuticComponents adds the given related objects to the existing relationships
// of the bio_component_sequence, optionally inserting them as new records.
// Appends related to o.R.ComponentBiotherapeuticComponents.
// Sets related.R.Component appropriately.
func (o *BioComponentSequence) AddComponentBiotherapeuticComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BiotherapeuticComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentID = o.ComponentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"biotherapeutic_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
				strmangle.WhereClause("\"", "\"", 0, biotherapeuticComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ComponentID, rel.BiocompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentID = o.ComponentID
		}
	}

	if o.R == nil {
		o.R = &bioComponentSequenceR{
			ComponentBiotherapeuticComponents: related,
		}
	} else {
		o.R.ComponentBiotherapeuticComponents = append(o.R.ComponentBiotherapeuticComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &biotherapeuticComponentR{
				Component: o,
			}
		} else {
			rel.R.Component = o
		}
	}
	return nil
}

// BioComponentSequences retrieves all the records using an executor.
func BioComponentSequences(mods ...qm.QueryMod) bioComponentSequenceQuery {
	mods = append(mods, qm.From("\"bio_component_sequences\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bio_component_sequences\".*"})
	}

	return bioComponentSequenceQuery{q}
}

// FindBioComponentSequence retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBioComponentSequence(ctx context.Context, exec boil.ContextExecutor, componentID int64, selectCols ...string) (*BioComponentSequence, error) {
	bioComponentSequenceObj := &BioComponentSequence{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bio_component_sequences\" where \"component_id\"=?", sel,
	)

	q := queries.Raw(query, componentID)

	err := q.Bind(ctx, exec, bioComponentSequenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bio_component_sequences")
	}

	if err = bioComponentSequenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bioComponentSequenceObj, err
	}

	return bioComponentSequenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BioComponentSequence) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bio_component_sequences provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bioComponentSequenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bioComponentSequenceInsertCacheMut.RLock()
	cache, cached := bioComponentSequenceInsertCache[key]
	bioComponentSequenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bioComponentSequenceAllColumns,
			bioComponentSequenceColumnsWithDefault,
			bioComponentSequenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bio_component_sequences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bio_component_sequences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bio_component_sequences")
	}

	if !cached {
		bioComponentSequenceInsertCacheMut.Lock()
		bioComponentSequenceInsertCache[key] = cache
		bioComponentSequenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BioComponentSequence.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BioComponentSequence) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bioComponentSequenceUpdateCacheMut.RLock()
	cache, cached := bioComponentSequenceUpdateCache[key]
	bioComponentSequenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bioComponentSequenceAllColumns,
			bioComponentSequencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bio_component_sequences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bio_component_sequences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bioComponentSequencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, append(wl, bioComponentSequencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bio_component_sequences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bio_component_sequences")
	}

	if !cached {
		bioComponentSequenceUpdateCacheMut.Lock()
		bioComponentSequenceUpdateCache[key] = cache
		bioComponentSequenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bioComponentSequenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bio_component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bio_component_sequences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BioComponentSequenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioComponentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bio_component_sequences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioComponentSequencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bioComponentSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bioComponentSequence")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BioComponentSequence) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bio_component_sequences provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bioComponentSequenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bioComponentSequenceUpsertCacheMut.RLock()
	cache, cached := bioComponentSequenceUpsertCache[key]
	bioComponentSequenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bioComponentSequenceAllColumns,
			bioComponentSequenceColumnsWithDefault,
			bioComponentSequenceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bioComponentSequenceAllColumns,
			bioComponentSequencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bio_component_sequences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bioComponentSequencePrimaryKeyColumns))
			copy(conflict, bioComponentSequencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"bio_component_sequences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bioComponentSequenceType, bioComponentSequenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bio_component_sequences")
	}

	if !cached {
		bioComponentSequenceUpsertCacheMut.Lock()
		bioComponentSequenceUpsertCache[key] = cache
		bioComponentSequenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BioComponentSequence record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BioComponentSequence) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BioComponentSequence provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bioComponentSequencePrimaryKeyMapping)
	sql := "DELETE FROM \"bio_component_sequences\" WHERE \"component_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bio_component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bio_component_sequences")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bioComponentSequenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bioComponentSequenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bio_component_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bio_component_sequences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BioComponentSequenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bioComponentSequenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioComponentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bio_component_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioComponentSequencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bioComponentSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bio_component_sequences")
	}

	if len(bioComponentSequenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BioComponentSequence) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBioComponentSequence(ctx, exec, o.ComponentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BioComponentSequenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BioComponentSequenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioComponentSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bio_component_sequences\".* FROM \"bio_component_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioComponentSequencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BioComponentSequenceSlice")
	}

	*o = slice

	return nil
}

// BioComponentSequenceExists checks if the BioComponentSequence row exists.
func BioComponentSequenceExists(ctx context.Context, exec boil.ContextExecutor, componentID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bio_component_sequences\" where \"component_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, componentID)
	}
	row := exec.QueryRowContext(ctx, sql, componentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bio_component_sequences exists")
	}

	return exists, nil
}
