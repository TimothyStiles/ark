// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataValidityLookup is an object representing the database table.
type DataValidityLookup struct {
	DataValidityComment string      `boil:"data_validity_comment" json:"data_validity_comment" toml:"data_validity_comment" yaml:"data_validity_comment"`
	Description         null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *dataValidityLookupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataValidityLookupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataValidityLookupColumns = struct {
	DataValidityComment string
	Description         string
}{
	DataValidityComment: "data_validity_comment",
	Description:         "description",
}

var DataValidityLookupTableColumns = struct {
	DataValidityComment string
	Description         string
}{
	DataValidityComment: "data_validity_lookup.data_validity_comment",
	Description:         "data_validity_lookup.description",
}

// Generated where

var DataValidityLookupWhere = struct {
	DataValidityComment whereHelperstring
	Description         whereHelpernull_String
}{
	DataValidityComment: whereHelperstring{field: "\"data_validity_lookup\".\"data_validity_comment\""},
	Description:         whereHelpernull_String{field: "\"data_validity_lookup\".\"description\""},
}

// DataValidityLookupRels is where relationship names are stored.
var DataValidityLookupRels = struct {
	DataValidityCommentActivities string
}{
	DataValidityCommentActivities: "DataValidityCommentActivities",
}

// dataValidityLookupR is where relationships are stored.
type dataValidityLookupR struct {
	DataValidityCommentActivities ActivitySlice `boil:"DataValidityCommentActivities" json:"DataValidityCommentActivities" toml:"DataValidityCommentActivities" yaml:"DataValidityCommentActivities"`
}

// NewStruct creates a new relationship struct
func (*dataValidityLookupR) NewStruct() *dataValidityLookupR {
	return &dataValidityLookupR{}
}

func (r *dataValidityLookupR) GetDataValidityCommentActivities() ActivitySlice {
	if r == nil {
		return nil
	}
	return r.DataValidityCommentActivities
}

// dataValidityLookupL is where Load methods for each relationship are stored.
type dataValidityLookupL struct{}

var (
	dataValidityLookupAllColumns            = []string{"data_validity_comment", "description"}
	dataValidityLookupColumnsWithoutDefault = []string{"data_validity_comment"}
	dataValidityLookupColumnsWithDefault    = []string{"description"}
	dataValidityLookupPrimaryKeyColumns     = []string{"data_validity_comment"}
	dataValidityLookupGeneratedColumns      = []string{}
)

type (
	// DataValidityLookupSlice is an alias for a slice of pointers to DataValidityLookup.
	// This should almost always be used instead of []DataValidityLookup.
	DataValidityLookupSlice []*DataValidityLookup
	// DataValidityLookupHook is the signature for custom DataValidityLookup hook methods
	DataValidityLookupHook func(context.Context, boil.ContextExecutor, *DataValidityLookup) error

	dataValidityLookupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataValidityLookupType                 = reflect.TypeOf(&DataValidityLookup{})
	dataValidityLookupMapping              = queries.MakeStructMapping(dataValidityLookupType)
	dataValidityLookupPrimaryKeyMapping, _ = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, dataValidityLookupPrimaryKeyColumns)
	dataValidityLookupInsertCacheMut       sync.RWMutex
	dataValidityLookupInsertCache          = make(map[string]insertCache)
	dataValidityLookupUpdateCacheMut       sync.RWMutex
	dataValidityLookupUpdateCache          = make(map[string]updateCache)
	dataValidityLookupUpsertCacheMut       sync.RWMutex
	dataValidityLookupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataValidityLookupAfterSelectHooks []DataValidityLookupHook

var dataValidityLookupBeforeInsertHooks []DataValidityLookupHook
var dataValidityLookupAfterInsertHooks []DataValidityLookupHook

var dataValidityLookupBeforeUpdateHooks []DataValidityLookupHook
var dataValidityLookupAfterUpdateHooks []DataValidityLookupHook

var dataValidityLookupBeforeDeleteHooks []DataValidityLookupHook
var dataValidityLookupAfterDeleteHooks []DataValidityLookupHook

var dataValidityLookupBeforeUpsertHooks []DataValidityLookupHook
var dataValidityLookupAfterUpsertHooks []DataValidityLookupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataValidityLookup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataValidityLookup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataValidityLookup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataValidityLookup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataValidityLookup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataValidityLookup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataValidityLookup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataValidityLookup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataValidityLookup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataValidityLookupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataValidityLookupHook registers your hook function for all future operations.
func AddDataValidityLookupHook(hookPoint boil.HookPoint, dataValidityLookupHook DataValidityLookupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataValidityLookupAfterSelectHooks = append(dataValidityLookupAfterSelectHooks, dataValidityLookupHook)
	case boil.BeforeInsertHook:
		dataValidityLookupBeforeInsertHooks = append(dataValidityLookupBeforeInsertHooks, dataValidityLookupHook)
	case boil.AfterInsertHook:
		dataValidityLookupAfterInsertHooks = append(dataValidityLookupAfterInsertHooks, dataValidityLookupHook)
	case boil.BeforeUpdateHook:
		dataValidityLookupBeforeUpdateHooks = append(dataValidityLookupBeforeUpdateHooks, dataValidityLookupHook)
	case boil.AfterUpdateHook:
		dataValidityLookupAfterUpdateHooks = append(dataValidityLookupAfterUpdateHooks, dataValidityLookupHook)
	case boil.BeforeDeleteHook:
		dataValidityLookupBeforeDeleteHooks = append(dataValidityLookupBeforeDeleteHooks, dataValidityLookupHook)
	case boil.AfterDeleteHook:
		dataValidityLookupAfterDeleteHooks = append(dataValidityLookupAfterDeleteHooks, dataValidityLookupHook)
	case boil.BeforeUpsertHook:
		dataValidityLookupBeforeUpsertHooks = append(dataValidityLookupBeforeUpsertHooks, dataValidityLookupHook)
	case boil.AfterUpsertHook:
		dataValidityLookupAfterUpsertHooks = append(dataValidityLookupAfterUpsertHooks, dataValidityLookupHook)
	}
}

// One returns a single dataValidityLookup record from the query.
func (q dataValidityLookupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataValidityLookup, error) {
	o := &DataValidityLookup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_validity_lookup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataValidityLookup records from the query.
func (q dataValidityLookupQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataValidityLookupSlice, error) {
	var o []*DataValidityLookup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataValidityLookup slice")
	}

	if len(dataValidityLookupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataValidityLookup records in the query.
func (q dataValidityLookupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_validity_lookup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataValidityLookupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_validity_lookup exists")
	}

	return count > 0, nil
}

// DataValidityCommentActivities retrieves all the activity's Activities with an executor via data_validity_comment column.
func (o *DataValidityLookup) DataValidityCommentActivities(mods ...qm.QueryMod) activityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activities\".\"data_validity_comment\"=?", o.DataValidityComment),
	)

	return Activities(queryMods...)
}

// LoadDataValidityCommentActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataValidityLookupL) LoadDataValidityCommentActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataValidityLookup interface{}, mods queries.Applicator) error {
	var slice []*DataValidityLookup
	var object *DataValidityLookup

	if singular {
		object = maybeDataValidityLookup.(*DataValidityLookup)
	} else {
		slice = *maybeDataValidityLookup.(*[]*DataValidityLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataValidityLookupR{}
		}
		args = append(args, object.DataValidityComment)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataValidityLookupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DataValidityComment) {
					continue Outer
				}
			}

			args = append(args, obj.DataValidityComment)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.data_validity_comment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activities")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DataValidityCommentActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityR{}
			}
			foreign.R.DataValidityCommentDataValidityLookup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DataValidityComment, foreign.DataValidityComment) {
				local.R.DataValidityCommentActivities = append(local.R.DataValidityCommentActivities, foreign)
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.DataValidityCommentDataValidityLookup = local
				break
			}
		}
	}

	return nil
}

// AddDataValidityCommentActivities adds the given related objects to the existing relationships
// of the data_validity_lookup, optionally inserting them as new records.
// Appends related to o.R.DataValidityCommentActivities.
// Sets related.R.DataValidityCommentDataValidityLookup appropriately.
func (o *DataValidityLookup) AddDataValidityCommentActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DataValidityComment, o.DataValidityComment)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"data_validity_comment"}),
				strmangle.WhereClause("\"", "\"", 0, activityPrimaryKeyColumns),
			)
			values := []interface{}{o.DataValidityComment, rel.ActivityID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DataValidityComment, o.DataValidityComment)
		}
	}

	if o.R == nil {
		o.R = &dataValidityLookupR{
			DataValidityCommentActivities: related,
		}
	} else {
		o.R.DataValidityCommentActivities = append(o.R.DataValidityCommentActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityR{
				DataValidityCommentDataValidityLookup: o,
			}
		} else {
			rel.R.DataValidityCommentDataValidityLookup = o
		}
	}
	return nil
}

// SetDataValidityCommentActivities removes all previously related items of the
// data_validity_lookup replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DataValidityCommentDataValidityLookup's DataValidityCommentActivities accordingly.
// Replaces o.R.DataValidityCommentActivities with related.
// Sets related.R.DataValidityCommentDataValidityLookup's DataValidityCommentActivities accordingly.
func (o *DataValidityLookup) SetDataValidityCommentActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	query := "update \"activities\" set \"data_validity_comment\" = null where \"data_validity_comment\" = ?"
	values := []interface{}{o.DataValidityComment}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DataValidityCommentActivities {
			queries.SetScanner(&rel.DataValidityComment, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DataValidityCommentDataValidityLookup = nil
		}
		o.R.DataValidityCommentActivities = nil
	}

	return o.AddDataValidityCommentActivities(ctx, exec, insert, related...)
}

// RemoveDataValidityCommentActivities relationships from objects passed in.
// Removes related items from R.DataValidityCommentActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.DataValidityCommentDataValidityLookup.
func (o *DataValidityLookup) RemoveDataValidityCommentActivities(ctx context.Context, exec boil.ContextExecutor, related ...*Activity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DataValidityComment, nil)
		if rel.R != nil {
			rel.R.DataValidityCommentDataValidityLookup = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("data_validity_comment")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DataValidityCommentActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.DataValidityCommentActivities)
			if ln > 1 && i < ln-1 {
				o.R.DataValidityCommentActivities[i] = o.R.DataValidityCommentActivities[ln-1]
			}
			o.R.DataValidityCommentActivities = o.R.DataValidityCommentActivities[:ln-1]
			break
		}
	}

	return nil
}

// DataValidityLookups retrieves all the records using an executor.
func DataValidityLookups(mods ...qm.QueryMod) dataValidityLookupQuery {
	mods = append(mods, qm.From("\"data_validity_lookup\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"data_validity_lookup\".*"})
	}

	return dataValidityLookupQuery{q}
}

// FindDataValidityLookup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataValidityLookup(ctx context.Context, exec boil.ContextExecutor, dataValidityComment string, selectCols ...string) (*DataValidityLookup, error) {
	dataValidityLookupObj := &DataValidityLookup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"data_validity_lookup\" where \"data_validity_comment\"=?", sel,
	)

	q := queries.Raw(query, dataValidityComment)

	err := q.Bind(ctx, exec, dataValidityLookupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_validity_lookup")
	}

	if err = dataValidityLookupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataValidityLookupObj, err
	}

	return dataValidityLookupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataValidityLookup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_validity_lookup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataValidityLookupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataValidityLookupInsertCacheMut.RLock()
	cache, cached := dataValidityLookupInsertCache[key]
	dataValidityLookupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataValidityLookupAllColumns,
			dataValidityLookupColumnsWithDefault,
			dataValidityLookupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"data_validity_lookup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"data_validity_lookup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_validity_lookup")
	}

	if !cached {
		dataValidityLookupInsertCacheMut.Lock()
		dataValidityLookupInsertCache[key] = cache
		dataValidityLookupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataValidityLookup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataValidityLookup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataValidityLookupUpdateCacheMut.RLock()
	cache, cached := dataValidityLookupUpdateCache[key]
	dataValidityLookupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataValidityLookupAllColumns,
			dataValidityLookupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_validity_lookup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"data_validity_lookup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, dataValidityLookupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, append(wl, dataValidityLookupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_validity_lookup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_validity_lookup")
	}

	if !cached {
		dataValidityLookupUpdateCacheMut.Lock()
		dataValidityLookupUpdateCache[key] = cache
		dataValidityLookupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataValidityLookupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_validity_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_validity_lookup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataValidityLookupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataValidityLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"data_validity_lookup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataValidityLookupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataValidityLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataValidityLookup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataValidityLookup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_validity_lookup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataValidityLookupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataValidityLookupUpsertCacheMut.RLock()
	cache, cached := dataValidityLookupUpsertCache[key]
	dataValidityLookupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataValidityLookupAllColumns,
			dataValidityLookupColumnsWithDefault,
			dataValidityLookupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dataValidityLookupAllColumns,
			dataValidityLookupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert data_validity_lookup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dataValidityLookupPrimaryKeyColumns))
			copy(conflict, dataValidityLookupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"data_validity_lookup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataValidityLookupType, dataValidityLookupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert data_validity_lookup")
	}

	if !cached {
		dataValidityLookupUpsertCacheMut.Lock()
		dataValidityLookupUpsertCache[key] = cache
		dataValidityLookupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataValidityLookup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataValidityLookup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataValidityLookup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataValidityLookupPrimaryKeyMapping)
	sql := "DELETE FROM \"data_validity_lookup\" WHERE \"data_validity_comment\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_validity_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_validity_lookup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataValidityLookupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataValidityLookupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_validity_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_validity_lookup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataValidityLookupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataValidityLookupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataValidityLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"data_validity_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataValidityLookupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataValidityLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_validity_lookup")
	}

	if len(dataValidityLookupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataValidityLookup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataValidityLookup(ctx, exec, o.DataValidityComment)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataValidityLookupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataValidityLookupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataValidityLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"data_validity_lookup\".* FROM \"data_validity_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataValidityLookupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataValidityLookupSlice")
	}

	*o = slice

	return nil
}

// DataValidityLookupExists checks if the DataValidityLookup row exists.
func DataValidityLookupExists(ctx context.Context, exec boil.ContextExecutor, dataValidityComment string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"data_validity_lookup\" where \"data_validity_comment\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dataValidityComment)
	}
	row := exec.QueryRowContext(ctx, sql, dataValidityComment)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_validity_lookup exists")
	}

	return exists, nil
}
