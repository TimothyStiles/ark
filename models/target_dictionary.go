// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TargetDictionary is an object representing the database table.
type TargetDictionary struct {
	Tid              int64       `boil:"tid" json:"tid" toml:"tid" yaml:"tid"`
	TargetType       null.String `boil:"target_type" json:"target_type,omitempty" toml:"target_type" yaml:"target_type,omitempty"`
	PrefName         string      `boil:"pref_name" json:"pref_name" toml:"pref_name" yaml:"pref_name"`
	TaxID            null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	Organism         null.String `boil:"organism" json:"organism,omitempty" toml:"organism" yaml:"organism,omitempty"`
	ChemblID         string      `boil:"chembl_id" json:"chembl_id" toml:"chembl_id" yaml:"chembl_id"`
	SpeciesGroupFlag int16       `boil:"species_group_flag" json:"species_group_flag" toml:"species_group_flag" yaml:"species_group_flag"`

	R *targetDictionaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetDictionaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetDictionaryColumns = struct {
	Tid              string
	TargetType       string
	PrefName         string
	TaxID            string
	Organism         string
	ChemblID         string
	SpeciesGroupFlag string
}{
	Tid:              "tid",
	TargetType:       "target_type",
	PrefName:         "pref_name",
	TaxID:            "tax_id",
	Organism:         "organism",
	ChemblID:         "chembl_id",
	SpeciesGroupFlag: "species_group_flag",
}

var TargetDictionaryTableColumns = struct {
	Tid              string
	TargetType       string
	PrefName         string
	TaxID            string
	Organism         string
	ChemblID         string
	SpeciesGroupFlag string
}{
	Tid:              "target_dictionary.tid",
	TargetType:       "target_dictionary.target_type",
	PrefName:         "target_dictionary.pref_name",
	TaxID:            "target_dictionary.tax_id",
	Organism:         "target_dictionary.organism",
	ChemblID:         "target_dictionary.chembl_id",
	SpeciesGroupFlag: "target_dictionary.species_group_flag",
}

// Generated where

var TargetDictionaryWhere = struct {
	Tid              whereHelperint64
	TargetType       whereHelpernull_String
	PrefName         whereHelperstring
	TaxID            whereHelpernull_Int64
	Organism         whereHelpernull_String
	ChemblID         whereHelperstring
	SpeciesGroupFlag whereHelperint16
}{
	Tid:              whereHelperint64{field: "\"target_dictionary\".\"tid\""},
	TargetType:       whereHelpernull_String{field: "\"target_dictionary\".\"target_type\""},
	PrefName:         whereHelperstring{field: "\"target_dictionary\".\"pref_name\""},
	TaxID:            whereHelpernull_Int64{field: "\"target_dictionary\".\"tax_id\""},
	Organism:         whereHelpernull_String{field: "\"target_dictionary\".\"organism\""},
	ChemblID:         whereHelperstring{field: "\"target_dictionary\".\"chembl_id\""},
	SpeciesGroupFlag: whereHelperint16{field: "\"target_dictionary\".\"species_group_flag\""},
}

// TargetDictionaryRels is where relationship names are stored.
var TargetDictionaryRels = struct {
	TargetDictionaryTargetType string
	Chembl                     string
	TidAssays                  string
	TidBindingSites            string
	TidDrugMechanisms          string
	EnzymeTidMetabolisms       string
	TidTargetComponents        string
	TidTargetRelations         string
	RelatedTidTargetRelations  string
}{
	TargetDictionaryTargetType: "TargetDictionaryTargetType",
	Chembl:                     "Chembl",
	TidAssays:                  "TidAssays",
	TidBindingSites:            "TidBindingSites",
	TidDrugMechanisms:          "TidDrugMechanisms",
	EnzymeTidMetabolisms:       "EnzymeTidMetabolisms",
	TidTargetComponents:        "TidTargetComponents",
	TidTargetRelations:         "TidTargetRelations",
	RelatedTidTargetRelations:  "RelatedTidTargetRelations",
}

// targetDictionaryR is where relationships are stored.
type targetDictionaryR struct {
	TargetDictionaryTargetType *TargetType          `boil:"TargetDictionaryTargetType" json:"TargetDictionaryTargetType" toml:"TargetDictionaryTargetType" yaml:"TargetDictionaryTargetType"`
	Chembl                     *ChemblIDLookup      `boil:"Chembl" json:"Chembl" toml:"Chembl" yaml:"Chembl"`
	TidAssays                  AssaySlice           `boil:"TidAssays" json:"TidAssays" toml:"TidAssays" yaml:"TidAssays"`
	TidBindingSites            BindingSiteSlice     `boil:"TidBindingSites" json:"TidBindingSites" toml:"TidBindingSites" yaml:"TidBindingSites"`
	TidDrugMechanisms          DrugMechanismSlice   `boil:"TidDrugMechanisms" json:"TidDrugMechanisms" toml:"TidDrugMechanisms" yaml:"TidDrugMechanisms"`
	EnzymeTidMetabolisms       MetabolismSlice      `boil:"EnzymeTidMetabolisms" json:"EnzymeTidMetabolisms" toml:"EnzymeTidMetabolisms" yaml:"EnzymeTidMetabolisms"`
	TidTargetComponents        TargetComponentSlice `boil:"TidTargetComponents" json:"TidTargetComponents" toml:"TidTargetComponents" yaml:"TidTargetComponents"`
	TidTargetRelations         TargetRelationSlice  `boil:"TidTargetRelations" json:"TidTargetRelations" toml:"TidTargetRelations" yaml:"TidTargetRelations"`
	RelatedTidTargetRelations  TargetRelationSlice  `boil:"RelatedTidTargetRelations" json:"RelatedTidTargetRelations" toml:"RelatedTidTargetRelations" yaml:"RelatedTidTargetRelations"`
}

// NewStruct creates a new relationship struct
func (*targetDictionaryR) NewStruct() *targetDictionaryR {
	return &targetDictionaryR{}
}

func (r *targetDictionaryR) GetTargetDictionaryTargetType() *TargetType {
	if r == nil {
		return nil
	}
	return r.TargetDictionaryTargetType
}

func (r *targetDictionaryR) GetChembl() *ChemblIDLookup {
	if r == nil {
		return nil
	}
	return r.Chembl
}

func (r *targetDictionaryR) GetTidAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.TidAssays
}

func (r *targetDictionaryR) GetTidBindingSites() BindingSiteSlice {
	if r == nil {
		return nil
	}
	return r.TidBindingSites
}

func (r *targetDictionaryR) GetTidDrugMechanisms() DrugMechanismSlice {
	if r == nil {
		return nil
	}
	return r.TidDrugMechanisms
}

func (r *targetDictionaryR) GetEnzymeTidMetabolisms() MetabolismSlice {
	if r == nil {
		return nil
	}
	return r.EnzymeTidMetabolisms
}

func (r *targetDictionaryR) GetTidTargetComponents() TargetComponentSlice {
	if r == nil {
		return nil
	}
	return r.TidTargetComponents
}

func (r *targetDictionaryR) GetTidTargetRelations() TargetRelationSlice {
	if r == nil {
		return nil
	}
	return r.TidTargetRelations
}

func (r *targetDictionaryR) GetRelatedTidTargetRelations() TargetRelationSlice {
	if r == nil {
		return nil
	}
	return r.RelatedTidTargetRelations
}

// targetDictionaryL is where Load methods for each relationship are stored.
type targetDictionaryL struct{}

var (
	targetDictionaryAllColumns            = []string{"tid", "target_type", "pref_name", "tax_id", "organism", "chembl_id", "species_group_flag"}
	targetDictionaryColumnsWithoutDefault = []string{"tid", "pref_name", "chembl_id", "species_group_flag"}
	targetDictionaryColumnsWithDefault    = []string{"target_type", "tax_id", "organism"}
	targetDictionaryPrimaryKeyColumns     = []string{"tid"}
	targetDictionaryGeneratedColumns      = []string{}
)

type (
	// TargetDictionarySlice is an alias for a slice of pointers to TargetDictionary.
	// This should almost always be used instead of []TargetDictionary.
	TargetDictionarySlice []*TargetDictionary
	// TargetDictionaryHook is the signature for custom TargetDictionary hook methods
	TargetDictionaryHook func(context.Context, boil.ContextExecutor, *TargetDictionary) error

	targetDictionaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetDictionaryType                 = reflect.TypeOf(&TargetDictionary{})
	targetDictionaryMapping              = queries.MakeStructMapping(targetDictionaryType)
	targetDictionaryPrimaryKeyMapping, _ = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, targetDictionaryPrimaryKeyColumns)
	targetDictionaryInsertCacheMut       sync.RWMutex
	targetDictionaryInsertCache          = make(map[string]insertCache)
	targetDictionaryUpdateCacheMut       sync.RWMutex
	targetDictionaryUpdateCache          = make(map[string]updateCache)
	targetDictionaryUpsertCacheMut       sync.RWMutex
	targetDictionaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetDictionaryAfterSelectHooks []TargetDictionaryHook

var targetDictionaryBeforeInsertHooks []TargetDictionaryHook
var targetDictionaryAfterInsertHooks []TargetDictionaryHook

var targetDictionaryBeforeUpdateHooks []TargetDictionaryHook
var targetDictionaryAfterUpdateHooks []TargetDictionaryHook

var targetDictionaryBeforeDeleteHooks []TargetDictionaryHook
var targetDictionaryAfterDeleteHooks []TargetDictionaryHook

var targetDictionaryBeforeUpsertHooks []TargetDictionaryHook
var targetDictionaryAfterUpsertHooks []TargetDictionaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TargetDictionary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TargetDictionary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TargetDictionary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TargetDictionary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TargetDictionary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TargetDictionary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TargetDictionary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TargetDictionary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TargetDictionary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetDictionaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetDictionaryHook registers your hook function for all future operations.
func AddTargetDictionaryHook(hookPoint boil.HookPoint, targetDictionaryHook TargetDictionaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		targetDictionaryAfterSelectHooks = append(targetDictionaryAfterSelectHooks, targetDictionaryHook)
	case boil.BeforeInsertHook:
		targetDictionaryBeforeInsertHooks = append(targetDictionaryBeforeInsertHooks, targetDictionaryHook)
	case boil.AfterInsertHook:
		targetDictionaryAfterInsertHooks = append(targetDictionaryAfterInsertHooks, targetDictionaryHook)
	case boil.BeforeUpdateHook:
		targetDictionaryBeforeUpdateHooks = append(targetDictionaryBeforeUpdateHooks, targetDictionaryHook)
	case boil.AfterUpdateHook:
		targetDictionaryAfterUpdateHooks = append(targetDictionaryAfterUpdateHooks, targetDictionaryHook)
	case boil.BeforeDeleteHook:
		targetDictionaryBeforeDeleteHooks = append(targetDictionaryBeforeDeleteHooks, targetDictionaryHook)
	case boil.AfterDeleteHook:
		targetDictionaryAfterDeleteHooks = append(targetDictionaryAfterDeleteHooks, targetDictionaryHook)
	case boil.BeforeUpsertHook:
		targetDictionaryBeforeUpsertHooks = append(targetDictionaryBeforeUpsertHooks, targetDictionaryHook)
	case boil.AfterUpsertHook:
		targetDictionaryAfterUpsertHooks = append(targetDictionaryAfterUpsertHooks, targetDictionaryHook)
	}
}

// One returns a single targetDictionary record from the query.
func (q targetDictionaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TargetDictionary, error) {
	o := &TargetDictionary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for target_dictionary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TargetDictionary records from the query.
func (q targetDictionaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetDictionarySlice, error) {
	var o []*TargetDictionary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TargetDictionary slice")
	}

	if len(targetDictionaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TargetDictionary records in the query.
func (q targetDictionaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count target_dictionary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetDictionaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if target_dictionary exists")
	}

	return count > 0, nil
}

// TargetDictionaryTargetType pointed to by the foreign key.
func (o *TargetDictionary) TargetDictionaryTargetType(mods ...qm.QueryMod) targetTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"target_type\" = ?", o.TargetType),
	}

	queryMods = append(queryMods, mods...)

	return TargetTypes(queryMods...)
}

// Chembl pointed to by the foreign key.
func (o *TargetDictionary) Chembl(mods ...qm.QueryMod) chemblIDLookupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return ChemblIDLookups(queryMods...)
}

// TidAssays retrieves all the assay's Assays with an executor via tid column.
func (o *TargetDictionary) TidAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"tid\"=?", o.Tid),
	)

	return Assays(queryMods...)
}

// TidBindingSites retrieves all the binding_site's BindingSites with an executor via tid column.
func (o *TargetDictionary) TidBindingSites(mods ...qm.QueryMod) bindingSiteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"binding_sites\".\"tid\"=?", o.Tid),
	)

	return BindingSites(queryMods...)
}

// TidDrugMechanisms retrieves all the drug_mechanism's DrugMechanisms with an executor via tid column.
func (o *TargetDictionary) TidDrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_mechanism\".\"tid\"=?", o.Tid),
	)

	return DrugMechanisms(queryMods...)
}

// EnzymeTidMetabolisms retrieves all the metabolism's Metabolisms with an executor via enzyme_tid column.
func (o *TargetDictionary) EnzymeTidMetabolisms(mods ...qm.QueryMod) metabolismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"metabolism\".\"enzyme_tid\"=?", o.Tid),
	)

	return Metabolisms(queryMods...)
}

// TidTargetComponents retrieves all the target_component's TargetComponents with an executor via tid column.
func (o *TargetDictionary) TidTargetComponents(mods ...qm.QueryMod) targetComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"target_components\".\"tid\"=?", o.Tid),
	)

	return TargetComponents(queryMods...)
}

// TidTargetRelations retrieves all the target_relation's TargetRelations with an executor via tid column.
func (o *TargetDictionary) TidTargetRelations(mods ...qm.QueryMod) targetRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"target_relations\".\"tid\"=?", o.Tid),
	)

	return TargetRelations(queryMods...)
}

// RelatedTidTargetRelations retrieves all the target_relation's TargetRelations with an executor via related_tid column.
func (o *TargetDictionary) RelatedTidTargetRelations(mods ...qm.QueryMod) targetRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"target_relations\".\"related_tid\"=?", o.Tid),
	)

	return TargetRelations(queryMods...)
}

// LoadTargetDictionaryTargetType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetDictionaryL) LoadTargetDictionaryTargetType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		if !queries.IsNil(object.TargetType) {
			args = append(args, object.TargetType)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TargetType) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TargetType) {
				args = append(args, obj.TargetType)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_type`),
		qm.WhereIn(`target_type.target_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetType")
	}

	var resultSlice []*TargetType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_type")
	}

	if len(targetDictionaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetDictionaryTargetType = foreign
		if foreign.R == nil {
			foreign.R = &targetTypeR{}
		}
		foreign.R.TargetDictionaries = append(foreign.R.TargetDictionaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TargetType, foreign.TargetType) {
				local.R.TargetDictionaryTargetType = foreign
				if foreign.R == nil {
					foreign.R = &targetTypeR{}
				}
				foreign.R.TargetDictionaries = append(foreign.R.TargetDictionaries, local)
				break
			}
		}
	}

	return nil
}

// LoadChembl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetDictionaryL) LoadChembl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.ChemblID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chembl_id_lookup`),
		qm.WhereIn(`chembl_id_lookup.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChemblIDLookup")
	}

	var resultSlice []*ChemblIDLookup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChemblIDLookup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chembl_id_lookup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chembl_id_lookup")
	}

	if len(targetDictionaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chembl = foreign
		if foreign.R == nil {
			foreign.R = &chemblIDLookupR{}
		}
		foreign.R.ChemblTargetDictionary = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.Chembl = foreign
				if foreign.R == nil {
					foreign.R = &chemblIDLookupR{}
				}
				foreign.R.ChemblTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTidAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadTidAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TidAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.TidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Tid, foreign.Tid) {
				local.R.TidAssays = append(local.R.TidAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.TidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTidBindingSites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadTidBindingSites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`binding_sites`),
		qm.WhereIn(`binding_sites.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load binding_sites")
	}

	var resultSlice []*BindingSite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice binding_sites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on binding_sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for binding_sites")
	}

	if len(bindingSiteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TidBindingSites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bindingSiteR{}
			}
			foreign.R.TidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Tid, foreign.Tid) {
				local.R.TidBindingSites = append(local.R.TidBindingSites, foreign)
				if foreign.R == nil {
					foreign.R = &bindingSiteR{}
				}
				foreign.R.TidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTidDrugMechanisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadTidDrugMechanisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_mechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_mechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TidDrugMechanisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugMechanismR{}
			}
			foreign.R.TidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Tid, foreign.Tid) {
				local.R.TidDrugMechanisms = append(local.R.TidDrugMechanisms, foreign)
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.TidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadEnzymeTidMetabolisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadEnzymeTidMetabolisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism`),
		qm.WhereIn(`metabolism.enzyme_tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metabolism")
	}

	var resultSlice []*Metabolism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice metabolism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on metabolism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EnzymeTidMetabolisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metabolismR{}
			}
			foreign.R.EnzymeTidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Tid, foreign.EnzymeTid) {
				local.R.EnzymeTidMetabolisms = append(local.R.EnzymeTidMetabolisms, foreign)
				if foreign.R == nil {
					foreign.R = &metabolismR{}
				}
				foreign.R.EnzymeTidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTidTargetComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadTidTargetComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if a == obj.Tid {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_components`),
		qm.WhereIn(`target_components.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load target_components")
	}

	var resultSlice []*TargetComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice target_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on target_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_components")
	}

	if len(targetComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TidTargetComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetComponentR{}
			}
			foreign.R.TidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Tid == foreign.Tid {
				local.R.TidTargetComponents = append(local.R.TidTargetComponents, foreign)
				if foreign.R == nil {
					foreign.R = &targetComponentR{}
				}
				foreign.R.TidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTidTargetRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadTidTargetRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if a == obj.Tid {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_relations`),
		qm.WhereIn(`target_relations.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load target_relations")
	}

	var resultSlice []*TargetRelation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice target_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on target_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_relations")
	}

	if len(targetRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TidTargetRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetRelationR{}
			}
			foreign.R.TidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Tid == foreign.Tid {
				local.R.TidTargetRelations = append(local.R.TidTargetRelations, foreign)
				if foreign.R == nil {
					foreign.R = &targetRelationR{}
				}
				foreign.R.TidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadRelatedTidTargetRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (targetDictionaryL) LoadRelatedTidTargetRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetDictionary interface{}, mods queries.Applicator) error {
	var slice []*TargetDictionary
	var object *TargetDictionary

	if singular {
		object = maybeTargetDictionary.(*TargetDictionary)
	} else {
		slice = *maybeTargetDictionary.(*[]*TargetDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetDictionaryR{}
		}
		args = append(args, object.Tid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetDictionaryR{}
			}

			for _, a := range args {
				if a == obj.Tid {
					continue Outer
				}
			}

			args = append(args, obj.Tid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_relations`),
		qm.WhereIn(`target_relations.related_tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load target_relations")
	}

	var resultSlice []*TargetRelation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice target_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on target_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_relations")
	}

	if len(targetRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedTidTargetRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetRelationR{}
			}
			foreign.R.RelatedTidTargetDictionary = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Tid == foreign.RelatedTid {
				local.R.RelatedTidTargetRelations = append(local.R.RelatedTidTargetRelations, foreign)
				if foreign.R == nil {
					foreign.R = &targetRelationR{}
				}
				foreign.R.RelatedTidTargetDictionary = local
				break
			}
		}
	}

	return nil
}

// SetTargetDictionaryTargetType of the targetDictionary to the related item.
// Sets o.R.TargetDictionaryTargetType to related.
// Adds o to related.R.TargetDictionaries.
func (o *TargetDictionary) SetTargetDictionaryTargetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"target_type"}),
		strmangle.WhereClause("\"", "\"", 0, targetDictionaryPrimaryKeyColumns),
	)
	values := []interface{}{related.TargetType, o.Tid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TargetType, related.TargetType)
	if o.R == nil {
		o.R = &targetDictionaryR{
			TargetDictionaryTargetType: related,
		}
	} else {
		o.R.TargetDictionaryTargetType = related
	}

	if related.R == nil {
		related.R = &targetTypeR{
			TargetDictionaries: TargetDictionarySlice{o},
		}
	} else {
		related.R.TargetDictionaries = append(related.R.TargetDictionaries, o)
	}

	return nil
}

// RemoveTargetDictionaryTargetType relationship.
// Sets o.R.TargetDictionaryTargetType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TargetDictionary) RemoveTargetDictionaryTargetType(ctx context.Context, exec boil.ContextExecutor, related *TargetType) error {
	var err error

	queries.SetScanner(&o.TargetType, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("target_type")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TargetDictionaryTargetType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TargetDictionaries {
		if queries.Equal(o.TargetType, ri.TargetType) {
			continue
		}

		ln := len(related.R.TargetDictionaries)
		if ln > 1 && i < ln-1 {
			related.R.TargetDictionaries[i] = related.R.TargetDictionaries[ln-1]
		}
		related.R.TargetDictionaries = related.R.TargetDictionaries[:ln-1]
		break
	}
	return nil
}

// SetChembl of the targetDictionary to the related item.
// Sets o.R.Chembl to related.
// Adds o to related.R.ChemblTargetDictionary.
func (o *TargetDictionary) SetChembl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChemblIDLookup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
		strmangle.WhereClause("\"", "\"", 0, targetDictionaryPrimaryKeyColumns),
	)
	values := []interface{}{related.ChemblID, o.Tid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChemblID = related.ChemblID
	if o.R == nil {
		o.R = &targetDictionaryR{
			Chembl: related,
		}
	} else {
		o.R.Chembl = related
	}

	if related.R == nil {
		related.R = &chemblIDLookupR{
			ChemblTargetDictionary: o,
		}
	} else {
		related.R.ChemblTargetDictionary = o
	}

	return nil
}

// AddTidAssays adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.TidAssays.
// Sets related.R.TidTargetDictionary appropriately.
func (o *TargetDictionary) AddTidAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Tid, o.Tid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Tid, o.Tid)
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			TidAssays: related,
		}
	} else {
		o.R.TidAssays = append(o.R.TidAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				TidTargetDictionary: o,
			}
		} else {
			rel.R.TidTargetDictionary = o
		}
	}
	return nil
}

// SetTidAssays removes all previously related items of the
// target_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TidTargetDictionary's TidAssays accordingly.
// Replaces o.R.TidAssays with related.
// Sets related.R.TidTargetDictionary's TidAssays accordingly.
func (o *TargetDictionary) SetTidAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"tid\" = null where \"tid\" = ?"
	values := []interface{}{o.Tid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TidAssays {
			queries.SetScanner(&rel.Tid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TidTargetDictionary = nil
		}
		o.R.TidAssays = nil
	}

	return o.AddTidAssays(ctx, exec, insert, related...)
}

// RemoveTidAssays relationships from objects passed in.
// Removes related items from R.TidAssays (uses pointer comparison, removal does not keep order)
// Sets related.R.TidTargetDictionary.
func (o *TargetDictionary) RemoveTidAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Tid, nil)
		if rel.R != nil {
			rel.R.TidTargetDictionary = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TidAssays {
			if rel != ri {
				continue
			}

			ln := len(o.R.TidAssays)
			if ln > 1 && i < ln-1 {
				o.R.TidAssays[i] = o.R.TidAssays[ln-1]
			}
			o.R.TidAssays = o.R.TidAssays[:ln-1]
			break
		}
	}

	return nil
}

// AddTidBindingSites adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.TidBindingSites.
// Sets related.R.TidTargetDictionary appropriately.
func (o *TargetDictionary) AddTidBindingSites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BindingSite) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Tid, o.Tid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"binding_sites\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
				strmangle.WhereClause("\"", "\"", 0, bindingSitePrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.SiteID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Tid, o.Tid)
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			TidBindingSites: related,
		}
	} else {
		o.R.TidBindingSites = append(o.R.TidBindingSites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bindingSiteR{
				TidTargetDictionary: o,
			}
		} else {
			rel.R.TidTargetDictionary = o
		}
	}
	return nil
}

// SetTidBindingSites removes all previously related items of the
// target_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TidTargetDictionary's TidBindingSites accordingly.
// Replaces o.R.TidBindingSites with related.
// Sets related.R.TidTargetDictionary's TidBindingSites accordingly.
func (o *TargetDictionary) SetTidBindingSites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BindingSite) error {
	query := "update \"binding_sites\" set \"tid\" = null where \"tid\" = ?"
	values := []interface{}{o.Tid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TidBindingSites {
			queries.SetScanner(&rel.Tid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TidTargetDictionary = nil
		}
		o.R.TidBindingSites = nil
	}

	return o.AddTidBindingSites(ctx, exec, insert, related...)
}

// RemoveTidBindingSites relationships from objects passed in.
// Removes related items from R.TidBindingSites (uses pointer comparison, removal does not keep order)
// Sets related.R.TidTargetDictionary.
func (o *TargetDictionary) RemoveTidBindingSites(ctx context.Context, exec boil.ContextExecutor, related ...*BindingSite) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Tid, nil)
		if rel.R != nil {
			rel.R.TidTargetDictionary = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TidBindingSites {
			if rel != ri {
				continue
			}

			ln := len(o.R.TidBindingSites)
			if ln > 1 && i < ln-1 {
				o.R.TidBindingSites[i] = o.R.TidBindingSites[ln-1]
			}
			o.R.TidBindingSites = o.R.TidBindingSites[:ln-1]
			break
		}
	}

	return nil
}

// AddTidDrugMechanisms adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.TidDrugMechanisms.
// Sets related.R.TidTargetDictionary appropriately.
func (o *TargetDictionary) AddTidDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Tid, o.Tid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_mechanism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
				strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.MecID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Tid, o.Tid)
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			TidDrugMechanisms: related,
		}
	} else {
		o.R.TidDrugMechanisms = append(o.R.TidDrugMechanisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugMechanismR{
				TidTargetDictionary: o,
			}
		} else {
			rel.R.TidTargetDictionary = o
		}
	}
	return nil
}

// SetTidDrugMechanisms removes all previously related items of the
// target_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TidTargetDictionary's TidDrugMechanisms accordingly.
// Replaces o.R.TidDrugMechanisms with related.
// Sets related.R.TidTargetDictionary's TidDrugMechanisms accordingly.
func (o *TargetDictionary) SetTidDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	query := "update \"drug_mechanism\" set \"tid\" = null where \"tid\" = ?"
	values := []interface{}{o.Tid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TidDrugMechanisms {
			queries.SetScanner(&rel.Tid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TidTargetDictionary = nil
		}
		o.R.TidDrugMechanisms = nil
	}

	return o.AddTidDrugMechanisms(ctx, exec, insert, related...)
}

// RemoveTidDrugMechanisms relationships from objects passed in.
// Removes related items from R.TidDrugMechanisms (uses pointer comparison, removal does not keep order)
// Sets related.R.TidTargetDictionary.
func (o *TargetDictionary) RemoveTidDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, related ...*DrugMechanism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Tid, nil)
		if rel.R != nil {
			rel.R.TidTargetDictionary = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TidDrugMechanisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.TidDrugMechanisms)
			if ln > 1 && i < ln-1 {
				o.R.TidDrugMechanisms[i] = o.R.TidDrugMechanisms[ln-1]
			}
			o.R.TidDrugMechanisms = o.R.TidDrugMechanisms[:ln-1]
			break
		}
	}

	return nil
}

// AddEnzymeTidMetabolisms adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.EnzymeTidMetabolisms.
// Sets related.R.EnzymeTidTargetDictionary appropriately.
func (o *TargetDictionary) AddEnzymeTidMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EnzymeTid, o.Tid)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"metabolism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"enzyme_tid"}),
				strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.MetID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EnzymeTid, o.Tid)
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			EnzymeTidMetabolisms: related,
		}
	} else {
		o.R.EnzymeTidMetabolisms = append(o.R.EnzymeTidMetabolisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metabolismR{
				EnzymeTidTargetDictionary: o,
			}
		} else {
			rel.R.EnzymeTidTargetDictionary = o
		}
	}
	return nil
}

// SetEnzymeTidMetabolisms removes all previously related items of the
// target_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EnzymeTidTargetDictionary's EnzymeTidMetabolisms accordingly.
// Replaces o.R.EnzymeTidMetabolisms with related.
// Sets related.R.EnzymeTidTargetDictionary's EnzymeTidMetabolisms accordingly.
func (o *TargetDictionary) SetEnzymeTidMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	query := "update \"metabolism\" set \"enzyme_tid\" = null where \"enzyme_tid\" = ?"
	values := []interface{}{o.Tid}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EnzymeTidMetabolisms {
			queries.SetScanner(&rel.EnzymeTid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EnzymeTidTargetDictionary = nil
		}
		o.R.EnzymeTidMetabolisms = nil
	}

	return o.AddEnzymeTidMetabolisms(ctx, exec, insert, related...)
}

// RemoveEnzymeTidMetabolisms relationships from objects passed in.
// Removes related items from R.EnzymeTidMetabolisms (uses pointer comparison, removal does not keep order)
// Sets related.R.EnzymeTidTargetDictionary.
func (o *TargetDictionary) RemoveEnzymeTidMetabolisms(ctx context.Context, exec boil.ContextExecutor, related ...*Metabolism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EnzymeTid, nil)
		if rel.R != nil {
			rel.R.EnzymeTidTargetDictionary = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("enzyme_tid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EnzymeTidMetabolisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.EnzymeTidMetabolisms)
			if ln > 1 && i < ln-1 {
				o.R.EnzymeTidMetabolisms[i] = o.R.EnzymeTidMetabolisms[ln-1]
			}
			o.R.EnzymeTidMetabolisms = o.R.EnzymeTidMetabolisms[:ln-1]
			break
		}
	}

	return nil
}

// AddTidTargetComponents adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.TidTargetComponents.
// Sets related.R.TidTargetDictionary appropriately.
func (o *TargetDictionary) AddTidTargetComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Tid = o.Tid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"target_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
				strmangle.WhereClause("\"", "\"", 0, targetComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.TargcompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Tid = o.Tid
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			TidTargetComponents: related,
		}
	} else {
		o.R.TidTargetComponents = append(o.R.TidTargetComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetComponentR{
				TidTargetDictionary: o,
			}
		} else {
			rel.R.TidTargetDictionary = o
		}
	}
	return nil
}

// AddTidTargetRelations adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.TidTargetRelations.
// Sets related.R.TidTargetDictionary appropriately.
func (o *TargetDictionary) AddTidTargetRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetRelation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Tid = o.Tid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"target_relations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
				strmangle.WhereClause("\"", "\"", 0, targetRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.TargrelID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Tid = o.Tid
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			TidTargetRelations: related,
		}
	} else {
		o.R.TidTargetRelations = append(o.R.TidTargetRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetRelationR{
				TidTargetDictionary: o,
			}
		} else {
			rel.R.TidTargetDictionary = o
		}
	}
	return nil
}

// AddRelatedTidTargetRelations adds the given related objects to the existing relationships
// of the target_dictionary, optionally inserting them as new records.
// Appends related to o.R.RelatedTidTargetRelations.
// Sets related.R.RelatedTidTargetDictionary appropriately.
func (o *TargetDictionary) AddRelatedTidTargetRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TargetRelation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RelatedTid = o.Tid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"target_relations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"related_tid"}),
				strmangle.WhereClause("\"", "\"", 0, targetRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.Tid, rel.TargrelID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RelatedTid = o.Tid
		}
	}

	if o.R == nil {
		o.R = &targetDictionaryR{
			RelatedTidTargetRelations: related,
		}
	} else {
		o.R.RelatedTidTargetRelations = append(o.R.RelatedTidTargetRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetRelationR{
				RelatedTidTargetDictionary: o,
			}
		} else {
			rel.R.RelatedTidTargetDictionary = o
		}
	}
	return nil
}

// TargetDictionaries retrieves all the records using an executor.
func TargetDictionaries(mods ...qm.QueryMod) targetDictionaryQuery {
	mods = append(mods, qm.From("\"target_dictionary\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"target_dictionary\".*"})
	}

	return targetDictionaryQuery{q}
}

// FindTargetDictionary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTargetDictionary(ctx context.Context, exec boil.ContextExecutor, tid int64, selectCols ...string) (*TargetDictionary, error) {
	targetDictionaryObj := &TargetDictionary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"target_dictionary\" where \"tid\"=?", sel,
	)

	q := queries.Raw(query, tid)

	err := q.Bind(ctx, exec, targetDictionaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from target_dictionary")
	}

	if err = targetDictionaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return targetDictionaryObj, err
	}

	return targetDictionaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TargetDictionary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_dictionary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetDictionaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetDictionaryInsertCacheMut.RLock()
	cache, cached := targetDictionaryInsertCache[key]
	targetDictionaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetDictionaryAllColumns,
			targetDictionaryColumnsWithDefault,
			targetDictionaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"target_dictionary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"target_dictionary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into target_dictionary")
	}

	if !cached {
		targetDictionaryInsertCacheMut.Lock()
		targetDictionaryInsertCache[key] = cache
		targetDictionaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TargetDictionary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TargetDictionary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetDictionaryUpdateCacheMut.RLock()
	cache, cached := targetDictionaryUpdateCache[key]
	targetDictionaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetDictionaryAllColumns,
			targetDictionaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update target_dictionary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"target_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, targetDictionaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, append(wl, targetDictionaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update target_dictionary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for target_dictionary")
	}

	if !cached {
		targetDictionaryUpdateCacheMut.Lock()
		targetDictionaryUpdateCache[key] = cache
		targetDictionaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetDictionaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for target_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for target_dictionary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetDictionarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"target_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetDictionaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in targetDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all targetDictionary")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TargetDictionary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_dictionary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetDictionaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetDictionaryUpsertCacheMut.RLock()
	cache, cached := targetDictionaryUpsertCache[key]
	targetDictionaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			targetDictionaryAllColumns,
			targetDictionaryColumnsWithDefault,
			targetDictionaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			targetDictionaryAllColumns,
			targetDictionaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert target_dictionary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(targetDictionaryPrimaryKeyColumns))
			copy(conflict, targetDictionaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"target_dictionary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetDictionaryType, targetDictionaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert target_dictionary")
	}

	if !cached {
		targetDictionaryUpsertCacheMut.Lock()
		targetDictionaryUpsertCache[key] = cache
		targetDictionaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TargetDictionary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TargetDictionary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TargetDictionary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetDictionaryPrimaryKeyMapping)
	sql := "DELETE FROM \"target_dictionary\" WHERE \"tid\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from target_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for target_dictionary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetDictionaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetDictionaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from target_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_dictionary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetDictionarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetDictionaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"target_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetDictionaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targetDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_dictionary")
	}

	if len(targetDictionaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TargetDictionary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTargetDictionary(ctx, exec, o.Tid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetDictionarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetDictionarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"target_dictionary\".* FROM \"target_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetDictionaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetDictionarySlice")
	}

	*o = slice

	return nil
}

// TargetDictionaryExists checks if the TargetDictionary row exists.
func TargetDictionaryExists(ctx context.Context, exec boil.ContextExecutor, tid int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"target_dictionary\" where \"tid\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tid)
	}
	row := exec.QueryRowContext(ctx, sql, tid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if target_dictionary exists")
	}

	return exists, nil
}
