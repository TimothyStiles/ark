// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WarningRef is an object representing the database table.
type WarningRef struct {
	WarnrefID int64       `boil:"warnref_id" json:"warnref_id" toml:"warnref_id" yaml:"warnref_id"`
	WarningID null.Int64  `boil:"warning_id" json:"warning_id,omitempty" toml:"warning_id" yaml:"warning_id,omitempty"`
	RefType   null.String `boil:"ref_type" json:"ref_type,omitempty" toml:"ref_type" yaml:"ref_type,omitempty"`
	RefID     null.String `boil:"ref_id" json:"ref_id,omitempty" toml:"ref_id" yaml:"ref_id,omitempty"`
	RefURL    null.String `boil:"ref_url" json:"ref_url,omitempty" toml:"ref_url" yaml:"ref_url,omitempty"`

	R *warningRefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warningRefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarningRefColumns = struct {
	WarnrefID string
	WarningID string
	RefType   string
	RefID     string
	RefURL    string
}{
	WarnrefID: "warnref_id",
	WarningID: "warning_id",
	RefType:   "ref_type",
	RefID:     "ref_id",
	RefURL:    "ref_url",
}

var WarningRefTableColumns = struct {
	WarnrefID string
	WarningID string
	RefType   string
	RefID     string
	RefURL    string
}{
	WarnrefID: "warning_refs.warnref_id",
	WarningID: "warning_refs.warning_id",
	RefType:   "warning_refs.ref_type",
	RefID:     "warning_refs.ref_id",
	RefURL:    "warning_refs.ref_url",
}

// Generated where

var WarningRefWhere = struct {
	WarnrefID whereHelperint64
	WarningID whereHelpernull_Int64
	RefType   whereHelpernull_String
	RefID     whereHelpernull_String
	RefURL    whereHelpernull_String
}{
	WarnrefID: whereHelperint64{field: "\"warning_refs\".\"warnref_id\""},
	WarningID: whereHelpernull_Int64{field: "\"warning_refs\".\"warning_id\""},
	RefType:   whereHelpernull_String{field: "\"warning_refs\".\"ref_type\""},
	RefID:     whereHelpernull_String{field: "\"warning_refs\".\"ref_id\""},
	RefURL:    whereHelpernull_String{field: "\"warning_refs\".\"ref_url\""},
}

// WarningRefRels is where relationship names are stored.
var WarningRefRels = struct {
	Warning string
}{
	Warning: "Warning",
}

// warningRefR is where relationships are stored.
type warningRefR struct {
	Warning *DrugWarning `boil:"Warning" json:"Warning" toml:"Warning" yaml:"Warning"`
}

// NewStruct creates a new relationship struct
func (*warningRefR) NewStruct() *warningRefR {
	return &warningRefR{}
}

func (r *warningRefR) GetWarning() *DrugWarning {
	if r == nil {
		return nil
	}
	return r.Warning
}

// warningRefL is where Load methods for each relationship are stored.
type warningRefL struct{}

var (
	warningRefAllColumns            = []string{"warnref_id", "warning_id", "ref_type", "ref_id", "ref_url"}
	warningRefColumnsWithoutDefault = []string{"warnref_id"}
	warningRefColumnsWithDefault    = []string{"warning_id", "ref_type", "ref_id", "ref_url"}
	warningRefPrimaryKeyColumns     = []string{"warnref_id"}
	warningRefGeneratedColumns      = []string{}
)

type (
	// WarningRefSlice is an alias for a slice of pointers to WarningRef.
	// This should almost always be used instead of []WarningRef.
	WarningRefSlice []*WarningRef
	// WarningRefHook is the signature for custom WarningRef hook methods
	WarningRefHook func(context.Context, boil.ContextExecutor, *WarningRef) error

	warningRefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warningRefType                 = reflect.TypeOf(&WarningRef{})
	warningRefMapping              = queries.MakeStructMapping(warningRefType)
	warningRefPrimaryKeyMapping, _ = queries.BindMapping(warningRefType, warningRefMapping, warningRefPrimaryKeyColumns)
	warningRefInsertCacheMut       sync.RWMutex
	warningRefInsertCache          = make(map[string]insertCache)
	warningRefUpdateCacheMut       sync.RWMutex
	warningRefUpdateCache          = make(map[string]updateCache)
	warningRefUpsertCacheMut       sync.RWMutex
	warningRefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var warningRefAfterSelectHooks []WarningRefHook

var warningRefBeforeInsertHooks []WarningRefHook
var warningRefAfterInsertHooks []WarningRefHook

var warningRefBeforeUpdateHooks []WarningRefHook
var warningRefAfterUpdateHooks []WarningRefHook

var warningRefBeforeDeleteHooks []WarningRefHook
var warningRefAfterDeleteHooks []WarningRefHook

var warningRefBeforeUpsertHooks []WarningRefHook
var warningRefAfterUpsertHooks []WarningRefHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WarningRef) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WarningRef) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WarningRef) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WarningRef) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WarningRef) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WarningRef) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WarningRef) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WarningRef) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WarningRef) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warningRefAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWarningRefHook registers your hook function for all future operations.
func AddWarningRefHook(hookPoint boil.HookPoint, warningRefHook WarningRefHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		warningRefAfterSelectHooks = append(warningRefAfterSelectHooks, warningRefHook)
	case boil.BeforeInsertHook:
		warningRefBeforeInsertHooks = append(warningRefBeforeInsertHooks, warningRefHook)
	case boil.AfterInsertHook:
		warningRefAfterInsertHooks = append(warningRefAfterInsertHooks, warningRefHook)
	case boil.BeforeUpdateHook:
		warningRefBeforeUpdateHooks = append(warningRefBeforeUpdateHooks, warningRefHook)
	case boil.AfterUpdateHook:
		warningRefAfterUpdateHooks = append(warningRefAfterUpdateHooks, warningRefHook)
	case boil.BeforeDeleteHook:
		warningRefBeforeDeleteHooks = append(warningRefBeforeDeleteHooks, warningRefHook)
	case boil.AfterDeleteHook:
		warningRefAfterDeleteHooks = append(warningRefAfterDeleteHooks, warningRefHook)
	case boil.BeforeUpsertHook:
		warningRefBeforeUpsertHooks = append(warningRefBeforeUpsertHooks, warningRefHook)
	case boil.AfterUpsertHook:
		warningRefAfterUpsertHooks = append(warningRefAfterUpsertHooks, warningRefHook)
	}
}

// One returns a single warningRef record from the query.
func (q warningRefQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WarningRef, error) {
	o := &WarningRef{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for warning_refs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WarningRef records from the query.
func (q warningRefQuery) All(ctx context.Context, exec boil.ContextExecutor) (WarningRefSlice, error) {
	var o []*WarningRef

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WarningRef slice")
	}

	if len(warningRefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WarningRef records in the query.
func (q warningRefQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count warning_refs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warningRefQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if warning_refs exists")
	}

	return count > 0, nil
}

// Warning pointed to by the foreign key.
func (o *WarningRef) Warning(mods ...qm.QueryMod) drugWarningQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"warning_id\" = ?", o.WarningID),
	}

	queryMods = append(queryMods, mods...)

	return DrugWarnings(queryMods...)
}

// LoadWarning allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warningRefL) LoadWarning(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarningRef interface{}, mods queries.Applicator) error {
	var slice []*WarningRef
	var object *WarningRef

	if singular {
		object = maybeWarningRef.(*WarningRef)
	} else {
		slice = *maybeWarningRef.(*[]*WarningRef)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warningRefR{}
		}
		if !queries.IsNil(object.WarningID) {
			args = append(args, object.WarningID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warningRefR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WarningID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WarningID) {
				args = append(args, obj.WarningID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_warning`),
		qm.WhereIn(`drug_warning.warning_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DrugWarning")
	}

	var resultSlice []*DrugWarning
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DrugWarning")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for drug_warning")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_warning")
	}

	if len(warningRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Warning = foreign
		if foreign.R == nil {
			foreign.R = &drugWarningR{}
		}
		foreign.R.WarningWarningRefs = append(foreign.R.WarningWarningRefs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WarningID, foreign.WarningID) {
				local.R.Warning = foreign
				if foreign.R == nil {
					foreign.R = &drugWarningR{}
				}
				foreign.R.WarningWarningRefs = append(foreign.R.WarningWarningRefs, local)
				break
			}
		}
	}

	return nil
}

// SetWarning of the warningRef to the related item.
// Sets o.R.Warning to related.
// Adds o to related.R.WarningWarningRefs.
func (o *WarningRef) SetWarning(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DrugWarning) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warning_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"warning_id"}),
		strmangle.WhereClause("\"", "\"", 0, warningRefPrimaryKeyColumns),
	)
	values := []interface{}{related.WarningID, o.WarnrefID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WarningID, related.WarningID)
	if o.R == nil {
		o.R = &warningRefR{
			Warning: related,
		}
	} else {
		o.R.Warning = related
	}

	if related.R == nil {
		related.R = &drugWarningR{
			WarningWarningRefs: WarningRefSlice{o},
		}
	} else {
		related.R.WarningWarningRefs = append(related.R.WarningWarningRefs, o)
	}

	return nil
}

// RemoveWarning relationship.
// Sets o.R.Warning to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WarningRef) RemoveWarning(ctx context.Context, exec boil.ContextExecutor, related *DrugWarning) error {
	var err error

	queries.SetScanner(&o.WarningID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("warning_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Warning = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WarningWarningRefs {
		if queries.Equal(o.WarningID, ri.WarningID) {
			continue
		}

		ln := len(related.R.WarningWarningRefs)
		if ln > 1 && i < ln-1 {
			related.R.WarningWarningRefs[i] = related.R.WarningWarningRefs[ln-1]
		}
		related.R.WarningWarningRefs = related.R.WarningWarningRefs[:ln-1]
		break
	}
	return nil
}

// WarningRefs retrieves all the records using an executor.
func WarningRefs(mods ...qm.QueryMod) warningRefQuery {
	mods = append(mods, qm.From("\"warning_refs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warning_refs\".*"})
	}

	return warningRefQuery{q}
}

// FindWarningRef retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarningRef(ctx context.Context, exec boil.ContextExecutor, warnrefID int64, selectCols ...string) (*WarningRef, error) {
	warningRefObj := &WarningRef{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warning_refs\" where \"warnref_id\"=?", sel,
	)

	q := queries.Raw(query, warnrefID)

	err := q.Bind(ctx, exec, warningRefObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from warning_refs")
	}

	if err = warningRefObj.doAfterSelectHooks(ctx, exec); err != nil {
		return warningRefObj, err
	}

	return warningRefObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WarningRef) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warning_refs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warningRefColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warningRefInsertCacheMut.RLock()
	cache, cached := warningRefInsertCache[key]
	warningRefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warningRefAllColumns,
			warningRefColumnsWithDefault,
			warningRefColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warningRefType, warningRefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warningRefType, warningRefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warning_refs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warning_refs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into warning_refs")
	}

	if !cached {
		warningRefInsertCacheMut.Lock()
		warningRefInsertCache[key] = cache
		warningRefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WarningRef.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WarningRef) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	warningRefUpdateCacheMut.RLock()
	cache, cached := warningRefUpdateCache[key]
	warningRefUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warningRefAllColumns,
			warningRefPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update warning_refs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warning_refs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, warningRefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warningRefType, warningRefMapping, append(wl, warningRefPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update warning_refs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for warning_refs")
	}

	if !cached {
		warningRefUpdateCacheMut.Lock()
		warningRefUpdateCache[key] = cache
		warningRefUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q warningRefQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for warning_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for warning_refs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarningRefSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warningRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warning_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, warningRefPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in warningRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all warningRef")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WarningRef) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warning_refs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warningRefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warningRefUpsertCacheMut.RLock()
	cache, cached := warningRefUpsertCache[key]
	warningRefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			warningRefAllColumns,
			warningRefColumnsWithDefault,
			warningRefColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			warningRefAllColumns,
			warningRefPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert warning_refs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(warningRefPrimaryKeyColumns))
			copy(conflict, warningRefPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"warning_refs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(warningRefType, warningRefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warningRefType, warningRefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert warning_refs")
	}

	if !cached {
		warningRefUpsertCacheMut.Lock()
		warningRefUpsertCache[key] = cache
		warningRefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WarningRef record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WarningRef) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WarningRef provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warningRefPrimaryKeyMapping)
	sql := "DELETE FROM \"warning_refs\" WHERE \"warnref_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from warning_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for warning_refs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warningRefQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no warningRefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warning_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warning_refs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarningRefSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(warningRefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warningRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warning_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, warningRefPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warningRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warning_refs")
	}

	if len(warningRefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WarningRef) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWarningRef(ctx, exec, o.WarnrefID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarningRefSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarningRefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warningRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warning_refs\".* FROM \"warning_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, warningRefPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WarningRefSlice")
	}

	*o = slice

	return nil
}

// WarningRefExists checks if the WarningRef row exists.
func WarningRefExists(ctx context.Context, exec boil.ContextExecutor, warnrefID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warning_refs\" where \"warnref_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, warnrefID)
	}
	row := exec.QueryRowContext(ctx, sql, warnrefID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if warning_refs exists")
	}

	return exists, nil
}
