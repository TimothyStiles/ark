// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BioassayOntology is an object representing the database table.
type BioassayOntology struct {
	BaoID string `boil:"bao_id" json:"bao_id" toml:"bao_id" yaml:"bao_id"`
	Label string `boil:"label" json:"label" toml:"label" yaml:"label"`

	R *bioassayOntologyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bioassayOntologyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BioassayOntologyColumns = struct {
	BaoID string
	Label string
}{
	BaoID: "bao_id",
	Label: "label",
}

var BioassayOntologyTableColumns = struct {
	BaoID string
	Label string
}{
	BaoID: "bioassay_ontology.bao_id",
	Label: "bioassay_ontology.label",
}

// Generated where

var BioassayOntologyWhere = struct {
	BaoID whereHelperstring
	Label whereHelperstring
}{
	BaoID: whereHelperstring{field: "\"bioassay_ontology\".\"bao_id\""},
	Label: whereHelperstring{field: "\"bioassay_ontology\".\"label\""},
}

// BioassayOntologyRels is where relationship names are stored.
var BioassayOntologyRels = struct {
	BaoEndpointActivities string
	BaoFormatAssays       string
}{
	BaoEndpointActivities: "BaoEndpointActivities",
	BaoFormatAssays:       "BaoFormatAssays",
}

// bioassayOntologyR is where relationships are stored.
type bioassayOntologyR struct {
	BaoEndpointActivities ActivitySlice `boil:"BaoEndpointActivities" json:"BaoEndpointActivities" toml:"BaoEndpointActivities" yaml:"BaoEndpointActivities"`
	BaoFormatAssays       AssaySlice    `boil:"BaoFormatAssays" json:"BaoFormatAssays" toml:"BaoFormatAssays" yaml:"BaoFormatAssays"`
}

// NewStruct creates a new relationship struct
func (*bioassayOntologyR) NewStruct() *bioassayOntologyR {
	return &bioassayOntologyR{}
}

func (r *bioassayOntologyR) GetBaoEndpointActivities() ActivitySlice {
	if r == nil {
		return nil
	}
	return r.BaoEndpointActivities
}

func (r *bioassayOntologyR) GetBaoFormatAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.BaoFormatAssays
}

// bioassayOntologyL is where Load methods for each relationship are stored.
type bioassayOntologyL struct{}

var (
	bioassayOntologyAllColumns            = []string{"bao_id", "label"}
	bioassayOntologyColumnsWithoutDefault = []string{"bao_id", "label"}
	bioassayOntologyColumnsWithDefault    = []string{}
	bioassayOntologyPrimaryKeyColumns     = []string{"bao_id"}
	bioassayOntologyGeneratedColumns      = []string{}
)

type (
	// BioassayOntologySlice is an alias for a slice of pointers to BioassayOntology.
	// This should almost always be used instead of []BioassayOntology.
	BioassayOntologySlice []*BioassayOntology
	// BioassayOntologyHook is the signature for custom BioassayOntology hook methods
	BioassayOntologyHook func(context.Context, boil.ContextExecutor, *BioassayOntology) error

	bioassayOntologyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bioassayOntologyType                 = reflect.TypeOf(&BioassayOntology{})
	bioassayOntologyMapping              = queries.MakeStructMapping(bioassayOntologyType)
	bioassayOntologyPrimaryKeyMapping, _ = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, bioassayOntologyPrimaryKeyColumns)
	bioassayOntologyInsertCacheMut       sync.RWMutex
	bioassayOntologyInsertCache          = make(map[string]insertCache)
	bioassayOntologyUpdateCacheMut       sync.RWMutex
	bioassayOntologyUpdateCache          = make(map[string]updateCache)
	bioassayOntologyUpsertCacheMut       sync.RWMutex
	bioassayOntologyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bioassayOntologyAfterSelectHooks []BioassayOntologyHook

var bioassayOntologyBeforeInsertHooks []BioassayOntologyHook
var bioassayOntologyAfterInsertHooks []BioassayOntologyHook

var bioassayOntologyBeforeUpdateHooks []BioassayOntologyHook
var bioassayOntologyAfterUpdateHooks []BioassayOntologyHook

var bioassayOntologyBeforeDeleteHooks []BioassayOntologyHook
var bioassayOntologyAfterDeleteHooks []BioassayOntologyHook

var bioassayOntologyBeforeUpsertHooks []BioassayOntologyHook
var bioassayOntologyAfterUpsertHooks []BioassayOntologyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BioassayOntology) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BioassayOntology) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BioassayOntology) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BioassayOntology) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BioassayOntology) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BioassayOntology) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BioassayOntology) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BioassayOntology) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BioassayOntology) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bioassayOntologyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBioassayOntologyHook registers your hook function for all future operations.
func AddBioassayOntologyHook(hookPoint boil.HookPoint, bioassayOntologyHook BioassayOntologyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bioassayOntologyAfterSelectHooks = append(bioassayOntologyAfterSelectHooks, bioassayOntologyHook)
	case boil.BeforeInsertHook:
		bioassayOntologyBeforeInsertHooks = append(bioassayOntologyBeforeInsertHooks, bioassayOntologyHook)
	case boil.AfterInsertHook:
		bioassayOntologyAfterInsertHooks = append(bioassayOntologyAfterInsertHooks, bioassayOntologyHook)
	case boil.BeforeUpdateHook:
		bioassayOntologyBeforeUpdateHooks = append(bioassayOntologyBeforeUpdateHooks, bioassayOntologyHook)
	case boil.AfterUpdateHook:
		bioassayOntologyAfterUpdateHooks = append(bioassayOntologyAfterUpdateHooks, bioassayOntologyHook)
	case boil.BeforeDeleteHook:
		bioassayOntologyBeforeDeleteHooks = append(bioassayOntologyBeforeDeleteHooks, bioassayOntologyHook)
	case boil.AfterDeleteHook:
		bioassayOntologyAfterDeleteHooks = append(bioassayOntologyAfterDeleteHooks, bioassayOntologyHook)
	case boil.BeforeUpsertHook:
		bioassayOntologyBeforeUpsertHooks = append(bioassayOntologyBeforeUpsertHooks, bioassayOntologyHook)
	case boil.AfterUpsertHook:
		bioassayOntologyAfterUpsertHooks = append(bioassayOntologyAfterUpsertHooks, bioassayOntologyHook)
	}
}

// One returns a single bioassayOntology record from the query.
func (q bioassayOntologyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BioassayOntology, error) {
	o := &BioassayOntology{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bioassay_ontology")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BioassayOntology records from the query.
func (q bioassayOntologyQuery) All(ctx context.Context, exec boil.ContextExecutor) (BioassayOntologySlice, error) {
	var o []*BioassayOntology

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BioassayOntology slice")
	}

	if len(bioassayOntologyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BioassayOntology records in the query.
func (q bioassayOntologyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bioassay_ontology rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bioassayOntologyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bioassay_ontology exists")
	}

	return count > 0, nil
}

// BaoEndpointActivities retrieves all the activity's Activities with an executor via bao_endpoint column.
func (o *BioassayOntology) BaoEndpointActivities(mods ...qm.QueryMod) activityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activities\".\"bao_endpoint\"=?", o.BaoID),
	)

	return Activities(queryMods...)
}

// BaoFormatAssays retrieves all the assay's Assays with an executor via bao_format column.
func (o *BioassayOntology) BaoFormatAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"bao_format\"=?", o.BaoID),
	)

	return Assays(queryMods...)
}

// LoadBaoEndpointActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bioassayOntologyL) LoadBaoEndpointActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBioassayOntology interface{}, mods queries.Applicator) error {
	var slice []*BioassayOntology
	var object *BioassayOntology

	if singular {
		object = maybeBioassayOntology.(*BioassayOntology)
	} else {
		slice = *maybeBioassayOntology.(*[]*BioassayOntology)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bioassayOntologyR{}
		}
		args = append(args, object.BaoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bioassayOntologyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BaoID) {
					continue Outer
				}
			}

			args = append(args, obj.BaoID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.bao_endpoint in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activities")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaoEndpointActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityR{}
			}
			foreign.R.BaoEndpointBioassayOntology = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BaoID, foreign.BaoEndpoint) {
				local.R.BaoEndpointActivities = append(local.R.BaoEndpointActivities, foreign)
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.BaoEndpointBioassayOntology = local
				break
			}
		}
	}

	return nil
}

// LoadBaoFormatAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bioassayOntologyL) LoadBaoFormatAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBioassayOntology interface{}, mods queries.Applicator) error {
	var slice []*BioassayOntology
	var object *BioassayOntology

	if singular {
		object = maybeBioassayOntology.(*BioassayOntology)
	} else {
		slice = *maybeBioassayOntology.(*[]*BioassayOntology)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bioassayOntologyR{}
		}
		args = append(args, object.BaoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bioassayOntologyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BaoID) {
					continue Outer
				}
			}

			args = append(args, obj.BaoID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.bao_format in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaoFormatAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.BaoFormatBioassayOntology = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BaoID, foreign.BaoFormat) {
				local.R.BaoFormatAssays = append(local.R.BaoFormatAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.BaoFormatBioassayOntology = local
				break
			}
		}
	}

	return nil
}

// AddBaoEndpointActivities adds the given related objects to the existing relationships
// of the bioassay_ontology, optionally inserting them as new records.
// Appends related to o.R.BaoEndpointActivities.
// Sets related.R.BaoEndpointBioassayOntology appropriately.
func (o *BioassayOntology) AddBaoEndpointActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BaoEndpoint, o.BaoID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"bao_endpoint"}),
				strmangle.WhereClause("\"", "\"", 0, activityPrimaryKeyColumns),
			)
			values := []interface{}{o.BaoID, rel.ActivityID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BaoEndpoint, o.BaoID)
		}
	}

	if o.R == nil {
		o.R = &bioassayOntologyR{
			BaoEndpointActivities: related,
		}
	} else {
		o.R.BaoEndpointActivities = append(o.R.BaoEndpointActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityR{
				BaoEndpointBioassayOntology: o,
			}
		} else {
			rel.R.BaoEndpointBioassayOntology = o
		}
	}
	return nil
}

// SetBaoEndpointActivities removes all previously related items of the
// bioassay_ontology replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BaoEndpointBioassayOntology's BaoEndpointActivities accordingly.
// Replaces o.R.BaoEndpointActivities with related.
// Sets related.R.BaoEndpointBioassayOntology's BaoEndpointActivities accordingly.
func (o *BioassayOntology) SetBaoEndpointActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	query := "update \"activities\" set \"bao_endpoint\" = null where \"bao_endpoint\" = ?"
	values := []interface{}{o.BaoID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BaoEndpointActivities {
			queries.SetScanner(&rel.BaoEndpoint, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BaoEndpointBioassayOntology = nil
		}
		o.R.BaoEndpointActivities = nil
	}

	return o.AddBaoEndpointActivities(ctx, exec, insert, related...)
}

// RemoveBaoEndpointActivities relationships from objects passed in.
// Removes related items from R.BaoEndpointActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.BaoEndpointBioassayOntology.
func (o *BioassayOntology) RemoveBaoEndpointActivities(ctx context.Context, exec boil.ContextExecutor, related ...*Activity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BaoEndpoint, nil)
		if rel.R != nil {
			rel.R.BaoEndpointBioassayOntology = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bao_endpoint")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BaoEndpointActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.BaoEndpointActivities)
			if ln > 1 && i < ln-1 {
				o.R.BaoEndpointActivities[i] = o.R.BaoEndpointActivities[ln-1]
			}
			o.R.BaoEndpointActivities = o.R.BaoEndpointActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddBaoFormatAssays adds the given related objects to the existing relationships
// of the bioassay_ontology, optionally inserting them as new records.
// Appends related to o.R.BaoFormatAssays.
// Sets related.R.BaoFormatBioassayOntology appropriately.
func (o *BioassayOntology) AddBaoFormatAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BaoFormat, o.BaoID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"bao_format"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.BaoID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BaoFormat, o.BaoID)
		}
	}

	if o.R == nil {
		o.R = &bioassayOntologyR{
			BaoFormatAssays: related,
		}
	} else {
		o.R.BaoFormatAssays = append(o.R.BaoFormatAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				BaoFormatBioassayOntology: o,
			}
		} else {
			rel.R.BaoFormatBioassayOntology = o
		}
	}
	return nil
}

// SetBaoFormatAssays removes all previously related items of the
// bioassay_ontology replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BaoFormatBioassayOntology's BaoFormatAssays accordingly.
// Replaces o.R.BaoFormatAssays with related.
// Sets related.R.BaoFormatBioassayOntology's BaoFormatAssays accordingly.
func (o *BioassayOntology) SetBaoFormatAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"bao_format\" = null where \"bao_format\" = ?"
	values := []interface{}{o.BaoID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BaoFormatAssays {
			queries.SetScanner(&rel.BaoFormat, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BaoFormatBioassayOntology = nil
		}
		o.R.BaoFormatAssays = nil
	}

	return o.AddBaoFormatAssays(ctx, exec, insert, related...)
}

// RemoveBaoFormatAssays relationships from objects passed in.
// Removes related items from R.BaoFormatAssays (uses pointer comparison, removal does not keep order)
// Sets related.R.BaoFormatBioassayOntology.
func (o *BioassayOntology) RemoveBaoFormatAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BaoFormat, nil)
		if rel.R != nil {
			rel.R.BaoFormatBioassayOntology = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bao_format")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BaoFormatAssays {
			if rel != ri {
				continue
			}

			ln := len(o.R.BaoFormatAssays)
			if ln > 1 && i < ln-1 {
				o.R.BaoFormatAssays[i] = o.R.BaoFormatAssays[ln-1]
			}
			o.R.BaoFormatAssays = o.R.BaoFormatAssays[:ln-1]
			break
		}
	}

	return nil
}

// BioassayOntologies retrieves all the records using an executor.
func BioassayOntologies(mods ...qm.QueryMod) bioassayOntologyQuery {
	mods = append(mods, qm.From("\"bioassay_ontology\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bioassay_ontology\".*"})
	}

	return bioassayOntologyQuery{q}
}

// FindBioassayOntology retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBioassayOntology(ctx context.Context, exec boil.ContextExecutor, baoID string, selectCols ...string) (*BioassayOntology, error) {
	bioassayOntologyObj := &BioassayOntology{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bioassay_ontology\" where \"bao_id\"=?", sel,
	)

	q := queries.Raw(query, baoID)

	err := q.Bind(ctx, exec, bioassayOntologyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bioassay_ontology")
	}

	if err = bioassayOntologyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bioassayOntologyObj, err
	}

	return bioassayOntologyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BioassayOntology) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bioassay_ontology provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bioassayOntologyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bioassayOntologyInsertCacheMut.RLock()
	cache, cached := bioassayOntologyInsertCache[key]
	bioassayOntologyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bioassayOntologyAllColumns,
			bioassayOntologyColumnsWithDefault,
			bioassayOntologyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bioassay_ontology\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bioassay_ontology\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bioassay_ontology")
	}

	if !cached {
		bioassayOntologyInsertCacheMut.Lock()
		bioassayOntologyInsertCache[key] = cache
		bioassayOntologyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BioassayOntology.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BioassayOntology) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bioassayOntologyUpdateCacheMut.RLock()
	cache, cached := bioassayOntologyUpdateCache[key]
	bioassayOntologyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bioassayOntologyAllColumns,
			bioassayOntologyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bioassay_ontology, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bioassay_ontology\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bioassayOntologyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, append(wl, bioassayOntologyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bioassay_ontology row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bioassay_ontology")
	}

	if !cached {
		bioassayOntologyUpdateCacheMut.Lock()
		bioassayOntologyUpdateCache[key] = cache
		bioassayOntologyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bioassayOntologyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bioassay_ontology")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bioassay_ontology")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BioassayOntologySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioassayOntologyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bioassay_ontology\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioassayOntologyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bioassayOntology slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bioassayOntology")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BioassayOntology) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bioassay_ontology provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bioassayOntologyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bioassayOntologyUpsertCacheMut.RLock()
	cache, cached := bioassayOntologyUpsertCache[key]
	bioassayOntologyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bioassayOntologyAllColumns,
			bioassayOntologyColumnsWithDefault,
			bioassayOntologyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bioassayOntologyAllColumns,
			bioassayOntologyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bioassay_ontology, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bioassayOntologyPrimaryKeyColumns))
			copy(conflict, bioassayOntologyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"bioassay_ontology\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bioassayOntologyType, bioassayOntologyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bioassay_ontology")
	}

	if !cached {
		bioassayOntologyUpsertCacheMut.Lock()
		bioassayOntologyUpsertCache[key] = cache
		bioassayOntologyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BioassayOntology record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BioassayOntology) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BioassayOntology provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bioassayOntologyPrimaryKeyMapping)
	sql := "DELETE FROM \"bioassay_ontology\" WHERE \"bao_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bioassay_ontology")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bioassay_ontology")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bioassayOntologyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bioassayOntologyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bioassay_ontology")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bioassay_ontology")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BioassayOntologySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bioassayOntologyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioassayOntologyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bioassay_ontology\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioassayOntologyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bioassayOntology slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bioassay_ontology")
	}

	if len(bioassayOntologyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BioassayOntology) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBioassayOntology(ctx, exec, o.BaoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BioassayOntologySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BioassayOntologySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bioassayOntologyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bioassay_ontology\".* FROM \"bioassay_ontology\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bioassayOntologyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BioassayOntologySlice")
	}

	*o = slice

	return nil
}

// BioassayOntologyExists checks if the BioassayOntology row exists.
func BioassayOntologyExists(ctx context.Context, exec boil.ContextExecutor, baoID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bioassay_ontology\" where \"bao_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, baoID)
	}
	row := exec.QueryRowContext(ctx, sql, baoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bioassay_ontology exists")
	}

	return exists, nil
}
