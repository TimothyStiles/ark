// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssayType is an object representing the database table.
type AssayType struct {
	AssayType string      `boil:"assay_type" json:"assay_type" toml:"assay_type" yaml:"assay_type"`
	AssayDesc null.String `boil:"assay_desc" json:"assay_desc,omitempty" toml:"assay_desc" yaml:"assay_desc,omitempty"`

	R *assayTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assayTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssayTypeColumns = struct {
	AssayType string
	AssayDesc string
}{
	AssayType: "assay_type",
	AssayDesc: "assay_desc",
}

var AssayTypeTableColumns = struct {
	AssayType string
	AssayDesc string
}{
	AssayType: "assay_type.assay_type",
	AssayDesc: "assay_type.assay_desc",
}

// Generated where

var AssayTypeWhere = struct {
	AssayType whereHelperstring
	AssayDesc whereHelpernull_String
}{
	AssayType: whereHelperstring{field: "\"assay_type\".\"assay_type\""},
	AssayDesc: whereHelpernull_String{field: "\"assay_type\".\"assay_desc\""},
}

// AssayTypeRels is where relationship names are stored.
var AssayTypeRels = struct {
	Assays string
}{
	Assays: "Assays",
}

// assayTypeR is where relationships are stored.
type assayTypeR struct {
	Assays AssaySlice `boil:"Assays" json:"Assays" toml:"Assays" yaml:"Assays"`
}

// NewStruct creates a new relationship struct
func (*assayTypeR) NewStruct() *assayTypeR {
	return &assayTypeR{}
}

func (r *assayTypeR) GetAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.Assays
}

// assayTypeL is where Load methods for each relationship are stored.
type assayTypeL struct{}

var (
	assayTypeAllColumns            = []string{"assay_type", "assay_desc"}
	assayTypeColumnsWithoutDefault = []string{"assay_type"}
	assayTypeColumnsWithDefault    = []string{"assay_desc"}
	assayTypePrimaryKeyColumns     = []string{"assay_type"}
	assayTypeGeneratedColumns      = []string{}
)

type (
	// AssayTypeSlice is an alias for a slice of pointers to AssayType.
	// This should almost always be used instead of []AssayType.
	AssayTypeSlice []*AssayType
	// AssayTypeHook is the signature for custom AssayType hook methods
	AssayTypeHook func(context.Context, boil.ContextExecutor, *AssayType) error

	assayTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assayTypeType                 = reflect.TypeOf(&AssayType{})
	assayTypeMapping              = queries.MakeStructMapping(assayTypeType)
	assayTypePrimaryKeyMapping, _ = queries.BindMapping(assayTypeType, assayTypeMapping, assayTypePrimaryKeyColumns)
	assayTypeInsertCacheMut       sync.RWMutex
	assayTypeInsertCache          = make(map[string]insertCache)
	assayTypeUpdateCacheMut       sync.RWMutex
	assayTypeUpdateCache          = make(map[string]updateCache)
	assayTypeUpsertCacheMut       sync.RWMutex
	assayTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assayTypeAfterSelectHooks []AssayTypeHook

var assayTypeBeforeInsertHooks []AssayTypeHook
var assayTypeAfterInsertHooks []AssayTypeHook

var assayTypeBeforeUpdateHooks []AssayTypeHook
var assayTypeAfterUpdateHooks []AssayTypeHook

var assayTypeBeforeDeleteHooks []AssayTypeHook
var assayTypeAfterDeleteHooks []AssayTypeHook

var assayTypeBeforeUpsertHooks []AssayTypeHook
var assayTypeAfterUpsertHooks []AssayTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssayType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssayType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssayType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssayType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssayType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssayType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssayType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssayType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssayType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssayTypeHook registers your hook function for all future operations.
func AddAssayTypeHook(hookPoint boil.HookPoint, assayTypeHook AssayTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assayTypeAfterSelectHooks = append(assayTypeAfterSelectHooks, assayTypeHook)
	case boil.BeforeInsertHook:
		assayTypeBeforeInsertHooks = append(assayTypeBeforeInsertHooks, assayTypeHook)
	case boil.AfterInsertHook:
		assayTypeAfterInsertHooks = append(assayTypeAfterInsertHooks, assayTypeHook)
	case boil.BeforeUpdateHook:
		assayTypeBeforeUpdateHooks = append(assayTypeBeforeUpdateHooks, assayTypeHook)
	case boil.AfterUpdateHook:
		assayTypeAfterUpdateHooks = append(assayTypeAfterUpdateHooks, assayTypeHook)
	case boil.BeforeDeleteHook:
		assayTypeBeforeDeleteHooks = append(assayTypeBeforeDeleteHooks, assayTypeHook)
	case boil.AfterDeleteHook:
		assayTypeAfterDeleteHooks = append(assayTypeAfterDeleteHooks, assayTypeHook)
	case boil.BeforeUpsertHook:
		assayTypeBeforeUpsertHooks = append(assayTypeBeforeUpsertHooks, assayTypeHook)
	case boil.AfterUpsertHook:
		assayTypeAfterUpsertHooks = append(assayTypeAfterUpsertHooks, assayTypeHook)
	}
}

// One returns a single assayType record from the query.
func (q assayTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssayType, error) {
	o := &AssayType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assay_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssayType records from the query.
func (q assayTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssayTypeSlice, error) {
	var o []*AssayType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssayType slice")
	}

	if len(assayTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssayType records in the query.
func (q assayTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assay_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assayTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assay_type exists")
	}

	return count > 0, nil
}

// Assays retrieves all the assay's Assays with an executor.
func (o *AssayType) Assays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"assay_type\"=?", o.AssayType),
	)

	return Assays(queryMods...)
}

// LoadAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assayTypeL) LoadAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssayType interface{}, mods queries.Applicator) error {
	var slice []*AssayType
	var object *AssayType

	if singular {
		object = maybeAssayType.(*AssayType)
	} else {
		slice = *maybeAssayType.(*[]*AssayType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assayTypeR{}
		}
		args = append(args, object.AssayType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assayTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssayType) {
					continue Outer
				}
			}

			args = append(args, obj.AssayType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.assay_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.AssayAssayType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AssayType, foreign.AssayType) {
				local.R.Assays = append(local.R.Assays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.AssayAssayType = local
				break
			}
		}
	}

	return nil
}

// AddAssays adds the given related objects to the existing relationships
// of the assay_type, optionally inserting them as new records.
// Appends related to o.R.Assays.
// Sets related.R.AssayAssayType appropriately.
func (o *AssayType) AddAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssayType, o.AssayType)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"assay_type"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.AssayType, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssayType, o.AssayType)
		}
	}

	if o.R == nil {
		o.R = &assayTypeR{
			Assays: related,
		}
	} else {
		o.R.Assays = append(o.R.Assays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				AssayAssayType: o,
			}
		} else {
			rel.R.AssayAssayType = o
		}
	}
	return nil
}

// SetAssays removes all previously related items of the
// assay_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssayAssayType's Assays accordingly.
// Replaces o.R.Assays with related.
// Sets related.R.AssayAssayType's Assays accordingly.
func (o *AssayType) SetAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"assay_type\" = null where \"assay_type\" = ?"
	values := []interface{}{o.AssayType}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Assays {
			queries.SetScanner(&rel.AssayType, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssayAssayType = nil
		}
		o.R.Assays = nil
	}

	return o.AddAssays(ctx, exec, insert, related...)
}

// RemoveAssays relationships from objects passed in.
// Removes related items from R.Assays (uses pointer comparison, removal does not keep order)
// Sets related.R.AssayAssayType.
func (o *AssayType) RemoveAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssayType, nil)
		if rel.R != nil {
			rel.R.AssayAssayType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assay_type")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Assays {
			if rel != ri {
				continue
			}

			ln := len(o.R.Assays)
			if ln > 1 && i < ln-1 {
				o.R.Assays[i] = o.R.Assays[ln-1]
			}
			o.R.Assays = o.R.Assays[:ln-1]
			break
		}
	}

	return nil
}

// AssayTypes retrieves all the records using an executor.
func AssayTypes(mods ...qm.QueryMod) assayTypeQuery {
	mods = append(mods, qm.From("\"assay_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assay_type\".*"})
	}

	return assayTypeQuery{q}
}

// FindAssayType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssayType(ctx context.Context, exec boil.ContextExecutor, assayType string, selectCols ...string) (*AssayType, error) {
	assayTypeObj := &AssayType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assay_type\" where \"assay_type\"=?", sel,
	)

	q := queries.Raw(query, assayType)

	err := q.Bind(ctx, exec, assayTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assay_type")
	}

	if err = assayTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assayTypeObj, err
	}

	return assayTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssayType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assayTypeInsertCacheMut.RLock()
	cache, cached := assayTypeInsertCache[key]
	assayTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assayTypeAllColumns,
			assayTypeColumnsWithDefault,
			assayTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assayTypeType, assayTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assayTypeType, assayTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assay_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assay_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assay_type")
	}

	if !cached {
		assayTypeInsertCacheMut.Lock()
		assayTypeInsertCache[key] = cache
		assayTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssayType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssayType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assayTypeUpdateCacheMut.RLock()
	cache, cached := assayTypeUpdateCache[key]
	assayTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assayTypeAllColumns,
			assayTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assay_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assay_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, assayTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assayTypeType, assayTypeMapping, append(wl, assayTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assay_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assay_type")
	}

	if !cached {
		assayTypeUpdateCacheMut.Lock()
		assayTypeUpdateCache[key] = cache
		assayTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assayTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assay_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assay_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssayTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assay_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assayType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assayType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssayType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assayTypeUpsertCacheMut.RLock()
	cache, cached := assayTypeUpsertCache[key]
	assayTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assayTypeAllColumns,
			assayTypeColumnsWithDefault,
			assayTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assayTypeAllColumns,
			assayTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assay_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assayTypePrimaryKeyColumns))
			copy(conflict, assayTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"assay_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assayTypeType, assayTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assayTypeType, assayTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assay_type")
	}

	if !cached {
		assayTypeUpsertCacheMut.Lock()
		assayTypeUpsertCache[key] = cache
		assayTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssayType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssayType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssayType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assayTypePrimaryKeyMapping)
	sql := "DELETE FROM \"assay_type\" WHERE \"assay_type\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assay_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assay_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assayTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assayTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assay_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssayTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assayTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assay_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assayType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_type")
	}

	if len(assayTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssayType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssayType(ctx, exec, o.AssayType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssayTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssayTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assay_type\".* FROM \"assay_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssayTypeSlice")
	}

	*o = slice

	return nil
}

// AssayTypeExists checks if the AssayType row exists.
func AssayTypeExists(ctx context.Context, exec boil.ContextExecutor, assayType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assay_type\" where \"assay_type\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assayType)
	}
	row := exec.QueryRowContext(ctx, sql, assayType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assay_type exists")
	}

	return exists, nil
}
