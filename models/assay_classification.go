// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssayClassification is an object representing the database table.
type AssayClassification struct {
	AssayClassID int64       `boil:"assay_class_id" json:"assay_class_id" toml:"assay_class_id" yaml:"assay_class_id"`
	L1           null.String `boil:"l1" json:"l1,omitempty" toml:"l1" yaml:"l1,omitempty"`
	L2           null.String `boil:"l2" json:"l2,omitempty" toml:"l2" yaml:"l2,omitempty"`
	L3           null.String `boil:"l3" json:"l3,omitempty" toml:"l3" yaml:"l3,omitempty"`
	ClassType    null.String `boil:"class_type" json:"class_type,omitempty" toml:"class_type" yaml:"class_type,omitempty"`
	Source       null.String `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`

	R *assayClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assayClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssayClassificationColumns = struct {
	AssayClassID string
	L1           string
	L2           string
	L3           string
	ClassType    string
	Source       string
}{
	AssayClassID: "assay_class_id",
	L1:           "l1",
	L2:           "l2",
	L3:           "l3",
	ClassType:    "class_type",
	Source:       "source",
}

var AssayClassificationTableColumns = struct {
	AssayClassID string
	L1           string
	L2           string
	L3           string
	ClassType    string
	Source       string
}{
	AssayClassID: "assay_classification.assay_class_id",
	L1:           "assay_classification.l1",
	L2:           "assay_classification.l2",
	L3:           "assay_classification.l3",
	ClassType:    "assay_classification.class_type",
	Source:       "assay_classification.source",
}

// Generated where

var AssayClassificationWhere = struct {
	AssayClassID whereHelperint64
	L1           whereHelpernull_String
	L2           whereHelpernull_String
	L3           whereHelpernull_String
	ClassType    whereHelpernull_String
	Source       whereHelpernull_String
}{
	AssayClassID: whereHelperint64{field: "\"assay_classification\".\"assay_class_id\""},
	L1:           whereHelpernull_String{field: "\"assay_classification\".\"l1\""},
	L2:           whereHelpernull_String{field: "\"assay_classification\".\"l2\""},
	L3:           whereHelpernull_String{field: "\"assay_classification\".\"l3\""},
	ClassType:    whereHelpernull_String{field: "\"assay_classification\".\"class_type\""},
	Source:       whereHelpernull_String{field: "\"assay_classification\".\"source\""},
}

// AssayClassificationRels is where relationship names are stored.
var AssayClassificationRels = struct {
	AssayClassAssayClassMaps string
}{
	AssayClassAssayClassMaps: "AssayClassAssayClassMaps",
}

// assayClassificationR is where relationships are stored.
type assayClassificationR struct {
	AssayClassAssayClassMaps AssayClassMapSlice `boil:"AssayClassAssayClassMaps" json:"AssayClassAssayClassMaps" toml:"AssayClassAssayClassMaps" yaml:"AssayClassAssayClassMaps"`
}

// NewStruct creates a new relationship struct
func (*assayClassificationR) NewStruct() *assayClassificationR {
	return &assayClassificationR{}
}

func (r *assayClassificationR) GetAssayClassAssayClassMaps() AssayClassMapSlice {
	if r == nil {
		return nil
	}
	return r.AssayClassAssayClassMaps
}

// assayClassificationL is where Load methods for each relationship are stored.
type assayClassificationL struct{}

var (
	assayClassificationAllColumns            = []string{"assay_class_id", "l1", "l2", "l3", "class_type", "source"}
	assayClassificationColumnsWithoutDefault = []string{"assay_class_id"}
	assayClassificationColumnsWithDefault    = []string{"l1", "l2", "l3", "class_type", "source"}
	assayClassificationPrimaryKeyColumns     = []string{"assay_class_id"}
	assayClassificationGeneratedColumns      = []string{}
)

type (
	// AssayClassificationSlice is an alias for a slice of pointers to AssayClassification.
	// This should almost always be used instead of []AssayClassification.
	AssayClassificationSlice []*AssayClassification
	// AssayClassificationHook is the signature for custom AssayClassification hook methods
	AssayClassificationHook func(context.Context, boil.ContextExecutor, *AssayClassification) error

	assayClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assayClassificationType                 = reflect.TypeOf(&AssayClassification{})
	assayClassificationMapping              = queries.MakeStructMapping(assayClassificationType)
	assayClassificationPrimaryKeyMapping, _ = queries.BindMapping(assayClassificationType, assayClassificationMapping, assayClassificationPrimaryKeyColumns)
	assayClassificationInsertCacheMut       sync.RWMutex
	assayClassificationInsertCache          = make(map[string]insertCache)
	assayClassificationUpdateCacheMut       sync.RWMutex
	assayClassificationUpdateCache          = make(map[string]updateCache)
	assayClassificationUpsertCacheMut       sync.RWMutex
	assayClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assayClassificationAfterSelectHooks []AssayClassificationHook

var assayClassificationBeforeInsertHooks []AssayClassificationHook
var assayClassificationAfterInsertHooks []AssayClassificationHook

var assayClassificationBeforeUpdateHooks []AssayClassificationHook
var assayClassificationAfterUpdateHooks []AssayClassificationHook

var assayClassificationBeforeDeleteHooks []AssayClassificationHook
var assayClassificationAfterDeleteHooks []AssayClassificationHook

var assayClassificationBeforeUpsertHooks []AssayClassificationHook
var assayClassificationAfterUpsertHooks []AssayClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssayClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssayClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssayClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssayClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssayClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssayClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssayClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssayClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssayClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssayClassificationHook registers your hook function for all future operations.
func AddAssayClassificationHook(hookPoint boil.HookPoint, assayClassificationHook AssayClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assayClassificationAfterSelectHooks = append(assayClassificationAfterSelectHooks, assayClassificationHook)
	case boil.BeforeInsertHook:
		assayClassificationBeforeInsertHooks = append(assayClassificationBeforeInsertHooks, assayClassificationHook)
	case boil.AfterInsertHook:
		assayClassificationAfterInsertHooks = append(assayClassificationAfterInsertHooks, assayClassificationHook)
	case boil.BeforeUpdateHook:
		assayClassificationBeforeUpdateHooks = append(assayClassificationBeforeUpdateHooks, assayClassificationHook)
	case boil.AfterUpdateHook:
		assayClassificationAfterUpdateHooks = append(assayClassificationAfterUpdateHooks, assayClassificationHook)
	case boil.BeforeDeleteHook:
		assayClassificationBeforeDeleteHooks = append(assayClassificationBeforeDeleteHooks, assayClassificationHook)
	case boil.AfterDeleteHook:
		assayClassificationAfterDeleteHooks = append(assayClassificationAfterDeleteHooks, assayClassificationHook)
	case boil.BeforeUpsertHook:
		assayClassificationBeforeUpsertHooks = append(assayClassificationBeforeUpsertHooks, assayClassificationHook)
	case boil.AfterUpsertHook:
		assayClassificationAfterUpsertHooks = append(assayClassificationAfterUpsertHooks, assayClassificationHook)
	}
}

// One returns a single assayClassification record from the query.
func (q assayClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssayClassification, error) {
	o := &AssayClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assay_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssayClassification records from the query.
func (q assayClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssayClassificationSlice, error) {
	var o []*AssayClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssayClassification slice")
	}

	if len(assayClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssayClassification records in the query.
func (q assayClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assay_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assayClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assay_classification exists")
	}

	return count > 0, nil
}

// AssayClassAssayClassMaps retrieves all the assay_class_map's AssayClassMaps with an executor via assay_class_id column.
func (o *AssayClassification) AssayClassAssayClassMaps(mods ...qm.QueryMod) assayClassMapQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assay_class_map\".\"assay_class_id\"=?", o.AssayClassID),
	)

	return AssayClassMaps(queryMods...)
}

// LoadAssayClassAssayClassMaps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assayClassificationL) LoadAssayClassAssayClassMaps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssayClassification interface{}, mods queries.Applicator) error {
	var slice []*AssayClassification
	var object *AssayClassification

	if singular {
		object = maybeAssayClassification.(*AssayClassification)
	} else {
		slice = *maybeAssayClassification.(*[]*AssayClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assayClassificationR{}
		}
		args = append(args, object.AssayClassID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assayClassificationR{}
			}

			for _, a := range args {
				if a == obj.AssayClassID {
					continue Outer
				}
			}

			args = append(args, obj.AssayClassID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assay_class_map`),
		qm.WhereIn(`assay_class_map.assay_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assay_class_map")
	}

	var resultSlice []*AssayClassMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assay_class_map")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assay_class_map")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assay_class_map")
	}

	if len(assayClassMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssayClassAssayClassMaps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayClassMapR{}
			}
			foreign.R.AssayClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AssayClassID == foreign.AssayClassID {
				local.R.AssayClassAssayClassMaps = append(local.R.AssayClassAssayClassMaps, foreign)
				if foreign.R == nil {
					foreign.R = &assayClassMapR{}
				}
				foreign.R.AssayClass = local
				break
			}
		}
	}

	return nil
}

// AddAssayClassAssayClassMaps adds the given related objects to the existing relationships
// of the assay_classification, optionally inserting them as new records.
// Appends related to o.R.AssayClassAssayClassMaps.
// Sets related.R.AssayClass appropriately.
func (o *AssayClassification) AddAssayClassAssayClassMaps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssayClassMap) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssayClassID = o.AssayClassID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assay_class_map\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"assay_class_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayClassMapPrimaryKeyColumns),
			)
			values := []interface{}{o.AssayClassID, rel.AssCLSMapID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssayClassID = o.AssayClassID
		}
	}

	if o.R == nil {
		o.R = &assayClassificationR{
			AssayClassAssayClassMaps: related,
		}
	} else {
		o.R.AssayClassAssayClassMaps = append(o.R.AssayClassAssayClassMaps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayClassMapR{
				AssayClass: o,
			}
		} else {
			rel.R.AssayClass = o
		}
	}
	return nil
}

// AssayClassifications retrieves all the records using an executor.
func AssayClassifications(mods ...qm.QueryMod) assayClassificationQuery {
	mods = append(mods, qm.From("\"assay_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assay_classification\".*"})
	}

	return assayClassificationQuery{q}
}

// FindAssayClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssayClassification(ctx context.Context, exec boil.ContextExecutor, assayClassID int64, selectCols ...string) (*AssayClassification, error) {
	assayClassificationObj := &AssayClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assay_classification\" where \"assay_class_id\"=?", sel,
	)

	q := queries.Raw(query, assayClassID)

	err := q.Bind(ctx, exec, assayClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assay_classification")
	}

	if err = assayClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assayClassificationObj, err
	}

	return assayClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssayClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assayClassificationInsertCacheMut.RLock()
	cache, cached := assayClassificationInsertCache[key]
	assayClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assayClassificationAllColumns,
			assayClassificationColumnsWithDefault,
			assayClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assayClassificationType, assayClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assayClassificationType, assayClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assay_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assay_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assay_classification")
	}

	if !cached {
		assayClassificationInsertCacheMut.Lock()
		assayClassificationInsertCache[key] = cache
		assayClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssayClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssayClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assayClassificationUpdateCacheMut.RLock()
	cache, cached := assayClassificationUpdateCache[key]
	assayClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assayClassificationAllColumns,
			assayClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assay_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assay_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, assayClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assayClassificationType, assayClassificationMapping, append(wl, assayClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assay_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assay_classification")
	}

	if !cached {
		assayClassificationUpdateCacheMut.Lock()
		assayClassificationUpdateCache[key] = cache
		assayClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assayClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assay_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assay_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssayClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assay_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assayClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assayClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssayClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assayClassificationUpsertCacheMut.RLock()
	cache, cached := assayClassificationUpsertCache[key]
	assayClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assayClassificationAllColumns,
			assayClassificationColumnsWithDefault,
			assayClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assayClassificationAllColumns,
			assayClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assay_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assayClassificationPrimaryKeyColumns))
			copy(conflict, assayClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"assay_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assayClassificationType, assayClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assayClassificationType, assayClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assay_classification")
	}

	if !cached {
		assayClassificationUpsertCacheMut.Lock()
		assayClassificationUpsertCache[key] = cache
		assayClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssayClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssayClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssayClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assayClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"assay_classification\" WHERE \"assay_class_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assay_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assay_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assayClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assayClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assay_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssayClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assayClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assay_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assayClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_classification")
	}

	if len(assayClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssayClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssayClassification(ctx, exec, o.AssayClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssayClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssayClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assay_classification\".* FROM \"assay_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssayClassificationSlice")
	}

	*o = slice

	return nil
}

// AssayClassificationExists checks if the AssayClassification row exists.
func AssayClassificationExists(ctx context.Context, exec boil.ContextExecutor, assayClassID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assay_classification\" where \"assay_class_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assayClassID)
	}
	row := exec.QueryRowContext(ctx, sql, assayClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assay_classification exists")
	}

	return exists, nil
}
