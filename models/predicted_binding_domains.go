// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PredictedBindingDomain is an object representing the database table.
type PredictedBindingDomain struct {
	PredbindID       int64       `boil:"predbind_id" json:"predbind_id" toml:"predbind_id" yaml:"predbind_id"`
	ActivityID       null.Int64  `boil:"activity_id" json:"activity_id,omitempty" toml:"activity_id" yaml:"activity_id,omitempty"`
	SiteID           null.Int64  `boil:"site_id" json:"site_id,omitempty" toml:"site_id" yaml:"site_id,omitempty"`
	PredictionMethod null.String `boil:"prediction_method" json:"prediction_method,omitempty" toml:"prediction_method" yaml:"prediction_method,omitempty"`
	Confidence       null.String `boil:"confidence" json:"confidence,omitempty" toml:"confidence" yaml:"confidence,omitempty"`

	R *predictedBindingDomainR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L predictedBindingDomainL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PredictedBindingDomainColumns = struct {
	PredbindID       string
	ActivityID       string
	SiteID           string
	PredictionMethod string
	Confidence       string
}{
	PredbindID:       "predbind_id",
	ActivityID:       "activity_id",
	SiteID:           "site_id",
	PredictionMethod: "prediction_method",
	Confidence:       "confidence",
}

var PredictedBindingDomainTableColumns = struct {
	PredbindID       string
	ActivityID       string
	SiteID           string
	PredictionMethod string
	Confidence       string
}{
	PredbindID:       "predicted_binding_domains.predbind_id",
	ActivityID:       "predicted_binding_domains.activity_id",
	SiteID:           "predicted_binding_domains.site_id",
	PredictionMethod: "predicted_binding_domains.prediction_method",
	Confidence:       "predicted_binding_domains.confidence",
}

// Generated where

var PredictedBindingDomainWhere = struct {
	PredbindID       whereHelperint64
	ActivityID       whereHelpernull_Int64
	SiteID           whereHelpernull_Int64
	PredictionMethod whereHelpernull_String
	Confidence       whereHelpernull_String
}{
	PredbindID:       whereHelperint64{field: "\"predicted_binding_domains\".\"predbind_id\""},
	ActivityID:       whereHelpernull_Int64{field: "\"predicted_binding_domains\".\"activity_id\""},
	SiteID:           whereHelpernull_Int64{field: "\"predicted_binding_domains\".\"site_id\""},
	PredictionMethod: whereHelpernull_String{field: "\"predicted_binding_domains\".\"prediction_method\""},
	Confidence:       whereHelpernull_String{field: "\"predicted_binding_domains\".\"confidence\""},
}

// PredictedBindingDomainRels is where relationship names are stored.
var PredictedBindingDomainRels = struct {
	Site     string
	Activity string
}{
	Site:     "Site",
	Activity: "Activity",
}

// predictedBindingDomainR is where relationships are stored.
type predictedBindingDomainR struct {
	Site     *BindingSite `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	Activity *Activity    `boil:"Activity" json:"Activity" toml:"Activity" yaml:"Activity"`
}

// NewStruct creates a new relationship struct
func (*predictedBindingDomainR) NewStruct() *predictedBindingDomainR {
	return &predictedBindingDomainR{}
}

func (r *predictedBindingDomainR) GetSite() *BindingSite {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *predictedBindingDomainR) GetActivity() *Activity {
	if r == nil {
		return nil
	}
	return r.Activity
}

// predictedBindingDomainL is where Load methods for each relationship are stored.
type predictedBindingDomainL struct{}

var (
	predictedBindingDomainAllColumns            = []string{"predbind_id", "activity_id", "site_id", "prediction_method", "confidence"}
	predictedBindingDomainColumnsWithoutDefault = []string{"predbind_id"}
	predictedBindingDomainColumnsWithDefault    = []string{"activity_id", "site_id", "prediction_method", "confidence"}
	predictedBindingDomainPrimaryKeyColumns     = []string{"predbind_id"}
	predictedBindingDomainGeneratedColumns      = []string{}
)

type (
	// PredictedBindingDomainSlice is an alias for a slice of pointers to PredictedBindingDomain.
	// This should almost always be used instead of []PredictedBindingDomain.
	PredictedBindingDomainSlice []*PredictedBindingDomain
	// PredictedBindingDomainHook is the signature for custom PredictedBindingDomain hook methods
	PredictedBindingDomainHook func(context.Context, boil.ContextExecutor, *PredictedBindingDomain) error

	predictedBindingDomainQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	predictedBindingDomainType                 = reflect.TypeOf(&PredictedBindingDomain{})
	predictedBindingDomainMapping              = queries.MakeStructMapping(predictedBindingDomainType)
	predictedBindingDomainPrimaryKeyMapping, _ = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, predictedBindingDomainPrimaryKeyColumns)
	predictedBindingDomainInsertCacheMut       sync.RWMutex
	predictedBindingDomainInsertCache          = make(map[string]insertCache)
	predictedBindingDomainUpdateCacheMut       sync.RWMutex
	predictedBindingDomainUpdateCache          = make(map[string]updateCache)
	predictedBindingDomainUpsertCacheMut       sync.RWMutex
	predictedBindingDomainUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var predictedBindingDomainAfterSelectHooks []PredictedBindingDomainHook

var predictedBindingDomainBeforeInsertHooks []PredictedBindingDomainHook
var predictedBindingDomainAfterInsertHooks []PredictedBindingDomainHook

var predictedBindingDomainBeforeUpdateHooks []PredictedBindingDomainHook
var predictedBindingDomainAfterUpdateHooks []PredictedBindingDomainHook

var predictedBindingDomainBeforeDeleteHooks []PredictedBindingDomainHook
var predictedBindingDomainAfterDeleteHooks []PredictedBindingDomainHook

var predictedBindingDomainBeforeUpsertHooks []PredictedBindingDomainHook
var predictedBindingDomainAfterUpsertHooks []PredictedBindingDomainHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PredictedBindingDomain) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PredictedBindingDomain) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PredictedBindingDomain) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PredictedBindingDomain) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PredictedBindingDomain) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PredictedBindingDomain) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PredictedBindingDomain) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PredictedBindingDomain) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PredictedBindingDomain) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictedBindingDomainAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPredictedBindingDomainHook registers your hook function for all future operations.
func AddPredictedBindingDomainHook(hookPoint boil.HookPoint, predictedBindingDomainHook PredictedBindingDomainHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		predictedBindingDomainAfterSelectHooks = append(predictedBindingDomainAfterSelectHooks, predictedBindingDomainHook)
	case boil.BeforeInsertHook:
		predictedBindingDomainBeforeInsertHooks = append(predictedBindingDomainBeforeInsertHooks, predictedBindingDomainHook)
	case boil.AfterInsertHook:
		predictedBindingDomainAfterInsertHooks = append(predictedBindingDomainAfterInsertHooks, predictedBindingDomainHook)
	case boil.BeforeUpdateHook:
		predictedBindingDomainBeforeUpdateHooks = append(predictedBindingDomainBeforeUpdateHooks, predictedBindingDomainHook)
	case boil.AfterUpdateHook:
		predictedBindingDomainAfterUpdateHooks = append(predictedBindingDomainAfterUpdateHooks, predictedBindingDomainHook)
	case boil.BeforeDeleteHook:
		predictedBindingDomainBeforeDeleteHooks = append(predictedBindingDomainBeforeDeleteHooks, predictedBindingDomainHook)
	case boil.AfterDeleteHook:
		predictedBindingDomainAfterDeleteHooks = append(predictedBindingDomainAfterDeleteHooks, predictedBindingDomainHook)
	case boil.BeforeUpsertHook:
		predictedBindingDomainBeforeUpsertHooks = append(predictedBindingDomainBeforeUpsertHooks, predictedBindingDomainHook)
	case boil.AfterUpsertHook:
		predictedBindingDomainAfterUpsertHooks = append(predictedBindingDomainAfterUpsertHooks, predictedBindingDomainHook)
	}
}

// One returns a single predictedBindingDomain record from the query.
func (q predictedBindingDomainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PredictedBindingDomain, error) {
	o := &PredictedBindingDomain{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for predicted_binding_domains")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PredictedBindingDomain records from the query.
func (q predictedBindingDomainQuery) All(ctx context.Context, exec boil.ContextExecutor) (PredictedBindingDomainSlice, error) {
	var o []*PredictedBindingDomain

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PredictedBindingDomain slice")
	}

	if len(predictedBindingDomainAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PredictedBindingDomain records in the query.
func (q predictedBindingDomainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count predicted_binding_domains rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q predictedBindingDomainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if predicted_binding_domains exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *PredictedBindingDomain) Site(mods ...qm.QueryMod) bindingSiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"site_id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return BindingSites(queryMods...)
}

// Activity pointed to by the foreign key.
func (o *PredictedBindingDomain) Activity(mods ...qm.QueryMod) activityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"activity_id\" = ?", o.ActivityID),
	}

	queryMods = append(queryMods, mods...)

	return Activities(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (predictedBindingDomainL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybePredictedBindingDomain interface{}, mods queries.Applicator) error {
	var slice []*PredictedBindingDomain
	var object *PredictedBindingDomain

	if singular {
		object = maybePredictedBindingDomain.(*PredictedBindingDomain)
	} else {
		slice = *maybePredictedBindingDomain.(*[]*PredictedBindingDomain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &predictedBindingDomainR{}
		}
		if !queries.IsNil(object.SiteID) {
			args = append(args, object.SiteID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &predictedBindingDomainR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SiteID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SiteID) {
				args = append(args, obj.SiteID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`binding_sites`),
		qm.WhereIn(`binding_sites.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BindingSite")
	}

	var resultSlice []*BindingSite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BindingSite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for binding_sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for binding_sites")
	}

	if len(predictedBindingDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &bindingSiteR{}
		}
		foreign.R.SitePredictedBindingDomains = append(foreign.R.SitePredictedBindingDomains, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SiteID, foreign.SiteID) {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &bindingSiteR{}
				}
				foreign.R.SitePredictedBindingDomains = append(foreign.R.SitePredictedBindingDomains, local)
				break
			}
		}
	}

	return nil
}

// LoadActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (predictedBindingDomainL) LoadActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybePredictedBindingDomain interface{}, mods queries.Applicator) error {
	var slice []*PredictedBindingDomain
	var object *PredictedBindingDomain

	if singular {
		object = maybePredictedBindingDomain.(*PredictedBindingDomain)
	} else {
		slice = *maybePredictedBindingDomain.(*[]*PredictedBindingDomain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &predictedBindingDomainR{}
		}
		if !queries.IsNil(object.ActivityID) {
			args = append(args, object.ActivityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &predictedBindingDomainR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ActivityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ActivityID) {
				args = append(args, obj.ActivityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.activity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Activity")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Activity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(predictedBindingDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Activity = foreign
		if foreign.R == nil {
			foreign.R = &activityR{}
		}
		foreign.R.PredictedBindingDomains = append(foreign.R.PredictedBindingDomains, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ActivityID, foreign.ActivityID) {
				local.R.Activity = foreign
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.PredictedBindingDomains = append(foreign.R.PredictedBindingDomains, local)
				break
			}
		}
	}

	return nil
}

// SetSite of the predictedBindingDomain to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SitePredictedBindingDomains.
func (o *PredictedBindingDomain) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BindingSite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"predicted_binding_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 0, predictedBindingDomainPrimaryKeyColumns),
	)
	values := []interface{}{related.SiteID, o.PredbindID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SiteID, related.SiteID)
	if o.R == nil {
		o.R = &predictedBindingDomainR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &bindingSiteR{
			SitePredictedBindingDomains: PredictedBindingDomainSlice{o},
		}
	} else {
		related.R.SitePredictedBindingDomains = append(related.R.SitePredictedBindingDomains, o)
	}

	return nil
}

// RemoveSite relationship.
// Sets o.R.Site to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PredictedBindingDomain) RemoveSite(ctx context.Context, exec boil.ContextExecutor, related *BindingSite) error {
	var err error

	queries.SetScanner(&o.SiteID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("site_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Site = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SitePredictedBindingDomains {
		if queries.Equal(o.SiteID, ri.SiteID) {
			continue
		}

		ln := len(related.R.SitePredictedBindingDomains)
		if ln > 1 && i < ln-1 {
			related.R.SitePredictedBindingDomains[i] = related.R.SitePredictedBindingDomains[ln-1]
		}
		related.R.SitePredictedBindingDomains = related.R.SitePredictedBindingDomains[:ln-1]
		break
	}
	return nil
}

// SetActivity of the predictedBindingDomain to the related item.
// Sets o.R.Activity to related.
// Adds o to related.R.PredictedBindingDomains.
func (o *PredictedBindingDomain) SetActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Activity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"predicted_binding_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"activity_id"}),
		strmangle.WhereClause("\"", "\"", 0, predictedBindingDomainPrimaryKeyColumns),
	)
	values := []interface{}{related.ActivityID, o.PredbindID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ActivityID, related.ActivityID)
	if o.R == nil {
		o.R = &predictedBindingDomainR{
			Activity: related,
		}
	} else {
		o.R.Activity = related
	}

	if related.R == nil {
		related.R = &activityR{
			PredictedBindingDomains: PredictedBindingDomainSlice{o},
		}
	} else {
		related.R.PredictedBindingDomains = append(related.R.PredictedBindingDomains, o)
	}

	return nil
}

// RemoveActivity relationship.
// Sets o.R.Activity to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PredictedBindingDomain) RemoveActivity(ctx context.Context, exec boil.ContextExecutor, related *Activity) error {
	var err error

	queries.SetScanner(&o.ActivityID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("activity_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Activity = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PredictedBindingDomains {
		if queries.Equal(o.ActivityID, ri.ActivityID) {
			continue
		}

		ln := len(related.R.PredictedBindingDomains)
		if ln > 1 && i < ln-1 {
			related.R.PredictedBindingDomains[i] = related.R.PredictedBindingDomains[ln-1]
		}
		related.R.PredictedBindingDomains = related.R.PredictedBindingDomains[:ln-1]
		break
	}
	return nil
}

// PredictedBindingDomains retrieves all the records using an executor.
func PredictedBindingDomains(mods ...qm.QueryMod) predictedBindingDomainQuery {
	mods = append(mods, qm.From("\"predicted_binding_domains\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"predicted_binding_domains\".*"})
	}

	return predictedBindingDomainQuery{q}
}

// FindPredictedBindingDomain retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPredictedBindingDomain(ctx context.Context, exec boil.ContextExecutor, predbindID int64, selectCols ...string) (*PredictedBindingDomain, error) {
	predictedBindingDomainObj := &PredictedBindingDomain{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"predicted_binding_domains\" where \"predbind_id\"=?", sel,
	)

	q := queries.Raw(query, predbindID)

	err := q.Bind(ctx, exec, predictedBindingDomainObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from predicted_binding_domains")
	}

	if err = predictedBindingDomainObj.doAfterSelectHooks(ctx, exec); err != nil {
		return predictedBindingDomainObj, err
	}

	return predictedBindingDomainObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PredictedBindingDomain) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no predicted_binding_domains provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(predictedBindingDomainColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	predictedBindingDomainInsertCacheMut.RLock()
	cache, cached := predictedBindingDomainInsertCache[key]
	predictedBindingDomainInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			predictedBindingDomainAllColumns,
			predictedBindingDomainColumnsWithDefault,
			predictedBindingDomainColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"predicted_binding_domains\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"predicted_binding_domains\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into predicted_binding_domains")
	}

	if !cached {
		predictedBindingDomainInsertCacheMut.Lock()
		predictedBindingDomainInsertCache[key] = cache
		predictedBindingDomainInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PredictedBindingDomain.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PredictedBindingDomain) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	predictedBindingDomainUpdateCacheMut.RLock()
	cache, cached := predictedBindingDomainUpdateCache[key]
	predictedBindingDomainUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			predictedBindingDomainAllColumns,
			predictedBindingDomainPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update predicted_binding_domains, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"predicted_binding_domains\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, predictedBindingDomainPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, append(wl, predictedBindingDomainPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update predicted_binding_domains row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for predicted_binding_domains")
	}

	if !cached {
		predictedBindingDomainUpdateCacheMut.Lock()
		predictedBindingDomainUpdateCache[key] = cache
		predictedBindingDomainUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q predictedBindingDomainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for predicted_binding_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for predicted_binding_domains")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PredictedBindingDomainSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictedBindingDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"predicted_binding_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, predictedBindingDomainPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in predictedBindingDomain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all predictedBindingDomain")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PredictedBindingDomain) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no predicted_binding_domains provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(predictedBindingDomainColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	predictedBindingDomainUpsertCacheMut.RLock()
	cache, cached := predictedBindingDomainUpsertCache[key]
	predictedBindingDomainUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			predictedBindingDomainAllColumns,
			predictedBindingDomainColumnsWithDefault,
			predictedBindingDomainColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			predictedBindingDomainAllColumns,
			predictedBindingDomainPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert predicted_binding_domains, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(predictedBindingDomainPrimaryKeyColumns))
			copy(conflict, predictedBindingDomainPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"predicted_binding_domains\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(predictedBindingDomainType, predictedBindingDomainMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert predicted_binding_domains")
	}

	if !cached {
		predictedBindingDomainUpsertCacheMut.Lock()
		predictedBindingDomainUpsertCache[key] = cache
		predictedBindingDomainUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PredictedBindingDomain record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PredictedBindingDomain) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PredictedBindingDomain provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), predictedBindingDomainPrimaryKeyMapping)
	sql := "DELETE FROM \"predicted_binding_domains\" WHERE \"predbind_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from predicted_binding_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for predicted_binding_domains")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q predictedBindingDomainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no predictedBindingDomainQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from predicted_binding_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for predicted_binding_domains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PredictedBindingDomainSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(predictedBindingDomainBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictedBindingDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"predicted_binding_domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, predictedBindingDomainPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from predictedBindingDomain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for predicted_binding_domains")
	}

	if len(predictedBindingDomainAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PredictedBindingDomain) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPredictedBindingDomain(ctx, exec, o.PredbindID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PredictedBindingDomainSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PredictedBindingDomainSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictedBindingDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"predicted_binding_domains\".* FROM \"predicted_binding_domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, predictedBindingDomainPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PredictedBindingDomainSlice")
	}

	*o = slice

	return nil
}

// PredictedBindingDomainExists checks if the PredictedBindingDomain row exists.
func PredictedBindingDomainExists(ctx context.Context, exec boil.ContextExecutor, predbindID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"predicted_binding_domains\" where \"predbind_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, predbindID)
	}
	row := exec.QueryRowContext(ctx, sql, predbindID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if predicted_binding_domains exists")
	}

	return exists, nil
}
