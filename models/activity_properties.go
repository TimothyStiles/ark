// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ActivityProperty is an object representing the database table.
type ActivityProperty struct {
	ApID              int64             `boil:"ap_id" json:"ap_id" toml:"ap_id" yaml:"ap_id"`
	ActivityID        int64             `boil:"activity_id" json:"activity_id" toml:"activity_id" yaml:"activity_id"`
	Type              string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	Relation          null.String       `boil:"relation" json:"relation,omitempty" toml:"relation" yaml:"relation,omitempty"`
	Value             types.NullDecimal `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Units             null.String       `boil:"units" json:"units,omitempty" toml:"units" yaml:"units,omitempty"`
	TextValue         null.String       `boil:"text_value" json:"text_value,omitempty" toml:"text_value" yaml:"text_value,omitempty"`
	StandardType      null.String       `boil:"standard_type" json:"standard_type,omitempty" toml:"standard_type" yaml:"standard_type,omitempty"`
	StandardRelation  null.String       `boil:"standard_relation" json:"standard_relation,omitempty" toml:"standard_relation" yaml:"standard_relation,omitempty"`
	StandardValue     types.NullDecimal `boil:"standard_value" json:"standard_value,omitempty" toml:"standard_value" yaml:"standard_value,omitempty"`
	StandardUnits     null.String       `boil:"standard_units" json:"standard_units,omitempty" toml:"standard_units" yaml:"standard_units,omitempty"`
	StandardTextValue null.String       `boil:"standard_text_value" json:"standard_text_value,omitempty" toml:"standard_text_value" yaml:"standard_text_value,omitempty"`
	Comments          null.String       `boil:"comments" json:"comments,omitempty" toml:"comments" yaml:"comments,omitempty"`
	ResultFlag        int16             `boil:"result_flag" json:"result_flag" toml:"result_flag" yaml:"result_flag"`

	R *activityPropertyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activityPropertyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActivityPropertyColumns = struct {
	ApID              string
	ActivityID        string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
	ResultFlag        string
}{
	ApID:              "ap_id",
	ActivityID:        "activity_id",
	Type:              "type",
	Relation:          "relation",
	Value:             "value",
	Units:             "units",
	TextValue:         "text_value",
	StandardType:      "standard_type",
	StandardRelation:  "standard_relation",
	StandardValue:     "standard_value",
	StandardUnits:     "standard_units",
	StandardTextValue: "standard_text_value",
	Comments:          "comments",
	ResultFlag:        "result_flag",
}

var ActivityPropertyTableColumns = struct {
	ApID              string
	ActivityID        string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
	ResultFlag        string
}{
	ApID:              "activity_properties.ap_id",
	ActivityID:        "activity_properties.activity_id",
	Type:              "activity_properties.type",
	Relation:          "activity_properties.relation",
	Value:             "activity_properties.value",
	Units:             "activity_properties.units",
	TextValue:         "activity_properties.text_value",
	StandardType:      "activity_properties.standard_type",
	StandardRelation:  "activity_properties.standard_relation",
	StandardValue:     "activity_properties.standard_value",
	StandardUnits:     "activity_properties.standard_units",
	StandardTextValue: "activity_properties.standard_text_value",
	Comments:          "activity_properties.comments",
	ResultFlag:        "activity_properties.result_flag",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ActivityPropertyWhere = struct {
	ApID              whereHelperint64
	ActivityID        whereHelperint64
	Type              whereHelperstring
	Relation          whereHelpernull_String
	Value             whereHelpertypes_NullDecimal
	Units             whereHelpernull_String
	TextValue         whereHelpernull_String
	StandardType      whereHelpernull_String
	StandardRelation  whereHelpernull_String
	StandardValue     whereHelpertypes_NullDecimal
	StandardUnits     whereHelpernull_String
	StandardTextValue whereHelpernull_String
	Comments          whereHelpernull_String
	ResultFlag        whereHelperint16
}{
	ApID:              whereHelperint64{field: "\"activity_properties\".\"ap_id\""},
	ActivityID:        whereHelperint64{field: "\"activity_properties\".\"activity_id\""},
	Type:              whereHelperstring{field: "\"activity_properties\".\"type\""},
	Relation:          whereHelpernull_String{field: "\"activity_properties\".\"relation\""},
	Value:             whereHelpertypes_NullDecimal{field: "\"activity_properties\".\"value\""},
	Units:             whereHelpernull_String{field: "\"activity_properties\".\"units\""},
	TextValue:         whereHelpernull_String{field: "\"activity_properties\".\"text_value\""},
	StandardType:      whereHelpernull_String{field: "\"activity_properties\".\"standard_type\""},
	StandardRelation:  whereHelpernull_String{field: "\"activity_properties\".\"standard_relation\""},
	StandardValue:     whereHelpertypes_NullDecimal{field: "\"activity_properties\".\"standard_value\""},
	StandardUnits:     whereHelpernull_String{field: "\"activity_properties\".\"standard_units\""},
	StandardTextValue: whereHelpernull_String{field: "\"activity_properties\".\"standard_text_value\""},
	Comments:          whereHelpernull_String{field: "\"activity_properties\".\"comments\""},
	ResultFlag:        whereHelperint16{field: "\"activity_properties\".\"result_flag\""},
}

// ActivityPropertyRels is where relationship names are stored.
var ActivityPropertyRels = struct {
	Activity string
}{
	Activity: "Activity",
}

// activityPropertyR is where relationships are stored.
type activityPropertyR struct {
	Activity *Activity `boil:"Activity" json:"Activity" toml:"Activity" yaml:"Activity"`
}

// NewStruct creates a new relationship struct
func (*activityPropertyR) NewStruct() *activityPropertyR {
	return &activityPropertyR{}
}

func (r *activityPropertyR) GetActivity() *Activity {
	if r == nil {
		return nil
	}
	return r.Activity
}

// activityPropertyL is where Load methods for each relationship are stored.
type activityPropertyL struct{}

var (
	activityPropertyAllColumns            = []string{"ap_id", "activity_id", "type", "relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments", "result_flag"}
	activityPropertyColumnsWithoutDefault = []string{"ap_id", "activity_id", "type", "result_flag"}
	activityPropertyColumnsWithDefault    = []string{"relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments"}
	activityPropertyPrimaryKeyColumns     = []string{"ap_id"}
	activityPropertyGeneratedColumns      = []string{}
)

type (
	// ActivityPropertySlice is an alias for a slice of pointers to ActivityProperty.
	// This should almost always be used instead of []ActivityProperty.
	ActivityPropertySlice []*ActivityProperty
	// ActivityPropertyHook is the signature for custom ActivityProperty hook methods
	ActivityPropertyHook func(context.Context, boil.ContextExecutor, *ActivityProperty) error

	activityPropertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activityPropertyType                 = reflect.TypeOf(&ActivityProperty{})
	activityPropertyMapping              = queries.MakeStructMapping(activityPropertyType)
	activityPropertyPrimaryKeyMapping, _ = queries.BindMapping(activityPropertyType, activityPropertyMapping, activityPropertyPrimaryKeyColumns)
	activityPropertyInsertCacheMut       sync.RWMutex
	activityPropertyInsertCache          = make(map[string]insertCache)
	activityPropertyUpdateCacheMut       sync.RWMutex
	activityPropertyUpdateCache          = make(map[string]updateCache)
	activityPropertyUpsertCacheMut       sync.RWMutex
	activityPropertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activityPropertyAfterSelectHooks []ActivityPropertyHook

var activityPropertyBeforeInsertHooks []ActivityPropertyHook
var activityPropertyAfterInsertHooks []ActivityPropertyHook

var activityPropertyBeforeUpdateHooks []ActivityPropertyHook
var activityPropertyAfterUpdateHooks []ActivityPropertyHook

var activityPropertyBeforeDeleteHooks []ActivityPropertyHook
var activityPropertyAfterDeleteHooks []ActivityPropertyHook

var activityPropertyBeforeUpsertHooks []ActivityPropertyHook
var activityPropertyAfterUpsertHooks []ActivityPropertyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActivityProperty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActivityProperty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActivityProperty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActivityProperty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActivityProperty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActivityProperty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActivityProperty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActivityProperty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActivityProperty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activityPropertyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActivityPropertyHook registers your hook function for all future operations.
func AddActivityPropertyHook(hookPoint boil.HookPoint, activityPropertyHook ActivityPropertyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activityPropertyAfterSelectHooks = append(activityPropertyAfterSelectHooks, activityPropertyHook)
	case boil.BeforeInsertHook:
		activityPropertyBeforeInsertHooks = append(activityPropertyBeforeInsertHooks, activityPropertyHook)
	case boil.AfterInsertHook:
		activityPropertyAfterInsertHooks = append(activityPropertyAfterInsertHooks, activityPropertyHook)
	case boil.BeforeUpdateHook:
		activityPropertyBeforeUpdateHooks = append(activityPropertyBeforeUpdateHooks, activityPropertyHook)
	case boil.AfterUpdateHook:
		activityPropertyAfterUpdateHooks = append(activityPropertyAfterUpdateHooks, activityPropertyHook)
	case boil.BeforeDeleteHook:
		activityPropertyBeforeDeleteHooks = append(activityPropertyBeforeDeleteHooks, activityPropertyHook)
	case boil.AfterDeleteHook:
		activityPropertyAfterDeleteHooks = append(activityPropertyAfterDeleteHooks, activityPropertyHook)
	case boil.BeforeUpsertHook:
		activityPropertyBeforeUpsertHooks = append(activityPropertyBeforeUpsertHooks, activityPropertyHook)
	case boil.AfterUpsertHook:
		activityPropertyAfterUpsertHooks = append(activityPropertyAfterUpsertHooks, activityPropertyHook)
	}
}

// One returns a single activityProperty record from the query.
func (q activityPropertyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActivityProperty, error) {
	o := &ActivityProperty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for activity_properties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActivityProperty records from the query.
func (q activityPropertyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActivityPropertySlice, error) {
	var o []*ActivityProperty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActivityProperty slice")
	}

	if len(activityPropertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActivityProperty records in the query.
func (q activityPropertyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count activity_properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q activityPropertyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if activity_properties exists")
	}

	return count > 0, nil
}

// Activity pointed to by the foreign key.
func (o *ActivityProperty) Activity(mods ...qm.QueryMod) activityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"activity_id\" = ?", o.ActivityID),
	}

	queryMods = append(queryMods, mods...)

	return Activities(queryMods...)
}

// LoadActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activityPropertyL) LoadActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActivityProperty interface{}, mods queries.Applicator) error {
	var slice []*ActivityProperty
	var object *ActivityProperty

	if singular {
		object = maybeActivityProperty.(*ActivityProperty)
	} else {
		slice = *maybeActivityProperty.(*[]*ActivityProperty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activityPropertyR{}
		}
		args = append(args, object.ActivityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activityPropertyR{}
			}

			for _, a := range args {
				if a == obj.ActivityID {
					continue Outer
				}
			}

			args = append(args, obj.ActivityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.activity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Activity")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Activity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityPropertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Activity = foreign
		if foreign.R == nil {
			foreign.R = &activityR{}
		}
		foreign.R.ActivityProperties = append(foreign.R.ActivityProperties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActivityID == foreign.ActivityID {
				local.R.Activity = foreign
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.ActivityProperties = append(foreign.R.ActivityProperties, local)
				break
			}
		}
	}

	return nil
}

// SetActivity of the activityProperty to the related item.
// Sets o.R.Activity to related.
// Adds o to related.R.ActivityProperties.
func (o *ActivityProperty) SetActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Activity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"activity_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"activity_id"}),
		strmangle.WhereClause("\"", "\"", 0, activityPropertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ActivityID, o.ApID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActivityID = related.ActivityID
	if o.R == nil {
		o.R = &activityPropertyR{
			Activity: related,
		}
	} else {
		o.R.Activity = related
	}

	if related.R == nil {
		related.R = &activityR{
			ActivityProperties: ActivityPropertySlice{o},
		}
	} else {
		related.R.ActivityProperties = append(related.R.ActivityProperties, o)
	}

	return nil
}

// ActivityProperties retrieves all the records using an executor.
func ActivityProperties(mods ...qm.QueryMod) activityPropertyQuery {
	mods = append(mods, qm.From("\"activity_properties\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"activity_properties\".*"})
	}

	return activityPropertyQuery{q}
}

// FindActivityProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActivityProperty(ctx context.Context, exec boil.ContextExecutor, apID int64, selectCols ...string) (*ActivityProperty, error) {
	activityPropertyObj := &ActivityProperty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"activity_properties\" where \"ap_id\"=?", sel,
	)

	q := queries.Raw(query, apID)

	err := q.Bind(ctx, exec, activityPropertyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from activity_properties")
	}

	if err = activityPropertyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activityPropertyObj, err
	}

	return activityPropertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActivityProperty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_properties provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activityPropertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activityPropertyInsertCacheMut.RLock()
	cache, cached := activityPropertyInsertCache[key]
	activityPropertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activityPropertyAllColumns,
			activityPropertyColumnsWithDefault,
			activityPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activityPropertyType, activityPropertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activityPropertyType, activityPropertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"activity_properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"activity_properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into activity_properties")
	}

	if !cached {
		activityPropertyInsertCacheMut.Lock()
		activityPropertyInsertCache[key] = cache
		activityPropertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActivityProperty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActivityProperty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activityPropertyUpdateCacheMut.RLock()
	cache, cached := activityPropertyUpdateCache[key]
	activityPropertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activityPropertyAllColumns,
			activityPropertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update activity_properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"activity_properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, activityPropertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activityPropertyType, activityPropertyMapping, append(wl, activityPropertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update activity_properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for activity_properties")
	}

	if !cached {
		activityPropertyUpdateCacheMut.Lock()
		activityPropertyUpdateCache[key] = cache
		activityPropertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q activityPropertyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for activity_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for activity_properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActivityPropertySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activityPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"activity_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activityPropertyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activityProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activityProperty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActivityProperty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_properties provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activityPropertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activityPropertyUpsertCacheMut.RLock()
	cache, cached := activityPropertyUpsertCache[key]
	activityPropertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activityPropertyAllColumns,
			activityPropertyColumnsWithDefault,
			activityPropertyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			activityPropertyAllColumns,
			activityPropertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert activity_properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(activityPropertyPrimaryKeyColumns))
			copy(conflict, activityPropertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"activity_properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(activityPropertyType, activityPropertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activityPropertyType, activityPropertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert activity_properties")
	}

	if !cached {
		activityPropertyUpsertCacheMut.Lock()
		activityPropertyUpsertCache[key] = cache
		activityPropertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActivityProperty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActivityProperty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActivityProperty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activityPropertyPrimaryKeyMapping)
	sql := "DELETE FROM \"activity_properties\" WHERE \"ap_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from activity_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for activity_properties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q activityPropertyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activityPropertyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activity_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActivityPropertySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activityPropertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activityPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"activity_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activityPropertyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activityProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_properties")
	}

	if len(activityPropertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActivityProperty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActivityProperty(ctx, exec, o.ApID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActivityPropertySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActivityPropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activityPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"activity_properties\".* FROM \"activity_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activityPropertyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActivityPropertySlice")
	}

	*o = slice

	return nil
}

// ActivityPropertyExists checks if the ActivityProperty row exists.
func ActivityPropertyExists(ctx context.Context, exec boil.ContextExecutor, apID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"activity_properties\" where \"ap_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, apID)
	}
	row := exec.QueryRowContext(ctx, sql, apID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if activity_properties exists")
	}

	return exists, nil
}
