// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StructuralAlert is an object representing the database table.
type StructuralAlert struct {
	AlertID    int64  `boil:"alert_id" json:"alert_id" toml:"alert_id" yaml:"alert_id"`
	AlertSetID int64  `boil:"alert_set_id" json:"alert_set_id" toml:"alert_set_id" yaml:"alert_set_id"`
	AlertName  string `boil:"alert_name" json:"alert_name" toml:"alert_name" yaml:"alert_name"`
	Smarts     string `boil:"smarts" json:"smarts" toml:"smarts" yaml:"smarts"`

	R *structuralAlertR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L structuralAlertL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StructuralAlertColumns = struct {
	AlertID    string
	AlertSetID string
	AlertName  string
	Smarts     string
}{
	AlertID:    "alert_id",
	AlertSetID: "alert_set_id",
	AlertName:  "alert_name",
	Smarts:     "smarts",
}

var StructuralAlertTableColumns = struct {
	AlertID    string
	AlertSetID string
	AlertName  string
	Smarts     string
}{
	AlertID:    "structural_alerts.alert_id",
	AlertSetID: "structural_alerts.alert_set_id",
	AlertName:  "structural_alerts.alert_name",
	Smarts:     "structural_alerts.smarts",
}

// Generated where

var StructuralAlertWhere = struct {
	AlertID    whereHelperint64
	AlertSetID whereHelperint64
	AlertName  whereHelperstring
	Smarts     whereHelperstring
}{
	AlertID:    whereHelperint64{field: "\"structural_alerts\".\"alert_id\""},
	AlertSetID: whereHelperint64{field: "\"structural_alerts\".\"alert_set_id\""},
	AlertName:  whereHelperstring{field: "\"structural_alerts\".\"alert_name\""},
	Smarts:     whereHelperstring{field: "\"structural_alerts\".\"smarts\""},
}

// StructuralAlertRels is where relationship names are stored.
var StructuralAlertRels = struct {
	AlertSet                      string
	AlertCompoundStructuralAlerts string
}{
	AlertSet:                      "AlertSet",
	AlertCompoundStructuralAlerts: "AlertCompoundStructuralAlerts",
}

// structuralAlertR is where relationships are stored.
type structuralAlertR struct {
	AlertSet                      *StructuralAlertSet          `boil:"AlertSet" json:"AlertSet" toml:"AlertSet" yaml:"AlertSet"`
	AlertCompoundStructuralAlerts CompoundStructuralAlertSlice `boil:"AlertCompoundStructuralAlerts" json:"AlertCompoundStructuralAlerts" toml:"AlertCompoundStructuralAlerts" yaml:"AlertCompoundStructuralAlerts"`
}

// NewStruct creates a new relationship struct
func (*structuralAlertR) NewStruct() *structuralAlertR {
	return &structuralAlertR{}
}

func (r *structuralAlertR) GetAlertSet() *StructuralAlertSet {
	if r == nil {
		return nil
	}
	return r.AlertSet
}

func (r *structuralAlertR) GetAlertCompoundStructuralAlerts() CompoundStructuralAlertSlice {
	if r == nil {
		return nil
	}
	return r.AlertCompoundStructuralAlerts
}

// structuralAlertL is where Load methods for each relationship are stored.
type structuralAlertL struct{}

var (
	structuralAlertAllColumns            = []string{"alert_id", "alert_set_id", "alert_name", "smarts"}
	structuralAlertColumnsWithoutDefault = []string{"alert_id", "alert_set_id", "alert_name", "smarts"}
	structuralAlertColumnsWithDefault    = []string{}
	structuralAlertPrimaryKeyColumns     = []string{"alert_id"}
	structuralAlertGeneratedColumns      = []string{}
)

type (
	// StructuralAlertSlice is an alias for a slice of pointers to StructuralAlert.
	// This should almost always be used instead of []StructuralAlert.
	StructuralAlertSlice []*StructuralAlert
	// StructuralAlertHook is the signature for custom StructuralAlert hook methods
	StructuralAlertHook func(context.Context, boil.ContextExecutor, *StructuralAlert) error

	structuralAlertQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	structuralAlertType                 = reflect.TypeOf(&StructuralAlert{})
	structuralAlertMapping              = queries.MakeStructMapping(structuralAlertType)
	structuralAlertPrimaryKeyMapping, _ = queries.BindMapping(structuralAlertType, structuralAlertMapping, structuralAlertPrimaryKeyColumns)
	structuralAlertInsertCacheMut       sync.RWMutex
	structuralAlertInsertCache          = make(map[string]insertCache)
	structuralAlertUpdateCacheMut       sync.RWMutex
	structuralAlertUpdateCache          = make(map[string]updateCache)
	structuralAlertUpsertCacheMut       sync.RWMutex
	structuralAlertUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var structuralAlertAfterSelectHooks []StructuralAlertHook

var structuralAlertBeforeInsertHooks []StructuralAlertHook
var structuralAlertAfterInsertHooks []StructuralAlertHook

var structuralAlertBeforeUpdateHooks []StructuralAlertHook
var structuralAlertAfterUpdateHooks []StructuralAlertHook

var structuralAlertBeforeDeleteHooks []StructuralAlertHook
var structuralAlertAfterDeleteHooks []StructuralAlertHook

var structuralAlertBeforeUpsertHooks []StructuralAlertHook
var structuralAlertAfterUpsertHooks []StructuralAlertHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StructuralAlert) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StructuralAlert) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StructuralAlert) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StructuralAlert) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StructuralAlert) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StructuralAlert) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StructuralAlert) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StructuralAlert) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StructuralAlert) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range structuralAlertAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStructuralAlertHook registers your hook function for all future operations.
func AddStructuralAlertHook(hookPoint boil.HookPoint, structuralAlertHook StructuralAlertHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		structuralAlertAfterSelectHooks = append(structuralAlertAfterSelectHooks, structuralAlertHook)
	case boil.BeforeInsertHook:
		structuralAlertBeforeInsertHooks = append(structuralAlertBeforeInsertHooks, structuralAlertHook)
	case boil.AfterInsertHook:
		structuralAlertAfterInsertHooks = append(structuralAlertAfterInsertHooks, structuralAlertHook)
	case boil.BeforeUpdateHook:
		structuralAlertBeforeUpdateHooks = append(structuralAlertBeforeUpdateHooks, structuralAlertHook)
	case boil.AfterUpdateHook:
		structuralAlertAfterUpdateHooks = append(structuralAlertAfterUpdateHooks, structuralAlertHook)
	case boil.BeforeDeleteHook:
		structuralAlertBeforeDeleteHooks = append(structuralAlertBeforeDeleteHooks, structuralAlertHook)
	case boil.AfterDeleteHook:
		structuralAlertAfterDeleteHooks = append(structuralAlertAfterDeleteHooks, structuralAlertHook)
	case boil.BeforeUpsertHook:
		structuralAlertBeforeUpsertHooks = append(structuralAlertBeforeUpsertHooks, structuralAlertHook)
	case boil.AfterUpsertHook:
		structuralAlertAfterUpsertHooks = append(structuralAlertAfterUpsertHooks, structuralAlertHook)
	}
}

// One returns a single structuralAlert record from the query.
func (q structuralAlertQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StructuralAlert, error) {
	o := &StructuralAlert{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for structural_alerts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StructuralAlert records from the query.
func (q structuralAlertQuery) All(ctx context.Context, exec boil.ContextExecutor) (StructuralAlertSlice, error) {
	var o []*StructuralAlert

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StructuralAlert slice")
	}

	if len(structuralAlertAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StructuralAlert records in the query.
func (q structuralAlertQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count structural_alerts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q structuralAlertQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if structural_alerts exists")
	}

	return count > 0, nil
}

// AlertSet pointed to by the foreign key.
func (o *StructuralAlert) AlertSet(mods ...qm.QueryMod) structuralAlertSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"alert_set_id\" = ?", o.AlertSetID),
	}

	queryMods = append(queryMods, mods...)

	return StructuralAlertSets(queryMods...)
}

// AlertCompoundStructuralAlerts retrieves all the compound_structural_alert's CompoundStructuralAlerts with an executor via alert_id column.
func (o *StructuralAlert) AlertCompoundStructuralAlerts(mods ...qm.QueryMod) compoundStructuralAlertQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"compound_structural_alerts\".\"alert_id\"=?", o.AlertID),
	)

	return CompoundStructuralAlerts(queryMods...)
}

// LoadAlertSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (structuralAlertL) LoadAlertSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStructuralAlert interface{}, mods queries.Applicator) error {
	var slice []*StructuralAlert
	var object *StructuralAlert

	if singular {
		object = maybeStructuralAlert.(*StructuralAlert)
	} else {
		slice = *maybeStructuralAlert.(*[]*StructuralAlert)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &structuralAlertR{}
		}
		args = append(args, object.AlertSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &structuralAlertR{}
			}

			for _, a := range args {
				if a == obj.AlertSetID {
					continue Outer
				}
			}

			args = append(args, obj.AlertSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`structural_alert_sets`),
		qm.WhereIn(`structural_alert_sets.alert_set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StructuralAlertSet")
	}

	var resultSlice []*StructuralAlertSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StructuralAlertSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for structural_alert_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for structural_alert_sets")
	}

	if len(structuralAlertAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AlertSet = foreign
		if foreign.R == nil {
			foreign.R = &structuralAlertSetR{}
		}
		foreign.R.AlertSetStructuralAlerts = append(foreign.R.AlertSetStructuralAlerts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AlertSetID == foreign.AlertSetID {
				local.R.AlertSet = foreign
				if foreign.R == nil {
					foreign.R = &structuralAlertSetR{}
				}
				foreign.R.AlertSetStructuralAlerts = append(foreign.R.AlertSetStructuralAlerts, local)
				break
			}
		}
	}

	return nil
}

// LoadAlertCompoundStructuralAlerts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (structuralAlertL) LoadAlertCompoundStructuralAlerts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStructuralAlert interface{}, mods queries.Applicator) error {
	var slice []*StructuralAlert
	var object *StructuralAlert

	if singular {
		object = maybeStructuralAlert.(*StructuralAlert)
	} else {
		slice = *maybeStructuralAlert.(*[]*StructuralAlert)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &structuralAlertR{}
		}
		args = append(args, object.AlertID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &structuralAlertR{}
			}

			for _, a := range args {
				if a == obj.AlertID {
					continue Outer
				}
			}

			args = append(args, obj.AlertID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_structural_alerts`),
		qm.WhereIn(`compound_structural_alerts.alert_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load compound_structural_alerts")
	}

	var resultSlice []*CompoundStructuralAlert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice compound_structural_alerts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on compound_structural_alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_structural_alerts")
	}

	if len(compoundStructuralAlertAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AlertCompoundStructuralAlerts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &compoundStructuralAlertR{}
			}
			foreign.R.Alert = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AlertID == foreign.AlertID {
				local.R.AlertCompoundStructuralAlerts = append(local.R.AlertCompoundStructuralAlerts, foreign)
				if foreign.R == nil {
					foreign.R = &compoundStructuralAlertR{}
				}
				foreign.R.Alert = local
				break
			}
		}
	}

	return nil
}

// SetAlertSet of the structuralAlert to the related item.
// Sets o.R.AlertSet to related.
// Adds o to related.R.AlertSetStructuralAlerts.
func (o *StructuralAlert) SetAlertSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StructuralAlertSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"structural_alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"alert_set_id"}),
		strmangle.WhereClause("\"", "\"", 0, structuralAlertPrimaryKeyColumns),
	)
	values := []interface{}{related.AlertSetID, o.AlertID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AlertSetID = related.AlertSetID
	if o.R == nil {
		o.R = &structuralAlertR{
			AlertSet: related,
		}
	} else {
		o.R.AlertSet = related
	}

	if related.R == nil {
		related.R = &structuralAlertSetR{
			AlertSetStructuralAlerts: StructuralAlertSlice{o},
		}
	} else {
		related.R.AlertSetStructuralAlerts = append(related.R.AlertSetStructuralAlerts, o)
	}

	return nil
}

// AddAlertCompoundStructuralAlerts adds the given related objects to the existing relationships
// of the structural_alert, optionally inserting them as new records.
// Appends related to o.R.AlertCompoundStructuralAlerts.
// Sets related.R.Alert appropriately.
func (o *StructuralAlert) AddAlertCompoundStructuralAlerts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompoundStructuralAlert) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlertID = o.AlertID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"compound_structural_alerts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"alert_id"}),
				strmangle.WhereClause("\"", "\"", 0, compoundStructuralAlertPrimaryKeyColumns),
			)
			values := []interface{}{o.AlertID, rel.CPDSTRAlertID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlertID = o.AlertID
		}
	}

	if o.R == nil {
		o.R = &structuralAlertR{
			AlertCompoundStructuralAlerts: related,
		}
	} else {
		o.R.AlertCompoundStructuralAlerts = append(o.R.AlertCompoundStructuralAlerts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &compoundStructuralAlertR{
				Alert: o,
			}
		} else {
			rel.R.Alert = o
		}
	}
	return nil
}

// StructuralAlerts retrieves all the records using an executor.
func StructuralAlerts(mods ...qm.QueryMod) structuralAlertQuery {
	mods = append(mods, qm.From("\"structural_alerts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"structural_alerts\".*"})
	}

	return structuralAlertQuery{q}
}

// FindStructuralAlert retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStructuralAlert(ctx context.Context, exec boil.ContextExecutor, alertID int64, selectCols ...string) (*StructuralAlert, error) {
	structuralAlertObj := &StructuralAlert{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"structural_alerts\" where \"alert_id\"=?", sel,
	)

	q := queries.Raw(query, alertID)

	err := q.Bind(ctx, exec, structuralAlertObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from structural_alerts")
	}

	if err = structuralAlertObj.doAfterSelectHooks(ctx, exec); err != nil {
		return structuralAlertObj, err
	}

	return structuralAlertObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StructuralAlert) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no structural_alerts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(structuralAlertColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	structuralAlertInsertCacheMut.RLock()
	cache, cached := structuralAlertInsertCache[key]
	structuralAlertInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			structuralAlertAllColumns,
			structuralAlertColumnsWithDefault,
			structuralAlertColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(structuralAlertType, structuralAlertMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(structuralAlertType, structuralAlertMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"structural_alerts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"structural_alerts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into structural_alerts")
	}

	if !cached {
		structuralAlertInsertCacheMut.Lock()
		structuralAlertInsertCache[key] = cache
		structuralAlertInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StructuralAlert.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StructuralAlert) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	structuralAlertUpdateCacheMut.RLock()
	cache, cached := structuralAlertUpdateCache[key]
	structuralAlertUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			structuralAlertAllColumns,
			structuralAlertPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update structural_alerts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"structural_alerts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, structuralAlertPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(structuralAlertType, structuralAlertMapping, append(wl, structuralAlertPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update structural_alerts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for structural_alerts")
	}

	if !cached {
		structuralAlertUpdateCacheMut.Lock()
		structuralAlertUpdateCache[key] = cache
		structuralAlertUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q structuralAlertQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for structural_alerts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StructuralAlertSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"structural_alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in structuralAlert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all structuralAlert")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StructuralAlert) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no structural_alerts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(structuralAlertColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	structuralAlertUpsertCacheMut.RLock()
	cache, cached := structuralAlertUpsertCache[key]
	structuralAlertUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			structuralAlertAllColumns,
			structuralAlertColumnsWithDefault,
			structuralAlertColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			structuralAlertAllColumns,
			structuralAlertPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert structural_alerts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(structuralAlertPrimaryKeyColumns))
			copy(conflict, structuralAlertPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"structural_alerts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(structuralAlertType, structuralAlertMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(structuralAlertType, structuralAlertMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert structural_alerts")
	}

	if !cached {
		structuralAlertUpsertCacheMut.Lock()
		structuralAlertUpsertCache[key] = cache
		structuralAlertUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StructuralAlert record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StructuralAlert) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StructuralAlert provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), structuralAlertPrimaryKeyMapping)
	sql := "DELETE FROM \"structural_alerts\" WHERE \"alert_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for structural_alerts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q structuralAlertQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no structuralAlertQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for structural_alerts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StructuralAlertSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(structuralAlertBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"structural_alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from structuralAlert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for structural_alerts")
	}

	if len(structuralAlertAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StructuralAlert) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStructuralAlert(ctx, exec, o.AlertID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StructuralAlertSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StructuralAlertSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), structuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"structural_alerts\".* FROM \"structural_alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, structuralAlertPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StructuralAlertSlice")
	}

	*o = slice

	return nil
}

// StructuralAlertExists checks if the StructuralAlert row exists.
func StructuralAlertExists(ctx context.Context, exec boil.ContextExecutor, alertID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"structural_alerts\" where \"alert_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, alertID)
	}
	row := exec.QueryRowContext(ctx, sql, alertID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if structural_alerts exists")
	}

	return exists, nil
}
