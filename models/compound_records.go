// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompoundRecord is an object representing the database table.
type CompoundRecord struct {
	RecordID      int64       `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	Molregno      null.Int64  `boil:"molregno" json:"molregno,omitempty" toml:"molregno" yaml:"molregno,omitempty"`
	DocID         int64       `boil:"doc_id" json:"doc_id" toml:"doc_id" yaml:"doc_id"`
	CompoundKey   null.String `boil:"compound_key" json:"compound_key,omitempty" toml:"compound_key" yaml:"compound_key,omitempty"`
	CompoundName  null.String `boil:"compound_name" json:"compound_name,omitempty" toml:"compound_name" yaml:"compound_name,omitempty"`
	SRCID         int64       `boil:"src_id" json:"src_id" toml:"src_id" yaml:"src_id"`
	SRCCompoundID null.String `boil:"src_compound_id" json:"src_compound_id,omitempty" toml:"src_compound_id" yaml:"src_compound_id,omitempty"`
	Cidx          string      `boil:"cidx" json:"cidx" toml:"cidx" yaml:"cidx"`

	R *compoundRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L compoundRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompoundRecordColumns = struct {
	RecordID      string
	Molregno      string
	DocID         string
	CompoundKey   string
	CompoundName  string
	SRCID         string
	SRCCompoundID string
	Cidx          string
}{
	RecordID:      "record_id",
	Molregno:      "molregno",
	DocID:         "doc_id",
	CompoundKey:   "compound_key",
	CompoundName:  "compound_name",
	SRCID:         "src_id",
	SRCCompoundID: "src_compound_id",
	Cidx:          "cidx",
}

var CompoundRecordTableColumns = struct {
	RecordID      string
	Molregno      string
	DocID         string
	CompoundKey   string
	CompoundName  string
	SRCID         string
	SRCCompoundID string
	Cidx          string
}{
	RecordID:      "compound_records.record_id",
	Molregno:      "compound_records.molregno",
	DocID:         "compound_records.doc_id",
	CompoundKey:   "compound_records.compound_key",
	CompoundName:  "compound_records.compound_name",
	SRCID:         "compound_records.src_id",
	SRCCompoundID: "compound_records.src_compound_id",
	Cidx:          "compound_records.cidx",
}

// Generated where

var CompoundRecordWhere = struct {
	RecordID      whereHelperint64
	Molregno      whereHelpernull_Int64
	DocID         whereHelperint64
	CompoundKey   whereHelpernull_String
	CompoundName  whereHelpernull_String
	SRCID         whereHelperint64
	SRCCompoundID whereHelpernull_String
	Cidx          whereHelperstring
}{
	RecordID:      whereHelperint64{field: "\"compound_records\".\"record_id\""},
	Molregno:      whereHelpernull_Int64{field: "\"compound_records\".\"molregno\""},
	DocID:         whereHelperint64{field: "\"compound_records\".\"doc_id\""},
	CompoundKey:   whereHelpernull_String{field: "\"compound_records\".\"compound_key\""},
	CompoundName:  whereHelpernull_String{field: "\"compound_records\".\"compound_name\""},
	SRCID:         whereHelperint64{field: "\"compound_records\".\"src_id\""},
	SRCCompoundID: whereHelpernull_String{field: "\"compound_records\".\"src_compound_id\""},
	Cidx:          whereHelperstring{field: "\"compound_records\".\"cidx\""},
}

// CompoundRecordRels is where relationship names are stored.
var CompoundRecordRels = struct {
	SRC                         string
	MolregnoMoleculeDictionary  string
	Doc                         string
	RecordActivities            string
	RecordDrugIndications       string
	RecordDrugMechanisms        string
	RecordDrugWarnings          string
	RecordFormulations          string
	SubstrateRecordMetabolisms  string
	MetaboliteRecordMetabolisms string
	DrugRecordMetabolisms       string
}{
	SRC:                         "SRC",
	MolregnoMoleculeDictionary:  "MolregnoMoleculeDictionary",
	Doc:                         "Doc",
	RecordActivities:            "RecordActivities",
	RecordDrugIndications:       "RecordDrugIndications",
	RecordDrugMechanisms:        "RecordDrugMechanisms",
	RecordDrugWarnings:          "RecordDrugWarnings",
	RecordFormulations:          "RecordFormulations",
	SubstrateRecordMetabolisms:  "SubstrateRecordMetabolisms",
	MetaboliteRecordMetabolisms: "MetaboliteRecordMetabolisms",
	DrugRecordMetabolisms:       "DrugRecordMetabolisms",
}

// compoundRecordR is where relationships are stored.
type compoundRecordR struct {
	SRC                         *Source             `boil:"SRC" json:"SRC" toml:"SRC" yaml:"SRC"`
	MolregnoMoleculeDictionary  *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	Doc                         *Doc                `boil:"Doc" json:"Doc" toml:"Doc" yaml:"Doc"`
	RecordActivities            ActivitySlice       `boil:"RecordActivities" json:"RecordActivities" toml:"RecordActivities" yaml:"RecordActivities"`
	RecordDrugIndications       DrugIndicationSlice `boil:"RecordDrugIndications" json:"RecordDrugIndications" toml:"RecordDrugIndications" yaml:"RecordDrugIndications"`
	RecordDrugMechanisms        DrugMechanismSlice  `boil:"RecordDrugMechanisms" json:"RecordDrugMechanisms" toml:"RecordDrugMechanisms" yaml:"RecordDrugMechanisms"`
	RecordDrugWarnings          DrugWarningSlice    `boil:"RecordDrugWarnings" json:"RecordDrugWarnings" toml:"RecordDrugWarnings" yaml:"RecordDrugWarnings"`
	RecordFormulations          FormulationSlice    `boil:"RecordFormulations" json:"RecordFormulations" toml:"RecordFormulations" yaml:"RecordFormulations"`
	SubstrateRecordMetabolisms  MetabolismSlice     `boil:"SubstrateRecordMetabolisms" json:"SubstrateRecordMetabolisms" toml:"SubstrateRecordMetabolisms" yaml:"SubstrateRecordMetabolisms"`
	MetaboliteRecordMetabolisms MetabolismSlice     `boil:"MetaboliteRecordMetabolisms" json:"MetaboliteRecordMetabolisms" toml:"MetaboliteRecordMetabolisms" yaml:"MetaboliteRecordMetabolisms"`
	DrugRecordMetabolisms       MetabolismSlice     `boil:"DrugRecordMetabolisms" json:"DrugRecordMetabolisms" toml:"DrugRecordMetabolisms" yaml:"DrugRecordMetabolisms"`
}

// NewStruct creates a new relationship struct
func (*compoundRecordR) NewStruct() *compoundRecordR {
	return &compoundRecordR{}
}

func (r *compoundRecordR) GetSRC() *Source {
	if r == nil {
		return nil
	}
	return r.SRC
}

func (r *compoundRecordR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *compoundRecordR) GetDoc() *Doc {
	if r == nil {
		return nil
	}
	return r.Doc
}

func (r *compoundRecordR) GetRecordActivities() ActivitySlice {
	if r == nil {
		return nil
	}
	return r.RecordActivities
}

func (r *compoundRecordR) GetRecordDrugIndications() DrugIndicationSlice {
	if r == nil {
		return nil
	}
	return r.RecordDrugIndications
}

func (r *compoundRecordR) GetRecordDrugMechanisms() DrugMechanismSlice {
	if r == nil {
		return nil
	}
	return r.RecordDrugMechanisms
}

func (r *compoundRecordR) GetRecordDrugWarnings() DrugWarningSlice {
	if r == nil {
		return nil
	}
	return r.RecordDrugWarnings
}

func (r *compoundRecordR) GetRecordFormulations() FormulationSlice {
	if r == nil {
		return nil
	}
	return r.RecordFormulations
}

func (r *compoundRecordR) GetSubstrateRecordMetabolisms() MetabolismSlice {
	if r == nil {
		return nil
	}
	return r.SubstrateRecordMetabolisms
}

func (r *compoundRecordR) GetMetaboliteRecordMetabolisms() MetabolismSlice {
	if r == nil {
		return nil
	}
	return r.MetaboliteRecordMetabolisms
}

func (r *compoundRecordR) GetDrugRecordMetabolisms() MetabolismSlice {
	if r == nil {
		return nil
	}
	return r.DrugRecordMetabolisms
}

// compoundRecordL is where Load methods for each relationship are stored.
type compoundRecordL struct{}

var (
	compoundRecordAllColumns            = []string{"record_id", "molregno", "doc_id", "compound_key", "compound_name", "src_id", "src_compound_id", "cidx"}
	compoundRecordColumnsWithoutDefault = []string{"record_id", "doc_id", "src_id", "cidx"}
	compoundRecordColumnsWithDefault    = []string{"molregno", "compound_key", "compound_name", "src_compound_id"}
	compoundRecordPrimaryKeyColumns     = []string{"record_id"}
	compoundRecordGeneratedColumns      = []string{}
)

type (
	// CompoundRecordSlice is an alias for a slice of pointers to CompoundRecord.
	// This should almost always be used instead of []CompoundRecord.
	CompoundRecordSlice []*CompoundRecord
	// CompoundRecordHook is the signature for custom CompoundRecord hook methods
	CompoundRecordHook func(context.Context, boil.ContextExecutor, *CompoundRecord) error

	compoundRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	compoundRecordType                 = reflect.TypeOf(&CompoundRecord{})
	compoundRecordMapping              = queries.MakeStructMapping(compoundRecordType)
	compoundRecordPrimaryKeyMapping, _ = queries.BindMapping(compoundRecordType, compoundRecordMapping, compoundRecordPrimaryKeyColumns)
	compoundRecordInsertCacheMut       sync.RWMutex
	compoundRecordInsertCache          = make(map[string]insertCache)
	compoundRecordUpdateCacheMut       sync.RWMutex
	compoundRecordUpdateCache          = make(map[string]updateCache)
	compoundRecordUpsertCacheMut       sync.RWMutex
	compoundRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var compoundRecordAfterSelectHooks []CompoundRecordHook

var compoundRecordBeforeInsertHooks []CompoundRecordHook
var compoundRecordAfterInsertHooks []CompoundRecordHook

var compoundRecordBeforeUpdateHooks []CompoundRecordHook
var compoundRecordAfterUpdateHooks []CompoundRecordHook

var compoundRecordBeforeDeleteHooks []CompoundRecordHook
var compoundRecordAfterDeleteHooks []CompoundRecordHook

var compoundRecordBeforeUpsertHooks []CompoundRecordHook
var compoundRecordAfterUpsertHooks []CompoundRecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompoundRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompoundRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompoundRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompoundRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompoundRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompoundRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompoundRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompoundRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompoundRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompoundRecordHook registers your hook function for all future operations.
func AddCompoundRecordHook(hookPoint boil.HookPoint, compoundRecordHook CompoundRecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		compoundRecordAfterSelectHooks = append(compoundRecordAfterSelectHooks, compoundRecordHook)
	case boil.BeforeInsertHook:
		compoundRecordBeforeInsertHooks = append(compoundRecordBeforeInsertHooks, compoundRecordHook)
	case boil.AfterInsertHook:
		compoundRecordAfterInsertHooks = append(compoundRecordAfterInsertHooks, compoundRecordHook)
	case boil.BeforeUpdateHook:
		compoundRecordBeforeUpdateHooks = append(compoundRecordBeforeUpdateHooks, compoundRecordHook)
	case boil.AfterUpdateHook:
		compoundRecordAfterUpdateHooks = append(compoundRecordAfterUpdateHooks, compoundRecordHook)
	case boil.BeforeDeleteHook:
		compoundRecordBeforeDeleteHooks = append(compoundRecordBeforeDeleteHooks, compoundRecordHook)
	case boil.AfterDeleteHook:
		compoundRecordAfterDeleteHooks = append(compoundRecordAfterDeleteHooks, compoundRecordHook)
	case boil.BeforeUpsertHook:
		compoundRecordBeforeUpsertHooks = append(compoundRecordBeforeUpsertHooks, compoundRecordHook)
	case boil.AfterUpsertHook:
		compoundRecordAfterUpsertHooks = append(compoundRecordAfterUpsertHooks, compoundRecordHook)
	}
}

// One returns a single compoundRecord record from the query.
func (q compoundRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompoundRecord, error) {
	o := &CompoundRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for compound_records")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompoundRecord records from the query.
func (q compoundRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompoundRecordSlice, error) {
	var o []*CompoundRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompoundRecord slice")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompoundRecord records in the query.
func (q compoundRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count compound_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q compoundRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if compound_records exists")
	}

	return count > 0, nil
}

// SRC pointed to by the foreign key.
func (o *CompoundRecord) SRC(mods ...qm.QueryMod) sourceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"src_id\" = ?", o.SRCID),
	}

	queryMods = append(queryMods, mods...)

	return Sources(queryMods...)
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *CompoundRecord) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// Doc pointed to by the foreign key.
func (o *CompoundRecord) Doc(mods ...qm.QueryMod) docQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"doc_id\" = ?", o.DocID),
	}

	queryMods = append(queryMods, mods...)

	return Docs(queryMods...)
}

// RecordActivities retrieves all the activity's Activities with an executor via record_id column.
func (o *CompoundRecord) RecordActivities(mods ...qm.QueryMod) activityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activities\".\"record_id\"=?", o.RecordID),
	)

	return Activities(queryMods...)
}

// RecordDrugIndications retrieves all the drug_indication's DrugIndications with an executor via record_id column.
func (o *CompoundRecord) RecordDrugIndications(mods ...qm.QueryMod) drugIndicationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_indication\".\"record_id\"=?", o.RecordID),
	)

	return DrugIndications(queryMods...)
}

// RecordDrugMechanisms retrieves all the drug_mechanism's DrugMechanisms with an executor via record_id column.
func (o *CompoundRecord) RecordDrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_mechanism\".\"record_id\"=?", o.RecordID),
	)

	return DrugMechanisms(queryMods...)
}

// RecordDrugWarnings retrieves all the drug_warning's DrugWarnings with an executor via record_id column.
func (o *CompoundRecord) RecordDrugWarnings(mods ...qm.QueryMod) drugWarningQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_warning\".\"record_id\"=?", o.RecordID),
	)

	return DrugWarnings(queryMods...)
}

// RecordFormulations retrieves all the formulation's Formulations with an executor via record_id column.
func (o *CompoundRecord) RecordFormulations(mods ...qm.QueryMod) formulationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"formulations\".\"record_id\"=?", o.RecordID),
	)

	return Formulations(queryMods...)
}

// SubstrateRecordMetabolisms retrieves all the metabolism's Metabolisms with an executor via substrate_record_id column.
func (o *CompoundRecord) SubstrateRecordMetabolisms(mods ...qm.QueryMod) metabolismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"metabolism\".\"substrate_record_id\"=?", o.RecordID),
	)

	return Metabolisms(queryMods...)
}

// MetaboliteRecordMetabolisms retrieves all the metabolism's Metabolisms with an executor via metabolite_record_id column.
func (o *CompoundRecord) MetaboliteRecordMetabolisms(mods ...qm.QueryMod) metabolismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"metabolism\".\"metabolite_record_id\"=?", o.RecordID),
	)

	return Metabolisms(queryMods...)
}

// DrugRecordMetabolisms retrieves all the metabolism's Metabolisms with an executor via drug_record_id column.
func (o *CompoundRecord) DrugRecordMetabolisms(mods ...qm.QueryMod) metabolismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"metabolism\".\"drug_record_id\"=?", o.RecordID),
	)

	return Metabolisms(queryMods...)
}

// LoadSRC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundRecordL) LoadSRC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.SRCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.SRCID {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`source`),
		qm.WhereIn(`source.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Source")
	}

	var resultSlice []*Source
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Source")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for source")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for source")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SRC = foreign
		if foreign.R == nil {
			foreign.R = &sourceR{}
		}
		foreign.R.SRCCompoundRecords = append(foreign.R.SRCCompoundRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRCID == foreign.SRCID {
				local.R.SRC = foreign
				if foreign.R == nil {
					foreign.R = &sourceR{}
				}
				foreign.R.SRCCompoundRecords = append(foreign.R.SRCCompoundRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundRecordL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		if !queries.IsNil(object.Molregno) {
			args = append(args, object.Molregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Molregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Molregno) {
				args = append(args, obj.Molregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoCompoundRecords = append(foreign.R.MolregnoCompoundRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Molregno, foreign.Molregno) {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoCompoundRecords = append(foreign.R.MolregnoCompoundRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadDoc allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundRecordL) LoadDoc(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.DocID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.DocID {
					continue Outer
				}
			}

			args = append(args, obj.DocID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`docs`),
		qm.WhereIn(`docs.doc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Doc")
	}

	var resultSlice []*Doc
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Doc")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for docs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for docs")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Doc = foreign
		if foreign.R == nil {
			foreign.R = &docR{}
		}
		foreign.R.CompoundRecords = append(foreign.R.CompoundRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DocID == foreign.DocID {
				local.R.Doc = foreign
				if foreign.R == nil {
					foreign.R = &docR{}
				}
				foreign.R.CompoundRecords = append(foreign.R.CompoundRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadRecordActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadRecordActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activities")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.RecordActivities = append(local.R.RecordActivities, foreign)
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadRecordDrugIndications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadRecordDrugIndications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_indication`),
		qm.WhereIn(`drug_indication.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_indication")
	}

	var resultSlice []*DrugIndication
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_indication")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_indication")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_indication")
	}

	if len(drugIndicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordDrugIndications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugIndicationR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.RecordDrugIndications = append(local.R.RecordDrugIndications, foreign)
				if foreign.R == nil {
					foreign.R = &drugIndicationR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadRecordDrugMechanisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadRecordDrugMechanisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_mechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_mechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordDrugMechanisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugMechanismR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.RecordDrugMechanisms = append(local.R.RecordDrugMechanisms, foreign)
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadRecordDrugWarnings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadRecordDrugWarnings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecordID) {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_warning`),
		qm.WhereIn(`drug_warning.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_warning")
	}

	var resultSlice []*DrugWarning
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_warning")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_warning")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_warning")
	}

	if len(drugWarningAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordDrugWarnings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugWarningR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.RecordID, foreign.RecordID) {
				local.R.RecordDrugWarnings = append(local.R.RecordDrugWarnings, foreign)
				if foreign.R == nil {
					foreign.R = &drugWarningR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadRecordFormulations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadRecordFormulations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`formulations`),
		qm.WhereIn(`formulations.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load formulations")
	}

	var resultSlice []*Formulation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice formulations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on formulations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for formulations")
	}

	if len(formulationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecordFormulations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &formulationR{}
			}
			foreign.R.Record = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RecordID == foreign.RecordID {
				local.R.RecordFormulations = append(local.R.RecordFormulations, foreign)
				if foreign.R == nil {
					foreign.R = &formulationR{}
				}
				foreign.R.Record = local
				break
			}
		}
	}

	return nil
}

// LoadSubstrateRecordMetabolisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadSubstrateRecordMetabolisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecordID) {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism`),
		qm.WhereIn(`metabolism.substrate_record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metabolism")
	}

	var resultSlice []*Metabolism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice metabolism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on metabolism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SubstrateRecordMetabolisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metabolismR{}
			}
			foreign.R.SubstrateRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.RecordID, foreign.SubstrateRecordID) {
				local.R.SubstrateRecordMetabolisms = append(local.R.SubstrateRecordMetabolisms, foreign)
				if foreign.R == nil {
					foreign.R = &metabolismR{}
				}
				foreign.R.SubstrateRecord = local
				break
			}
		}
	}

	return nil
}

// LoadMetaboliteRecordMetabolisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadMetaboliteRecordMetabolisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecordID) {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism`),
		qm.WhereIn(`metabolism.metabolite_record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metabolism")
	}

	var resultSlice []*Metabolism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice metabolism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on metabolism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MetaboliteRecordMetabolisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metabolismR{}
			}
			foreign.R.MetaboliteRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.RecordID, foreign.MetaboliteRecordID) {
				local.R.MetaboliteRecordMetabolisms = append(local.R.MetaboliteRecordMetabolisms, foreign)
				if foreign.R == nil {
					foreign.R = &metabolismR{}
				}
				foreign.R.MetaboliteRecord = local
				break
			}
		}
	}

	return nil
}

// LoadDrugRecordMetabolisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (compoundRecordL) LoadDrugRecordMetabolisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundRecord interface{}, mods queries.Applicator) error {
	var slice []*CompoundRecord
	var object *CompoundRecord

	if singular {
		object = maybeCompoundRecord.(*CompoundRecord)
	} else {
		slice = *maybeCompoundRecord.(*[]*CompoundRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundRecordR{}
		}
		args = append(args, object.RecordID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundRecordR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RecordID) {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism`),
		qm.WhereIn(`metabolism.drug_record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metabolism")
	}

	var resultSlice []*Metabolism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice metabolism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on metabolism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DrugRecordMetabolisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metabolismR{}
			}
			foreign.R.DrugRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.RecordID, foreign.DrugRecordID) {
				local.R.DrugRecordMetabolisms = append(local.R.DrugRecordMetabolisms, foreign)
				if foreign.R == nil {
					foreign.R = &metabolismR{}
				}
				foreign.R.DrugRecord = local
				break
			}
		}
	}

	return nil
}

// SetSRC of the compoundRecord to the related item.
// Sets o.R.SRC to related.
// Adds o to related.R.SRCCompoundRecords.
func (o *CompoundRecord) SetSRC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Source) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
		strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.SRCID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRCID = related.SRCID
	if o.R == nil {
		o.R = &compoundRecordR{
			SRC: related,
		}
	} else {
		o.R.SRC = related
	}

	if related.R == nil {
		related.R = &sourceR{
			SRCCompoundRecords: CompoundRecordSlice{o},
		}
	} else {
		related.R.SRCCompoundRecords = append(related.R.SRCCompoundRecords, o)
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the compoundRecord to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoCompoundRecords.
func (o *CompoundRecord) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Molregno, related.Molregno)
	if o.R == nil {
		o.R = &compoundRecordR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoCompoundRecords: CompoundRecordSlice{o},
		}
	} else {
		related.R.MolregnoCompoundRecords = append(related.R.MolregnoCompoundRecords, o)
	}

	return nil
}

// RemoveMolregnoMoleculeDictionary relationship.
// Sets o.R.MolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CompoundRecord) RemoveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.Molregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MolregnoCompoundRecords {
		if queries.Equal(o.Molregno, ri.Molregno) {
			continue
		}

		ln := len(related.R.MolregnoCompoundRecords)
		if ln > 1 && i < ln-1 {
			related.R.MolregnoCompoundRecords[i] = related.R.MolregnoCompoundRecords[ln-1]
		}
		related.R.MolregnoCompoundRecords = related.R.MolregnoCompoundRecords[:ln-1]
		break
	}
	return nil
}

// SetDoc of the compoundRecord to the related item.
// Sets o.R.Doc to related.
// Adds o to related.R.CompoundRecords.
func (o *CompoundRecord) SetDoc(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Doc) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"doc_id"}),
		strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.DocID, o.RecordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DocID = related.DocID
	if o.R == nil {
		o.R = &compoundRecordR{
			Doc: related,
		}
	} else {
		o.R.Doc = related
	}

	if related.R == nil {
		related.R = &docR{
			CompoundRecords: CompoundRecordSlice{o},
		}
	} else {
		related.R.CompoundRecords = append(related.R.CompoundRecords, o)
	}

	return nil
}

// AddRecordActivities adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.RecordActivities.
// Sets related.R.Record appropriately.
func (o *CompoundRecord) AddRecordActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
				strmangle.WhereClause("\"", "\"", 0, activityPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.ActivityID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			RecordActivities: related,
		}
	} else {
		o.R.RecordActivities = append(o.R.RecordActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// AddRecordDrugIndications adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.RecordDrugIndications.
// Sets related.R.Record appropriately.
func (o *CompoundRecord) AddRecordDrugIndications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugIndication) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_indication\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
				strmangle.WhereClause("\"", "\"", 0, drugIndicationPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.DrugindID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			RecordDrugIndications: related,
		}
	} else {
		o.R.RecordDrugIndications = append(o.R.RecordDrugIndications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugIndicationR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// AddRecordDrugMechanisms adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.RecordDrugMechanisms.
// Sets related.R.Record appropriately.
func (o *CompoundRecord) AddRecordDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_mechanism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
				strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.MecID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			RecordDrugMechanisms: related,
		}
	} else {
		o.R.RecordDrugMechanisms = append(o.R.RecordDrugMechanisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugMechanismR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// AddRecordDrugWarnings adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.RecordDrugWarnings.
// Sets related.R.Record appropriately.
func (o *CompoundRecord) AddRecordDrugWarnings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugWarning) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RecordID, o.RecordID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_warning\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
				strmangle.WhereClause("\"", "\"", 0, drugWarningPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.WarningID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RecordID, o.RecordID)
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			RecordDrugWarnings: related,
		}
	} else {
		o.R.RecordDrugWarnings = append(o.R.RecordDrugWarnings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugWarningR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// SetRecordDrugWarnings removes all previously related items of the
// compound_record replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Record's RecordDrugWarnings accordingly.
// Replaces o.R.RecordDrugWarnings with related.
// Sets related.R.Record's RecordDrugWarnings accordingly.
func (o *CompoundRecord) SetRecordDrugWarnings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugWarning) error {
	query := "update \"drug_warning\" set \"record_id\" = null where \"record_id\" = ?"
	values := []interface{}{o.RecordID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecordDrugWarnings {
			queries.SetScanner(&rel.RecordID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Record = nil
		}
		o.R.RecordDrugWarnings = nil
	}

	return o.AddRecordDrugWarnings(ctx, exec, insert, related...)
}

// RemoveRecordDrugWarnings relationships from objects passed in.
// Removes related items from R.RecordDrugWarnings (uses pointer comparison, removal does not keep order)
// Sets related.R.Record.
func (o *CompoundRecord) RemoveRecordDrugWarnings(ctx context.Context, exec boil.ContextExecutor, related ...*DrugWarning) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RecordID, nil)
		if rel.R != nil {
			rel.R.Record = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("record_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecordDrugWarnings {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecordDrugWarnings)
			if ln > 1 && i < ln-1 {
				o.R.RecordDrugWarnings[i] = o.R.RecordDrugWarnings[ln-1]
			}
			o.R.RecordDrugWarnings = o.R.RecordDrugWarnings[:ln-1]
			break
		}
	}

	return nil
}

// AddRecordFormulations adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.RecordFormulations.
// Sets related.R.Record appropriately.
func (o *CompoundRecord) AddRecordFormulations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Formulation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecordID = o.RecordID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"formulations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
				strmangle.WhereClause("\"", "\"", 0, formulationPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.FormulationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecordID = o.RecordID
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			RecordFormulations: related,
		}
	} else {
		o.R.RecordFormulations = append(o.R.RecordFormulations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &formulationR{
				Record: o,
			}
		} else {
			rel.R.Record = o
		}
	}
	return nil
}

// AddSubstrateRecordMetabolisms adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.SubstrateRecordMetabolisms.
// Sets related.R.SubstrateRecord appropriately.
func (o *CompoundRecord) AddSubstrateRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SubstrateRecordID, o.RecordID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"metabolism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"substrate_record_id"}),
				strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.MetID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SubstrateRecordID, o.RecordID)
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			SubstrateRecordMetabolisms: related,
		}
	} else {
		o.R.SubstrateRecordMetabolisms = append(o.R.SubstrateRecordMetabolisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metabolismR{
				SubstrateRecord: o,
			}
		} else {
			rel.R.SubstrateRecord = o
		}
	}
	return nil
}

// SetSubstrateRecordMetabolisms removes all previously related items of the
// compound_record replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SubstrateRecord's SubstrateRecordMetabolisms accordingly.
// Replaces o.R.SubstrateRecordMetabolisms with related.
// Sets related.R.SubstrateRecord's SubstrateRecordMetabolisms accordingly.
func (o *CompoundRecord) SetSubstrateRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	query := "update \"metabolism\" set \"substrate_record_id\" = null where \"substrate_record_id\" = ?"
	values := []interface{}{o.RecordID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SubstrateRecordMetabolisms {
			queries.SetScanner(&rel.SubstrateRecordID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SubstrateRecord = nil
		}
		o.R.SubstrateRecordMetabolisms = nil
	}

	return o.AddSubstrateRecordMetabolisms(ctx, exec, insert, related...)
}

// RemoveSubstrateRecordMetabolisms relationships from objects passed in.
// Removes related items from R.SubstrateRecordMetabolisms (uses pointer comparison, removal does not keep order)
// Sets related.R.SubstrateRecord.
func (o *CompoundRecord) RemoveSubstrateRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, related ...*Metabolism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SubstrateRecordID, nil)
		if rel.R != nil {
			rel.R.SubstrateRecord = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("substrate_record_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SubstrateRecordMetabolisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.SubstrateRecordMetabolisms)
			if ln > 1 && i < ln-1 {
				o.R.SubstrateRecordMetabolisms[i] = o.R.SubstrateRecordMetabolisms[ln-1]
			}
			o.R.SubstrateRecordMetabolisms = o.R.SubstrateRecordMetabolisms[:ln-1]
			break
		}
	}

	return nil
}

// AddMetaboliteRecordMetabolisms adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.MetaboliteRecordMetabolisms.
// Sets related.R.MetaboliteRecord appropriately.
func (o *CompoundRecord) AddMetaboliteRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MetaboliteRecordID, o.RecordID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"metabolism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"metabolite_record_id"}),
				strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.MetID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MetaboliteRecordID, o.RecordID)
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			MetaboliteRecordMetabolisms: related,
		}
	} else {
		o.R.MetaboliteRecordMetabolisms = append(o.R.MetaboliteRecordMetabolisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metabolismR{
				MetaboliteRecord: o,
			}
		} else {
			rel.R.MetaboliteRecord = o
		}
	}
	return nil
}

// SetMetaboliteRecordMetabolisms removes all previously related items of the
// compound_record replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MetaboliteRecord's MetaboliteRecordMetabolisms accordingly.
// Replaces o.R.MetaboliteRecordMetabolisms with related.
// Sets related.R.MetaboliteRecord's MetaboliteRecordMetabolisms accordingly.
func (o *CompoundRecord) SetMetaboliteRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	query := "update \"metabolism\" set \"metabolite_record_id\" = null where \"metabolite_record_id\" = ?"
	values := []interface{}{o.RecordID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MetaboliteRecordMetabolisms {
			queries.SetScanner(&rel.MetaboliteRecordID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MetaboliteRecord = nil
		}
		o.R.MetaboliteRecordMetabolisms = nil
	}

	return o.AddMetaboliteRecordMetabolisms(ctx, exec, insert, related...)
}

// RemoveMetaboliteRecordMetabolisms relationships from objects passed in.
// Removes related items from R.MetaboliteRecordMetabolisms (uses pointer comparison, removal does not keep order)
// Sets related.R.MetaboliteRecord.
func (o *CompoundRecord) RemoveMetaboliteRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, related ...*Metabolism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MetaboliteRecordID, nil)
		if rel.R != nil {
			rel.R.MetaboliteRecord = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("metabolite_record_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MetaboliteRecordMetabolisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.MetaboliteRecordMetabolisms)
			if ln > 1 && i < ln-1 {
				o.R.MetaboliteRecordMetabolisms[i] = o.R.MetaboliteRecordMetabolisms[ln-1]
			}
			o.R.MetaboliteRecordMetabolisms = o.R.MetaboliteRecordMetabolisms[:ln-1]
			break
		}
	}

	return nil
}

// AddDrugRecordMetabolisms adds the given related objects to the existing relationships
// of the compound_record, optionally inserting them as new records.
// Appends related to o.R.DrugRecordMetabolisms.
// Sets related.R.DrugRecord appropriately.
func (o *CompoundRecord) AddDrugRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DrugRecordID, o.RecordID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"metabolism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"drug_record_id"}),
				strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
			)
			values := []interface{}{o.RecordID, rel.MetID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DrugRecordID, o.RecordID)
		}
	}

	if o.R == nil {
		o.R = &compoundRecordR{
			DrugRecordMetabolisms: related,
		}
	} else {
		o.R.DrugRecordMetabolisms = append(o.R.DrugRecordMetabolisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metabolismR{
				DrugRecord: o,
			}
		} else {
			rel.R.DrugRecord = o
		}
	}
	return nil
}

// SetDrugRecordMetabolisms removes all previously related items of the
// compound_record replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DrugRecord's DrugRecordMetabolisms accordingly.
// Replaces o.R.DrugRecordMetabolisms with related.
// Sets related.R.DrugRecord's DrugRecordMetabolisms accordingly.
func (o *CompoundRecord) SetDrugRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metabolism) error {
	query := "update \"metabolism\" set \"drug_record_id\" = null where \"drug_record_id\" = ?"
	values := []interface{}{o.RecordID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DrugRecordMetabolisms {
			queries.SetScanner(&rel.DrugRecordID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DrugRecord = nil
		}
		o.R.DrugRecordMetabolisms = nil
	}

	return o.AddDrugRecordMetabolisms(ctx, exec, insert, related...)
}

// RemoveDrugRecordMetabolisms relationships from objects passed in.
// Removes related items from R.DrugRecordMetabolisms (uses pointer comparison, removal does not keep order)
// Sets related.R.DrugRecord.
func (o *CompoundRecord) RemoveDrugRecordMetabolisms(ctx context.Context, exec boil.ContextExecutor, related ...*Metabolism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DrugRecordID, nil)
		if rel.R != nil {
			rel.R.DrugRecord = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("drug_record_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DrugRecordMetabolisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.DrugRecordMetabolisms)
			if ln > 1 && i < ln-1 {
				o.R.DrugRecordMetabolisms[i] = o.R.DrugRecordMetabolisms[ln-1]
			}
			o.R.DrugRecordMetabolisms = o.R.DrugRecordMetabolisms[:ln-1]
			break
		}
	}

	return nil
}

// CompoundRecords retrieves all the records using an executor.
func CompoundRecords(mods ...qm.QueryMod) compoundRecordQuery {
	mods = append(mods, qm.From("\"compound_records\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"compound_records\".*"})
	}

	return compoundRecordQuery{q}
}

// FindCompoundRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompoundRecord(ctx context.Context, exec boil.ContextExecutor, recordID int64, selectCols ...string) (*CompoundRecord, error) {
	compoundRecordObj := &CompoundRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"compound_records\" where \"record_id\"=?", sel,
	)

	q := queries.Raw(query, recordID)

	err := q.Bind(ctx, exec, compoundRecordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from compound_records")
	}

	if err = compoundRecordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return compoundRecordObj, err
	}

	return compoundRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompoundRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound_records provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	compoundRecordInsertCacheMut.RLock()
	cache, cached := compoundRecordInsertCache[key]
	compoundRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			compoundRecordAllColumns,
			compoundRecordColumnsWithDefault,
			compoundRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(compoundRecordType, compoundRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(compoundRecordType, compoundRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"compound_records\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"compound_records\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into compound_records")
	}

	if !cached {
		compoundRecordInsertCacheMut.Lock()
		compoundRecordInsertCache[key] = cache
		compoundRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompoundRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompoundRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	compoundRecordUpdateCacheMut.RLock()
	cache, cached := compoundRecordUpdateCache[key]
	compoundRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			compoundRecordAllColumns,
			compoundRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update compound_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"compound_records\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(compoundRecordType, compoundRecordMapping, append(wl, compoundRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update compound_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for compound_records")
	}

	if !cached {
		compoundRecordUpdateCacheMut.Lock()
		compoundRecordUpdateCache[key] = cache
		compoundRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q compoundRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for compound_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for compound_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompoundRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"compound_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in compoundRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all compoundRecord")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompoundRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound_records provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundRecordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	compoundRecordUpsertCacheMut.RLock()
	cache, cached := compoundRecordUpsertCache[key]
	compoundRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			compoundRecordAllColumns,
			compoundRecordColumnsWithDefault,
			compoundRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			compoundRecordAllColumns,
			compoundRecordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert compound_records, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(compoundRecordPrimaryKeyColumns))
			copy(conflict, compoundRecordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"compound_records\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(compoundRecordType, compoundRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(compoundRecordType, compoundRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert compound_records")
	}

	if !cached {
		compoundRecordUpsertCacheMut.Lock()
		compoundRecordUpsertCache[key] = cache
		compoundRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompoundRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompoundRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompoundRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), compoundRecordPrimaryKeyMapping)
	sql := "DELETE FROM \"compound_records\" WHERE \"record_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from compound_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for compound_records")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q compoundRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no compoundRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compound_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompoundRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(compoundRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"compound_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compoundRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound_records")
	}

	if len(compoundRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompoundRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompoundRecord(ctx, exec, o.RecordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompoundRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompoundRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"compound_records\".* FROM \"compound_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompoundRecordSlice")
	}

	*o = slice

	return nil
}

// CompoundRecordExists checks if the CompoundRecord row exists.
func CompoundRecordExists(ctx context.Context, exec boil.ContextExecutor, recordID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"compound_records\" where \"record_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, recordID)
	}
	row := exec.QueryRowContext(ctx, sql, recordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if compound_records exists")
	}

	return exists, nil
}
