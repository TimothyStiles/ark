// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ActionType is an object representing the database table.
type ActionType struct {
	ActionType  string      `boil:"action_type" json:"action_type" toml:"action_type" yaml:"action_type"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	ParentType  null.String `boil:"parent_type" json:"parent_type,omitempty" toml:"parent_type" yaml:"parent_type,omitempty"`

	R *actionTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actionTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActionTypeColumns = struct {
	ActionType  string
	Description string
	ParentType  string
}{
	ActionType:  "action_type",
	Description: "description",
	ParentType:  "parent_type",
}

var ActionTypeTableColumns = struct {
	ActionType  string
	Description string
	ParentType  string
}{
	ActionType:  "action_type.action_type",
	Description: "action_type.description",
	ParentType:  "action_type.parent_type",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ActionTypeWhere = struct {
	ActionType  whereHelperstring
	Description whereHelperstring
	ParentType  whereHelpernull_String
}{
	ActionType:  whereHelperstring{field: "\"action_type\".\"action_type\""},
	Description: whereHelperstring{field: "\"action_type\".\"description\""},
	ParentType:  whereHelpernull_String{field: "\"action_type\".\"parent_type\""},
}

// ActionTypeRels is where relationship names are stored.
var ActionTypeRels = struct {
	DrugMechanisms string
}{
	DrugMechanisms: "DrugMechanisms",
}

// actionTypeR is where relationships are stored.
type actionTypeR struct {
	DrugMechanisms DrugMechanismSlice `boil:"DrugMechanisms" json:"DrugMechanisms" toml:"DrugMechanisms" yaml:"DrugMechanisms"`
}

// NewStruct creates a new relationship struct
func (*actionTypeR) NewStruct() *actionTypeR {
	return &actionTypeR{}
}

func (r *actionTypeR) GetDrugMechanisms() DrugMechanismSlice {
	if r == nil {
		return nil
	}
	return r.DrugMechanisms
}

// actionTypeL is where Load methods for each relationship are stored.
type actionTypeL struct{}

var (
	actionTypeAllColumns            = []string{"action_type", "description", "parent_type"}
	actionTypeColumnsWithoutDefault = []string{"action_type", "description"}
	actionTypeColumnsWithDefault    = []string{"parent_type"}
	actionTypePrimaryKeyColumns     = []string{"action_type"}
	actionTypeGeneratedColumns      = []string{}
)

type (
	// ActionTypeSlice is an alias for a slice of pointers to ActionType.
	// This should almost always be used instead of []ActionType.
	ActionTypeSlice []*ActionType
	// ActionTypeHook is the signature for custom ActionType hook methods
	ActionTypeHook func(context.Context, boil.ContextExecutor, *ActionType) error

	actionTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actionTypeType                 = reflect.TypeOf(&ActionType{})
	actionTypeMapping              = queries.MakeStructMapping(actionTypeType)
	actionTypePrimaryKeyMapping, _ = queries.BindMapping(actionTypeType, actionTypeMapping, actionTypePrimaryKeyColumns)
	actionTypeInsertCacheMut       sync.RWMutex
	actionTypeInsertCache          = make(map[string]insertCache)
	actionTypeUpdateCacheMut       sync.RWMutex
	actionTypeUpdateCache          = make(map[string]updateCache)
	actionTypeUpsertCacheMut       sync.RWMutex
	actionTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var actionTypeAfterSelectHooks []ActionTypeHook

var actionTypeBeforeInsertHooks []ActionTypeHook
var actionTypeAfterInsertHooks []ActionTypeHook

var actionTypeBeforeUpdateHooks []ActionTypeHook
var actionTypeAfterUpdateHooks []ActionTypeHook

var actionTypeBeforeDeleteHooks []ActionTypeHook
var actionTypeAfterDeleteHooks []ActionTypeHook

var actionTypeBeforeUpsertHooks []ActionTypeHook
var actionTypeAfterUpsertHooks []ActionTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActionType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActionType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActionType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActionType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActionType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActionType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActionType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActionType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActionType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActionTypeHook registers your hook function for all future operations.
func AddActionTypeHook(hookPoint boil.HookPoint, actionTypeHook ActionTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		actionTypeAfterSelectHooks = append(actionTypeAfterSelectHooks, actionTypeHook)
	case boil.BeforeInsertHook:
		actionTypeBeforeInsertHooks = append(actionTypeBeforeInsertHooks, actionTypeHook)
	case boil.AfterInsertHook:
		actionTypeAfterInsertHooks = append(actionTypeAfterInsertHooks, actionTypeHook)
	case boil.BeforeUpdateHook:
		actionTypeBeforeUpdateHooks = append(actionTypeBeforeUpdateHooks, actionTypeHook)
	case boil.AfterUpdateHook:
		actionTypeAfterUpdateHooks = append(actionTypeAfterUpdateHooks, actionTypeHook)
	case boil.BeforeDeleteHook:
		actionTypeBeforeDeleteHooks = append(actionTypeBeforeDeleteHooks, actionTypeHook)
	case boil.AfterDeleteHook:
		actionTypeAfterDeleteHooks = append(actionTypeAfterDeleteHooks, actionTypeHook)
	case boil.BeforeUpsertHook:
		actionTypeBeforeUpsertHooks = append(actionTypeBeforeUpsertHooks, actionTypeHook)
	case boil.AfterUpsertHook:
		actionTypeAfterUpsertHooks = append(actionTypeAfterUpsertHooks, actionTypeHook)
	}
}

// One returns a single actionType record from the query.
func (q actionTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActionType, error) {
	o := &ActionType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for action_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActionType records from the query.
func (q actionTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActionTypeSlice, error) {
	var o []*ActionType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActionType slice")
	}

	if len(actionTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActionType records in the query.
func (q actionTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count action_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actionTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if action_type exists")
	}

	return count > 0, nil
}

// DrugMechanisms retrieves all the drug_mechanism's DrugMechanisms with an executor.
func (o *ActionType) DrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_mechanism\".\"action_type\"=?", o.ActionType),
	)

	return DrugMechanisms(queryMods...)
}

// LoadDrugMechanisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (actionTypeL) LoadDrugMechanisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionType interface{}, mods queries.Applicator) error {
	var slice []*ActionType
	var object *ActionType

	if singular {
		object = maybeActionType.(*ActionType)
	} else {
		slice = *maybeActionType.(*[]*ActionType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionTypeR{}
		}
		args = append(args, object.ActionType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ActionType) {
					continue Outer
				}
			}

			args = append(args, obj.ActionType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.action_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_mechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_mechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DrugMechanisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugMechanismR{}
			}
			foreign.R.DrugMechanismActionType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ActionType, foreign.ActionType) {
				local.R.DrugMechanisms = append(local.R.DrugMechanisms, foreign)
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.DrugMechanismActionType = local
				break
			}
		}
	}

	return nil
}

// AddDrugMechanisms adds the given related objects to the existing relationships
// of the action_type, optionally inserting them as new records.
// Appends related to o.R.DrugMechanisms.
// Sets related.R.DrugMechanismActionType appropriately.
func (o *ActionType) AddDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ActionType, o.ActionType)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_mechanism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"action_type"}),
				strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
			)
			values := []interface{}{o.ActionType, rel.MecID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ActionType, o.ActionType)
		}
	}

	if o.R == nil {
		o.R = &actionTypeR{
			DrugMechanisms: related,
		}
	} else {
		o.R.DrugMechanisms = append(o.R.DrugMechanisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugMechanismR{
				DrugMechanismActionType: o,
			}
		} else {
			rel.R.DrugMechanismActionType = o
		}
	}
	return nil
}

// SetDrugMechanisms removes all previously related items of the
// action_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DrugMechanismActionType's DrugMechanisms accordingly.
// Replaces o.R.DrugMechanisms with related.
// Sets related.R.DrugMechanismActionType's DrugMechanisms accordingly.
func (o *ActionType) SetDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	query := "update \"drug_mechanism\" set \"action_type\" = null where \"action_type\" = ?"
	values := []interface{}{o.ActionType}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DrugMechanisms {
			queries.SetScanner(&rel.ActionType, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DrugMechanismActionType = nil
		}
		o.R.DrugMechanisms = nil
	}

	return o.AddDrugMechanisms(ctx, exec, insert, related...)
}

// RemoveDrugMechanisms relationships from objects passed in.
// Removes related items from R.DrugMechanisms (uses pointer comparison, removal does not keep order)
// Sets related.R.DrugMechanismActionType.
func (o *ActionType) RemoveDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, related ...*DrugMechanism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ActionType, nil)
		if rel.R != nil {
			rel.R.DrugMechanismActionType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("action_type")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DrugMechanisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.DrugMechanisms)
			if ln > 1 && i < ln-1 {
				o.R.DrugMechanisms[i] = o.R.DrugMechanisms[ln-1]
			}
			o.R.DrugMechanisms = o.R.DrugMechanisms[:ln-1]
			break
		}
	}

	return nil
}

// ActionTypes retrieves all the records using an executor.
func ActionTypes(mods ...qm.QueryMod) actionTypeQuery {
	mods = append(mods, qm.From("\"action_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"action_type\".*"})
	}

	return actionTypeQuery{q}
}

// FindActionType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActionType(ctx context.Context, exec boil.ContextExecutor, actionType string, selectCols ...string) (*ActionType, error) {
	actionTypeObj := &ActionType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"action_type\" where \"action_type\"=?", sel,
	)

	q := queries.Raw(query, actionType)

	err := q.Bind(ctx, exec, actionTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from action_type")
	}

	if err = actionTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return actionTypeObj, err
	}

	return actionTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActionType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no action_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	actionTypeInsertCacheMut.RLock()
	cache, cached := actionTypeInsertCache[key]
	actionTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			actionTypeAllColumns,
			actionTypeColumnsWithDefault,
			actionTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(actionTypeType, actionTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actionTypeType, actionTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"action_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"action_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into action_type")
	}

	if !cached {
		actionTypeInsertCacheMut.Lock()
		actionTypeInsertCache[key] = cache
		actionTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActionType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActionType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	actionTypeUpdateCacheMut.RLock()
	cache, cached := actionTypeUpdateCache[key]
	actionTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			actionTypeAllColumns,
			actionTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update action_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"action_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, actionTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actionTypeType, actionTypeMapping, append(wl, actionTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update action_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for action_type")
	}

	if !cached {
		actionTypeUpdateCacheMut.Lock()
		actionTypeUpdateCache[key] = cache
		actionTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q actionTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for action_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for action_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActionTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"action_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actionTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in actionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all actionType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActionType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no action_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actionTypeUpsertCacheMut.RLock()
	cache, cached := actionTypeUpsertCache[key]
	actionTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			actionTypeAllColumns,
			actionTypeColumnsWithDefault,
			actionTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			actionTypeAllColumns,
			actionTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert action_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(actionTypePrimaryKeyColumns))
			copy(conflict, actionTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"action_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(actionTypeType, actionTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actionTypeType, actionTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert action_type")
	}

	if !cached {
		actionTypeUpsertCacheMut.Lock()
		actionTypeUpsertCache[key] = cache
		actionTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActionType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActionType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActionType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actionTypePrimaryKeyMapping)
	sql := "DELETE FROM \"action_type\" WHERE \"action_type\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from action_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for action_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q actionTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no actionTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from action_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for action_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActionTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(actionTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"action_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actionTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from actionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for action_type")
	}

	if len(actionTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActionType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActionType(ctx, exec, o.ActionType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActionTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActionTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"action_type\".* FROM \"action_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, actionTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActionTypeSlice")
	}

	*o = slice

	return nil
}

// ActionTypeExists checks if the ActionType row exists.
func ActionTypeExists(ctx context.Context, exec boil.ContextExecutor, actionType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"action_type\" where \"action_type\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, actionType)
	}
	row := exec.QueryRowContext(ctx, sql, actionType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if action_type exists")
	}

	return exists, nil
}
