// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProteinClassSynonym is an object representing the database table.
type ProteinClassSynonym struct {
	ProtclasssynID      int64       `boil:"protclasssyn_id" json:"protclasssyn_id" toml:"protclasssyn_id" yaml:"protclasssyn_id"`
	ProteinClassID      int64       `boil:"protein_class_id" json:"protein_class_id" toml:"protein_class_id" yaml:"protein_class_id"`
	ProteinClassSynonym null.String `boil:"protein_class_synonym" json:"protein_class_synonym,omitempty" toml:"protein_class_synonym" yaml:"protein_class_synonym,omitempty"`
	SynType             null.String `boil:"syn_type" json:"syn_type,omitempty" toml:"syn_type" yaml:"syn_type,omitempty"`

	R *proteinClassSynonymR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L proteinClassSynonymL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProteinClassSynonymColumns = struct {
	ProtclasssynID      string
	ProteinClassID      string
	ProteinClassSynonym string
	SynType             string
}{
	ProtclasssynID:      "protclasssyn_id",
	ProteinClassID:      "protein_class_id",
	ProteinClassSynonym: "protein_class_synonym",
	SynType:             "syn_type",
}

var ProteinClassSynonymTableColumns = struct {
	ProtclasssynID      string
	ProteinClassID      string
	ProteinClassSynonym string
	SynType             string
}{
	ProtclasssynID:      "protein_class_synonyms.protclasssyn_id",
	ProteinClassID:      "protein_class_synonyms.protein_class_id",
	ProteinClassSynonym: "protein_class_synonyms.protein_class_synonym",
	SynType:             "protein_class_synonyms.syn_type",
}

// Generated where

var ProteinClassSynonymWhere = struct {
	ProtclasssynID      whereHelperint64
	ProteinClassID      whereHelperint64
	ProteinClassSynonym whereHelpernull_String
	SynType             whereHelpernull_String
}{
	ProtclasssynID:      whereHelperint64{field: "\"protein_class_synonyms\".\"protclasssyn_id\""},
	ProteinClassID:      whereHelperint64{field: "\"protein_class_synonyms\".\"protein_class_id\""},
	ProteinClassSynonym: whereHelpernull_String{field: "\"protein_class_synonyms\".\"protein_class_synonym\""},
	SynType:             whereHelpernull_String{field: "\"protein_class_synonyms\".\"syn_type\""},
}

// ProteinClassSynonymRels is where relationship names are stored.
var ProteinClassSynonymRels = struct {
	ProteinClass string
}{
	ProteinClass: "ProteinClass",
}

// proteinClassSynonymR is where relationships are stored.
type proteinClassSynonymR struct {
	ProteinClass *ProteinClassification `boil:"ProteinClass" json:"ProteinClass" toml:"ProteinClass" yaml:"ProteinClass"`
}

// NewStruct creates a new relationship struct
func (*proteinClassSynonymR) NewStruct() *proteinClassSynonymR {
	return &proteinClassSynonymR{}
}

func (r *proteinClassSynonymR) GetProteinClass() *ProteinClassification {
	if r == nil {
		return nil
	}
	return r.ProteinClass
}

// proteinClassSynonymL is where Load methods for each relationship are stored.
type proteinClassSynonymL struct{}

var (
	proteinClassSynonymAllColumns            = []string{"protclasssyn_id", "protein_class_id", "protein_class_synonym", "syn_type"}
	proteinClassSynonymColumnsWithoutDefault = []string{"protclasssyn_id", "protein_class_id"}
	proteinClassSynonymColumnsWithDefault    = []string{"protein_class_synonym", "syn_type"}
	proteinClassSynonymPrimaryKeyColumns     = []string{"protclasssyn_id"}
	proteinClassSynonymGeneratedColumns      = []string{}
)

type (
	// ProteinClassSynonymSlice is an alias for a slice of pointers to ProteinClassSynonym.
	// This should almost always be used instead of []ProteinClassSynonym.
	ProteinClassSynonymSlice []*ProteinClassSynonym
	// ProteinClassSynonymHook is the signature for custom ProteinClassSynonym hook methods
	ProteinClassSynonymHook func(context.Context, boil.ContextExecutor, *ProteinClassSynonym) error

	proteinClassSynonymQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	proteinClassSynonymType                 = reflect.TypeOf(&ProteinClassSynonym{})
	proteinClassSynonymMapping              = queries.MakeStructMapping(proteinClassSynonymType)
	proteinClassSynonymPrimaryKeyMapping, _ = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, proteinClassSynonymPrimaryKeyColumns)
	proteinClassSynonymInsertCacheMut       sync.RWMutex
	proteinClassSynonymInsertCache          = make(map[string]insertCache)
	proteinClassSynonymUpdateCacheMut       sync.RWMutex
	proteinClassSynonymUpdateCache          = make(map[string]updateCache)
	proteinClassSynonymUpsertCacheMut       sync.RWMutex
	proteinClassSynonymUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var proteinClassSynonymAfterSelectHooks []ProteinClassSynonymHook

var proteinClassSynonymBeforeInsertHooks []ProteinClassSynonymHook
var proteinClassSynonymAfterInsertHooks []ProteinClassSynonymHook

var proteinClassSynonymBeforeUpdateHooks []ProteinClassSynonymHook
var proteinClassSynonymAfterUpdateHooks []ProteinClassSynonymHook

var proteinClassSynonymBeforeDeleteHooks []ProteinClassSynonymHook
var proteinClassSynonymAfterDeleteHooks []ProteinClassSynonymHook

var proteinClassSynonymBeforeUpsertHooks []ProteinClassSynonymHook
var proteinClassSynonymAfterUpsertHooks []ProteinClassSynonymHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProteinClassSynonym) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProteinClassSynonym) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProteinClassSynonym) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProteinClassSynonym) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProteinClassSynonym) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProteinClassSynonym) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProteinClassSynonym) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProteinClassSynonym) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProteinClassSynonym) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range proteinClassSynonymAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProteinClassSynonymHook registers your hook function for all future operations.
func AddProteinClassSynonymHook(hookPoint boil.HookPoint, proteinClassSynonymHook ProteinClassSynonymHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		proteinClassSynonymAfterSelectHooks = append(proteinClassSynonymAfterSelectHooks, proteinClassSynonymHook)
	case boil.BeforeInsertHook:
		proteinClassSynonymBeforeInsertHooks = append(proteinClassSynonymBeforeInsertHooks, proteinClassSynonymHook)
	case boil.AfterInsertHook:
		proteinClassSynonymAfterInsertHooks = append(proteinClassSynonymAfterInsertHooks, proteinClassSynonymHook)
	case boil.BeforeUpdateHook:
		proteinClassSynonymBeforeUpdateHooks = append(proteinClassSynonymBeforeUpdateHooks, proteinClassSynonymHook)
	case boil.AfterUpdateHook:
		proteinClassSynonymAfterUpdateHooks = append(proteinClassSynonymAfterUpdateHooks, proteinClassSynonymHook)
	case boil.BeforeDeleteHook:
		proteinClassSynonymBeforeDeleteHooks = append(proteinClassSynonymBeforeDeleteHooks, proteinClassSynonymHook)
	case boil.AfterDeleteHook:
		proteinClassSynonymAfterDeleteHooks = append(proteinClassSynonymAfterDeleteHooks, proteinClassSynonymHook)
	case boil.BeforeUpsertHook:
		proteinClassSynonymBeforeUpsertHooks = append(proteinClassSynonymBeforeUpsertHooks, proteinClassSynonymHook)
	case boil.AfterUpsertHook:
		proteinClassSynonymAfterUpsertHooks = append(proteinClassSynonymAfterUpsertHooks, proteinClassSynonymHook)
	}
}

// One returns a single proteinClassSynonym record from the query.
func (q proteinClassSynonymQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProteinClassSynonym, error) {
	o := &ProteinClassSynonym{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for protein_class_synonyms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProteinClassSynonym records from the query.
func (q proteinClassSynonymQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProteinClassSynonymSlice, error) {
	var o []*ProteinClassSynonym

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProteinClassSynonym slice")
	}

	if len(proteinClassSynonymAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProteinClassSynonym records in the query.
func (q proteinClassSynonymQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count protein_class_synonyms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q proteinClassSynonymQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if protein_class_synonyms exists")
	}

	return count > 0, nil
}

// ProteinClass pointed to by the foreign key.
func (o *ProteinClassSynonym) ProteinClass(mods ...qm.QueryMod) proteinClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"protein_class_id\" = ?", o.ProteinClassID),
	}

	queryMods = append(queryMods, mods...)

	return ProteinClassifications(queryMods...)
}

// LoadProteinClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (proteinClassSynonymL) LoadProteinClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProteinClassSynonym interface{}, mods queries.Applicator) error {
	var slice []*ProteinClassSynonym
	var object *ProteinClassSynonym

	if singular {
		object = maybeProteinClassSynonym.(*ProteinClassSynonym)
	} else {
		slice = *maybeProteinClassSynonym.(*[]*ProteinClassSynonym)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &proteinClassSynonymR{}
		}
		args = append(args, object.ProteinClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &proteinClassSynonymR{}
			}

			for _, a := range args {
				if a == obj.ProteinClassID {
					continue Outer
				}
			}

			args = append(args, obj.ProteinClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`protein_classification`),
		qm.WhereIn(`protein_classification.protein_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProteinClassification")
	}

	var resultSlice []*ProteinClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProteinClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for protein_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for protein_classification")
	}

	if len(proteinClassSynonymAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProteinClass = foreign
		if foreign.R == nil {
			foreign.R = &proteinClassificationR{}
		}
		foreign.R.ProteinClassProteinClassSynonyms = append(foreign.R.ProteinClassProteinClassSynonyms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProteinClassID == foreign.ProteinClassID {
				local.R.ProteinClass = foreign
				if foreign.R == nil {
					foreign.R = &proteinClassificationR{}
				}
				foreign.R.ProteinClassProteinClassSynonyms = append(foreign.R.ProteinClassProteinClassSynonyms, local)
				break
			}
		}
	}

	return nil
}

// SetProteinClass of the proteinClassSynonym to the related item.
// Sets o.R.ProteinClass to related.
// Adds o to related.R.ProteinClassProteinClassSynonyms.
func (o *ProteinClassSynonym) SetProteinClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProteinClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"protein_class_synonyms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"protein_class_id"}),
		strmangle.WhereClause("\"", "\"", 0, proteinClassSynonymPrimaryKeyColumns),
	)
	values := []interface{}{related.ProteinClassID, o.ProtclasssynID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProteinClassID = related.ProteinClassID
	if o.R == nil {
		o.R = &proteinClassSynonymR{
			ProteinClass: related,
		}
	} else {
		o.R.ProteinClass = related
	}

	if related.R == nil {
		related.R = &proteinClassificationR{
			ProteinClassProteinClassSynonyms: ProteinClassSynonymSlice{o},
		}
	} else {
		related.R.ProteinClassProteinClassSynonyms = append(related.R.ProteinClassProteinClassSynonyms, o)
	}

	return nil
}

// ProteinClassSynonyms retrieves all the records using an executor.
func ProteinClassSynonyms(mods ...qm.QueryMod) proteinClassSynonymQuery {
	mods = append(mods, qm.From("\"protein_class_synonyms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"protein_class_synonyms\".*"})
	}

	return proteinClassSynonymQuery{q}
}

// FindProteinClassSynonym retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProteinClassSynonym(ctx context.Context, exec boil.ContextExecutor, protclasssynID int64, selectCols ...string) (*ProteinClassSynonym, error) {
	proteinClassSynonymObj := &ProteinClassSynonym{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"protein_class_synonyms\" where \"protclasssyn_id\"=?", sel,
	)

	q := queries.Raw(query, protclasssynID)

	err := q.Bind(ctx, exec, proteinClassSynonymObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from protein_class_synonyms")
	}

	if err = proteinClassSynonymObj.doAfterSelectHooks(ctx, exec); err != nil {
		return proteinClassSynonymObj, err
	}

	return proteinClassSynonymObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProteinClassSynonym) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_class_synonyms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinClassSynonymColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	proteinClassSynonymInsertCacheMut.RLock()
	cache, cached := proteinClassSynonymInsertCache[key]
	proteinClassSynonymInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			proteinClassSynonymAllColumns,
			proteinClassSynonymColumnsWithDefault,
			proteinClassSynonymColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"protein_class_synonyms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"protein_class_synonyms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into protein_class_synonyms")
	}

	if !cached {
		proteinClassSynonymInsertCacheMut.Lock()
		proteinClassSynonymInsertCache[key] = cache
		proteinClassSynonymInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProteinClassSynonym.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProteinClassSynonym) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	proteinClassSynonymUpdateCacheMut.RLock()
	cache, cached := proteinClassSynonymUpdateCache[key]
	proteinClassSynonymUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			proteinClassSynonymAllColumns,
			proteinClassSynonymPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update protein_class_synonyms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"protein_class_synonyms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, proteinClassSynonymPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, append(wl, proteinClassSynonymPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update protein_class_synonyms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for protein_class_synonyms")
	}

	if !cached {
		proteinClassSynonymUpdateCacheMut.Lock()
		proteinClassSynonymUpdateCache[key] = cache
		proteinClassSynonymUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q proteinClassSynonymQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for protein_class_synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for protein_class_synonyms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProteinClassSynonymSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassSynonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"protein_class_synonyms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassSynonymPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in proteinClassSynonym slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all proteinClassSynonym")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProteinClassSynonym) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protein_class_synonyms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(proteinClassSynonymColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	proteinClassSynonymUpsertCacheMut.RLock()
	cache, cached := proteinClassSynonymUpsertCache[key]
	proteinClassSynonymUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			proteinClassSynonymAllColumns,
			proteinClassSynonymColumnsWithDefault,
			proteinClassSynonymColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			proteinClassSynonymAllColumns,
			proteinClassSynonymPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert protein_class_synonyms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(proteinClassSynonymPrimaryKeyColumns))
			copy(conflict, proteinClassSynonymPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"protein_class_synonyms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(proteinClassSynonymType, proteinClassSynonymMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert protein_class_synonyms")
	}

	if !cached {
		proteinClassSynonymUpsertCacheMut.Lock()
		proteinClassSynonymUpsertCache[key] = cache
		proteinClassSynonymUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProteinClassSynonym record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProteinClassSynonym) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProteinClassSynonym provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), proteinClassSynonymPrimaryKeyMapping)
	sql := "DELETE FROM \"protein_class_synonyms\" WHERE \"protclasssyn_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from protein_class_synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for protein_class_synonyms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q proteinClassSynonymQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no proteinClassSynonymQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protein_class_synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_class_synonyms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProteinClassSynonymSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(proteinClassSynonymBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassSynonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"protein_class_synonyms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassSynonymPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proteinClassSynonym slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protein_class_synonyms")
	}

	if len(proteinClassSynonymAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProteinClassSynonym) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProteinClassSynonym(ctx, exec, o.ProtclasssynID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProteinClassSynonymSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProteinClassSynonymSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), proteinClassSynonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"protein_class_synonyms\".* FROM \"protein_class_synonyms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, proteinClassSynonymPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProteinClassSynonymSlice")
	}

	*o = slice

	return nil
}

// ProteinClassSynonymExists checks if the ProteinClassSynonym row exists.
func ProteinClassSynonymExists(ctx context.Context, exec boil.ContextExecutor, protclasssynID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"protein_class_synonyms\" where \"protclasssyn_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, protclasssynID)
	}
	row := exec.QueryRowContext(ctx, sql, protclasssynID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if protein_class_synonyms exists")
	}

	return exists, nil
}
