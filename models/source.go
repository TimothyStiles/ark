// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Source is an object representing the database table.
type Source struct {
	SRCID          int64       `boil:"src_id" json:"src_id" toml:"src_id" yaml:"src_id"`
	SRCDescription null.String `boil:"src_description" json:"src_description,omitempty" toml:"src_description" yaml:"src_description,omitempty"`
	SRCShortName   null.String `boil:"src_short_name" json:"src_short_name,omitempty" toml:"src_short_name" yaml:"src_short_name,omitempty"`

	R *sourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SourceColumns = struct {
	SRCID          string
	SRCDescription string
	SRCShortName   string
}{
	SRCID:          "src_id",
	SRCDescription: "src_description",
	SRCShortName:   "src_short_name",
}

var SourceTableColumns = struct {
	SRCID          string
	SRCDescription string
	SRCShortName   string
}{
	SRCID:          "source.src_id",
	SRCDescription: "source.src_description",
	SRCShortName:   "source.src_short_name",
}

// Generated where

var SourceWhere = struct {
	SRCID          whereHelperint64
	SRCDescription whereHelpernull_String
	SRCShortName   whereHelpernull_String
}{
	SRCID:          whereHelperint64{field: "\"source\".\"src_id\""},
	SRCDescription: whereHelpernull_String{field: "\"source\".\"src_description\""},
	SRCShortName:   whereHelpernull_String{field: "\"source\".\"src_short_name\""},
}

// SourceRels is where relationship names are stored.
var SourceRels = struct {
	SRCActivities      string
	SRCAssays          string
	SRCCompoundRecords string
	SRCDocs            string
}{
	SRCActivities:      "SRCActivities",
	SRCAssays:          "SRCAssays",
	SRCCompoundRecords: "SRCCompoundRecords",
	SRCDocs:            "SRCDocs",
}

// sourceR is where relationships are stored.
type sourceR struct {
	SRCActivities      ActivitySlice       `boil:"SRCActivities" json:"SRCActivities" toml:"SRCActivities" yaml:"SRCActivities"`
	SRCAssays          AssaySlice          `boil:"SRCAssays" json:"SRCAssays" toml:"SRCAssays" yaml:"SRCAssays"`
	SRCCompoundRecords CompoundRecordSlice `boil:"SRCCompoundRecords" json:"SRCCompoundRecords" toml:"SRCCompoundRecords" yaml:"SRCCompoundRecords"`
	SRCDocs            DocSlice            `boil:"SRCDocs" json:"SRCDocs" toml:"SRCDocs" yaml:"SRCDocs"`
}

// NewStruct creates a new relationship struct
func (*sourceR) NewStruct() *sourceR {
	return &sourceR{}
}

func (r *sourceR) GetSRCActivities() ActivitySlice {
	if r == nil {
		return nil
	}
	return r.SRCActivities
}

func (r *sourceR) GetSRCAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.SRCAssays
}

func (r *sourceR) GetSRCCompoundRecords() CompoundRecordSlice {
	if r == nil {
		return nil
	}
	return r.SRCCompoundRecords
}

func (r *sourceR) GetSRCDocs() DocSlice {
	if r == nil {
		return nil
	}
	return r.SRCDocs
}

// sourceL is where Load methods for each relationship are stored.
type sourceL struct{}

var (
	sourceAllColumns            = []string{"src_id", "src_description", "src_short_name"}
	sourceColumnsWithoutDefault = []string{}
	sourceColumnsWithDefault    = []string{"src_id", "src_description", "src_short_name"}
	sourcePrimaryKeyColumns     = []string{"src_id"}
	sourceGeneratedColumns      = []string{"src_id"}
)

type (
	// SourceSlice is an alias for a slice of pointers to Source.
	// This should almost always be used instead of []Source.
	SourceSlice []*Source
	// SourceHook is the signature for custom Source hook methods
	SourceHook func(context.Context, boil.ContextExecutor, *Source) error

	sourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sourceType                 = reflect.TypeOf(&Source{})
	sourceMapping              = queries.MakeStructMapping(sourceType)
	sourcePrimaryKeyMapping, _ = queries.BindMapping(sourceType, sourceMapping, sourcePrimaryKeyColumns)
	sourceInsertCacheMut       sync.RWMutex
	sourceInsertCache          = make(map[string]insertCache)
	sourceUpdateCacheMut       sync.RWMutex
	sourceUpdateCache          = make(map[string]updateCache)
	sourceUpsertCacheMut       sync.RWMutex
	sourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sourceAfterSelectHooks []SourceHook

var sourceBeforeInsertHooks []SourceHook
var sourceAfterInsertHooks []SourceHook

var sourceBeforeUpdateHooks []SourceHook
var sourceAfterUpdateHooks []SourceHook

var sourceBeforeDeleteHooks []SourceHook
var sourceAfterDeleteHooks []SourceHook

var sourceBeforeUpsertHooks []SourceHook
var sourceAfterUpsertHooks []SourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Source) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Source) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Source) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Source) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Source) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Source) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Source) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Source) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Source) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSourceHook registers your hook function for all future operations.
func AddSourceHook(hookPoint boil.HookPoint, sourceHook SourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sourceAfterSelectHooks = append(sourceAfterSelectHooks, sourceHook)
	case boil.BeforeInsertHook:
		sourceBeforeInsertHooks = append(sourceBeforeInsertHooks, sourceHook)
	case boil.AfterInsertHook:
		sourceAfterInsertHooks = append(sourceAfterInsertHooks, sourceHook)
	case boil.BeforeUpdateHook:
		sourceBeforeUpdateHooks = append(sourceBeforeUpdateHooks, sourceHook)
	case boil.AfterUpdateHook:
		sourceAfterUpdateHooks = append(sourceAfterUpdateHooks, sourceHook)
	case boil.BeforeDeleteHook:
		sourceBeforeDeleteHooks = append(sourceBeforeDeleteHooks, sourceHook)
	case boil.AfterDeleteHook:
		sourceAfterDeleteHooks = append(sourceAfterDeleteHooks, sourceHook)
	case boil.BeforeUpsertHook:
		sourceBeforeUpsertHooks = append(sourceBeforeUpsertHooks, sourceHook)
	case boil.AfterUpsertHook:
		sourceAfterUpsertHooks = append(sourceAfterUpsertHooks, sourceHook)
	}
}

// One returns a single source record from the query.
func (q sourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Source, error) {
	o := &Source{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for source")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Source records from the query.
func (q sourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SourceSlice, error) {
	var o []*Source

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Source slice")
	}

	if len(sourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Source records in the query.
func (q sourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count source rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if source exists")
	}

	return count > 0, nil
}

// SRCActivities retrieves all the activity's Activities with an executor via src_id column.
func (o *Source) SRCActivities(mods ...qm.QueryMod) activityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activities\".\"src_id\"=?", o.SRCID),
	)

	return Activities(queryMods...)
}

// SRCAssays retrieves all the assay's Assays with an executor via src_id column.
func (o *Source) SRCAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"src_id\"=?", o.SRCID),
	)

	return Assays(queryMods...)
}

// SRCCompoundRecords retrieves all the compound_record's CompoundRecords with an executor via src_id column.
func (o *Source) SRCCompoundRecords(mods ...qm.QueryMod) compoundRecordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"compound_records\".\"src_id\"=?", o.SRCID),
	)

	return CompoundRecords(queryMods...)
}

// SRCDocs retrieves all the doc's Docs with an executor via src_id column.
func (o *Source) SRCDocs(mods ...qm.QueryMod) docQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"docs\".\"src_id\"=?", o.SRCID),
	)

	return Docs(queryMods...)
}

// LoadSRCActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sourceL) LoadSRCActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSource interface{}, mods queries.Applicator) error {
	var slice []*Source
	var object *Source

	if singular {
		object = maybeSource.(*Source)
	} else {
		slice = *maybeSource.(*[]*Source)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sourceR{}
		}
		args = append(args, object.SRCID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sourceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SRCID) {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activities")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRCActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityR{}
			}
			foreign.R.SRC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.SRCID, foreign.SRCID) {
				local.R.SRCActivities = append(local.R.SRCActivities, foreign)
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.SRC = local
				break
			}
		}
	}

	return nil
}

// LoadSRCAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sourceL) LoadSRCAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSource interface{}, mods queries.Applicator) error {
	var slice []*Source
	var object *Source

	if singular {
		object = maybeSource.(*Source)
	} else {
		slice = *maybeSource.(*[]*Source)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sourceR{}
		}
		args = append(args, object.SRCID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sourceR{}
			}

			for _, a := range args {
				if a == obj.SRCID {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRCAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.SRC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SRCID == foreign.SRCID {
				local.R.SRCAssays = append(local.R.SRCAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.SRC = local
				break
			}
		}
	}

	return nil
}

// LoadSRCCompoundRecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sourceL) LoadSRCCompoundRecords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSource interface{}, mods queries.Applicator) error {
	var slice []*Source
	var object *Source

	if singular {
		object = maybeSource.(*Source)
	} else {
		slice = *maybeSource.(*[]*Source)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sourceR{}
		}
		args = append(args, object.SRCID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sourceR{}
			}

			for _, a := range args {
				if a == obj.SRCID {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load compound_records")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice compound_records")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRCCompoundRecords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &compoundRecordR{}
			}
			foreign.R.SRC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SRCID == foreign.SRCID {
				local.R.SRCCompoundRecords = append(local.R.SRCCompoundRecords, foreign)
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.SRC = local
				break
			}
		}
	}

	return nil
}

// LoadSRCDocs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sourceL) LoadSRCDocs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSource interface{}, mods queries.Applicator) error {
	var slice []*Source
	var object *Source

	if singular {
		object = maybeSource.(*Source)
	} else {
		slice = *maybeSource.(*[]*Source)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sourceR{}
		}
		args = append(args, object.SRCID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sourceR{}
			}

			for _, a := range args {
				if a == obj.SRCID {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`docs`),
		qm.WhereIn(`docs.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load docs")
	}

	var resultSlice []*Doc
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice docs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on docs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for docs")
	}

	if len(docAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRCDocs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &docR{}
			}
			foreign.R.SRC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SRCID == foreign.SRCID {
				local.R.SRCDocs = append(local.R.SRCDocs, foreign)
				if foreign.R == nil {
					foreign.R = &docR{}
				}
				foreign.R.SRC = local
				break
			}
		}
	}

	return nil
}

// AddSRCActivities adds the given related objects to the existing relationships
// of the source, optionally inserting them as new records.
// Appends related to o.R.SRCActivities.
// Sets related.R.SRC appropriately.
func (o *Source) AddSRCActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SRCID, o.SRCID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
				strmangle.WhereClause("\"", "\"", 0, activityPrimaryKeyColumns),
			)
			values := []interface{}{o.SRCID, rel.ActivityID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SRCID, o.SRCID)
		}
	}

	if o.R == nil {
		o.R = &sourceR{
			SRCActivities: related,
		}
	} else {
		o.R.SRCActivities = append(o.R.SRCActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityR{
				SRC: o,
			}
		} else {
			rel.R.SRC = o
		}
	}
	return nil
}

// SetSRCActivities removes all previously related items of the
// source replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SRC's SRCActivities accordingly.
// Replaces o.R.SRCActivities with related.
// Sets related.R.SRC's SRCActivities accordingly.
func (o *Source) SetSRCActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	query := "update \"activities\" set \"src_id\" = null where \"src_id\" = ?"
	values := []interface{}{o.SRCID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SRCActivities {
			queries.SetScanner(&rel.SRCID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SRC = nil
		}
		o.R.SRCActivities = nil
	}

	return o.AddSRCActivities(ctx, exec, insert, related...)
}

// RemoveSRCActivities relationships from objects passed in.
// Removes related items from R.SRCActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.SRC.
func (o *Source) RemoveSRCActivities(ctx context.Context, exec boil.ContextExecutor, related ...*Activity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SRCID, nil)
		if rel.R != nil {
			rel.R.SRC = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("src_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SRCActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.SRCActivities)
			if ln > 1 && i < ln-1 {
				o.R.SRCActivities[i] = o.R.SRCActivities[ln-1]
			}
			o.R.SRCActivities = o.R.SRCActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddSRCAssays adds the given related objects to the existing relationships
// of the source, optionally inserting them as new records.
// Appends related to o.R.SRCAssays.
// Sets related.R.SRC appropriately.
func (o *Source) AddSRCAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRCID = o.SRCID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.SRCID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRCID = o.SRCID
		}
	}

	if o.R == nil {
		o.R = &sourceR{
			SRCAssays: related,
		}
	} else {
		o.R.SRCAssays = append(o.R.SRCAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				SRC: o,
			}
		} else {
			rel.R.SRC = o
		}
	}
	return nil
}

// AddSRCCompoundRecords adds the given related objects to the existing relationships
// of the source, optionally inserting them as new records.
// Appends related to o.R.SRCCompoundRecords.
// Sets related.R.SRC appropriately.
func (o *Source) AddSRCCompoundRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompoundRecord) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRCID = o.SRCID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"compound_records\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
				strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
			)
			values := []interface{}{o.SRCID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRCID = o.SRCID
		}
	}

	if o.R == nil {
		o.R = &sourceR{
			SRCCompoundRecords: related,
		}
	} else {
		o.R.SRCCompoundRecords = append(o.R.SRCCompoundRecords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &compoundRecordR{
				SRC: o,
			}
		} else {
			rel.R.SRC = o
		}
	}
	return nil
}

// AddSRCDocs adds the given related objects to the existing relationships
// of the source, optionally inserting them as new records.
// Appends related to o.R.SRCDocs.
// Sets related.R.SRC appropriately.
func (o *Source) AddSRCDocs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Doc) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRCID = o.SRCID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"docs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
				strmangle.WhereClause("\"", "\"", 0, docPrimaryKeyColumns),
			)
			values := []interface{}{o.SRCID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRCID = o.SRCID
		}
	}

	if o.R == nil {
		o.R = &sourceR{
			SRCDocs: related,
		}
	} else {
		o.R.SRCDocs = append(o.R.SRCDocs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &docR{
				SRC: o,
			}
		} else {
			rel.R.SRC = o
		}
	}
	return nil
}

// Sources retrieves all the records using an executor.
func Sources(mods ...qm.QueryMod) sourceQuery {
	mods = append(mods, qm.From("\"source\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"source\".*"})
	}

	return sourceQuery{q}
}

// FindSource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSource(ctx context.Context, exec boil.ContextExecutor, sRCID int64, selectCols ...string) (*Source, error) {
	sourceObj := &Source{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"source\" where \"src_id\"=?", sel,
	)

	q := queries.Raw(query, sRCID)

	err := q.Bind(ctx, exec, sourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from source")
	}

	if err = sourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sourceObj, err
	}

	return sourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Source) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no source provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sourceInsertCacheMut.RLock()
	cache, cached := sourceInsertCache[key]
	sourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sourceAllColumns,
			sourceColumnsWithDefault,
			sourceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sourceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sourceType, sourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"source\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"source\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into source")
	}

	if !cached {
		sourceInsertCacheMut.Lock()
		sourceInsertCache[key] = cache
		sourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Source.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Source) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sourceUpdateCacheMut.RLock()
	cache, cached := sourceUpdateCache[key]
	sourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sourceAllColumns,
			sourcePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sourceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update source, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"source\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, append(wl, sourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update source row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for source")
	}

	if !cached {
		sourceUpdateCacheMut.Lock()
		sourceUpdateCache[key] = cache
		sourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for source")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"source\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in source slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all source")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Source) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no source provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sourceUpsertCacheMut.RLock()
	cache, cached := sourceUpsertCache[key]
	sourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sourceAllColumns,
			sourceColumnsWithDefault,
			sourceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sourceAllColumns,
			sourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert source, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sourcePrimaryKeyColumns))
			copy(conflict, sourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"source\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sourceType, sourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert source")
	}

	if !cached {
		sourceUpsertCacheMut.Lock()
		sourceUpsertCache[key] = cache
		sourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Source record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Source) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Source provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sourcePrimaryKeyMapping)
	sql := "DELETE FROM \"source\" WHERE \"src_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for source")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from source")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for source")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"source\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sourcePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from source slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for source")
	}

	if len(sourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Source) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSource(ctx, exec, o.SRCID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"source\".* FROM \"source\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SourceSlice")
	}

	*o = slice

	return nil
}

// SourceExists checks if the Source row exists.
func SourceExists(ctx context.Context, exec boil.ContextExecutor, sRCID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"source\" where \"src_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sRCID)
	}
	row := exec.QueryRowContext(ctx, sql, sRCID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if source exists")
	}

	return exists, nil
}
