// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Uniprot is an object representing the database table.
type Uniprot struct {
	Accession null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Database  string      `boil:"database" json:"database" toml:"database" yaml:"database"`
	Seqhash   string      `boil:"seqhash" json:"seqhash" toml:"seqhash" yaml:"seqhash"`

	R *uniprotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uniprotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UniprotColumns = struct {
	Accession string
	Database  string
	Seqhash   string
}{
	Accession: "accession",
	Database:  "database",
	Seqhash:   "seqhash",
}

var UniprotTableColumns = struct {
	Accession string
	Database  string
	Seqhash   string
}{
	Accession: "uniprot.accession",
	Database:  "uniprot.database",
	Seqhash:   "uniprot.seqhash",
}

// Generated where

var UniprotWhere = struct {
	Accession whereHelpernull_String
	Database  whereHelperstring
	Seqhash   whereHelperstring
}{
	Accession: whereHelpernull_String{field: "\"uniprot\".\"accession\""},
	Database:  whereHelperstring{field: "\"uniprot\".\"database\""},
	Seqhash:   whereHelperstring{field: "\"uniprot\".\"seqhash\""},
}

// UniprotRels is where relationship names are stored.
var UniprotRels = struct {
	UniprotSeqhash string
	Reactions      string
}{
	UniprotSeqhash: "UniprotSeqhash",
	Reactions:      "Reactions",
}

// uniprotR is where relationships are stored.
type uniprotR struct {
	UniprotSeqhash *Seqhash      `boil:"UniprotSeqhash" json:"UniprotSeqhash" toml:"UniprotSeqhash" yaml:"UniprotSeqhash"`
	Reactions      ReactionSlice `boil:"Reactions" json:"Reactions" toml:"Reactions" yaml:"Reactions"`
}

// NewStruct creates a new relationship struct
func (*uniprotR) NewStruct() *uniprotR {
	return &uniprotR{}
}

func (r *uniprotR) GetUniprotSeqhash() *Seqhash {
	if r == nil {
		return nil
	}
	return r.UniprotSeqhash
}

func (r *uniprotR) GetReactions() ReactionSlice {
	if r == nil {
		return nil
	}
	return r.Reactions
}

// uniprotL is where Load methods for each relationship are stored.
type uniprotL struct{}

var (
	uniprotAllColumns            = []string{"accession", "database", "seqhash"}
	uniprotColumnsWithoutDefault = []string{"database", "seqhash"}
	uniprotColumnsWithDefault    = []string{"accession"}
	uniprotPrimaryKeyColumns     = []string{"accession"}
	uniprotGeneratedColumns      = []string{}
)

type (
	// UniprotSlice is an alias for a slice of pointers to Uniprot.
	// This should almost always be used instead of []Uniprot.
	UniprotSlice []*Uniprot
	// UniprotHook is the signature for custom Uniprot hook methods
	UniprotHook func(context.Context, boil.ContextExecutor, *Uniprot) error

	uniprotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uniprotType                 = reflect.TypeOf(&Uniprot{})
	uniprotMapping              = queries.MakeStructMapping(uniprotType)
	uniprotPrimaryKeyMapping, _ = queries.BindMapping(uniprotType, uniprotMapping, uniprotPrimaryKeyColumns)
	uniprotInsertCacheMut       sync.RWMutex
	uniprotInsertCache          = make(map[string]insertCache)
	uniprotUpdateCacheMut       sync.RWMutex
	uniprotUpdateCache          = make(map[string]updateCache)
	uniprotUpsertCacheMut       sync.RWMutex
	uniprotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uniprotAfterSelectHooks []UniprotHook

var uniprotBeforeInsertHooks []UniprotHook
var uniprotAfterInsertHooks []UniprotHook

var uniprotBeforeUpdateHooks []UniprotHook
var uniprotAfterUpdateHooks []UniprotHook

var uniprotBeforeDeleteHooks []UniprotHook
var uniprotAfterDeleteHooks []UniprotHook

var uniprotBeforeUpsertHooks []UniprotHook
var uniprotAfterUpsertHooks []UniprotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Uniprot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Uniprot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Uniprot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Uniprot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Uniprot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Uniprot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Uniprot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Uniprot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Uniprot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uniprotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUniprotHook registers your hook function for all future operations.
func AddUniprotHook(hookPoint boil.HookPoint, uniprotHook UniprotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uniprotAfterSelectHooks = append(uniprotAfterSelectHooks, uniprotHook)
	case boil.BeforeInsertHook:
		uniprotBeforeInsertHooks = append(uniprotBeforeInsertHooks, uniprotHook)
	case boil.AfterInsertHook:
		uniprotAfterInsertHooks = append(uniprotAfterInsertHooks, uniprotHook)
	case boil.BeforeUpdateHook:
		uniprotBeforeUpdateHooks = append(uniprotBeforeUpdateHooks, uniprotHook)
	case boil.AfterUpdateHook:
		uniprotAfterUpdateHooks = append(uniprotAfterUpdateHooks, uniprotHook)
	case boil.BeforeDeleteHook:
		uniprotBeforeDeleteHooks = append(uniprotBeforeDeleteHooks, uniprotHook)
	case boil.AfterDeleteHook:
		uniprotAfterDeleteHooks = append(uniprotAfterDeleteHooks, uniprotHook)
	case boil.BeforeUpsertHook:
		uniprotBeforeUpsertHooks = append(uniprotBeforeUpsertHooks, uniprotHook)
	case boil.AfterUpsertHook:
		uniprotAfterUpsertHooks = append(uniprotAfterUpsertHooks, uniprotHook)
	}
}

// One returns a single uniprot record from the query.
func (q uniprotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Uniprot, error) {
	o := &Uniprot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for uniprot")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Uniprot records from the query.
func (q uniprotQuery) All(ctx context.Context, exec boil.ContextExecutor) (UniprotSlice, error) {
	var o []*Uniprot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Uniprot slice")
	}

	if len(uniprotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Uniprot records in the query.
func (q uniprotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count uniprot rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uniprotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if uniprot exists")
	}

	return count > 0, nil
}

// UniprotSeqhash pointed to by the foreign key.
func (o *Uniprot) UniprotSeqhash(mods ...qm.QueryMod) seqhashQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"seqhash\" = ?", o.Seqhash),
	}

	queryMods = append(queryMods, mods...)

	return Seqhashes(queryMods...)
}

// Reactions retrieves all the reaction's Reactions with an executor.
func (o *Uniprot) Reactions(mods ...qm.QueryMod) reactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"uniprot_to_reaction\" on \"reaction\".\"accession\" = \"uniprot_to_reaction\".\"reaction\""),
		qm.Where("\"uniprot_to_reaction\".\"uniprot\"=?", o.Accession),
	)

	return Reactions(queryMods...)
}

// LoadUniprotSeqhash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uniprotL) LoadUniprotSeqhash(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUniprot interface{}, mods queries.Applicator) error {
	var slice []*Uniprot
	var object *Uniprot

	if singular {
		object = maybeUniprot.(*Uniprot)
	} else {
		slice = *maybeUniprot.(*[]*Uniprot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uniprotR{}
		}
		args = append(args, object.Seqhash)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uniprotR{}
			}

			for _, a := range args {
				if a == obj.Seqhash {
					continue Outer
				}
			}

			args = append(args, obj.Seqhash)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seqhash`),
		qm.WhereIn(`seqhash.seqhash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Seqhash")
	}

	var resultSlice []*Seqhash
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Seqhash")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seqhash")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seqhash")
	}

	if len(uniprotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UniprotSeqhash = foreign
		if foreign.R == nil {
			foreign.R = &seqhashR{}
		}
		foreign.R.Uniprots = append(foreign.R.Uniprots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Seqhash == foreign.Seqhash {
				local.R.UniprotSeqhash = foreign
				if foreign.R == nil {
					foreign.R = &seqhashR{}
				}
				foreign.R.Uniprots = append(foreign.R.Uniprots, local)
				break
			}
		}
	}

	return nil
}

// LoadReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uniprotL) LoadReactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUniprot interface{}, mods queries.Applicator) error {
	var slice []*Uniprot
	var object *Uniprot

	if singular {
		object = maybeUniprot.(*Uniprot)
	} else {
		slice = *maybeUniprot.(*[]*Uniprot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &uniprotR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uniprotR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"reaction\".\"id\", \"reaction\".\"directional\", \"reaction\".\"accession\", \"reaction\".\"status\", \"reaction\".\"comment\", \"reaction\".\"equation\", \"reaction\".\"html_equation\", \"reaction\".\"is_chemically_balanced\", \"reaction\".\"is_transport\", \"reaction\".\"ec\", \"reaction\".\"location\", \"a\".\"uniprot\""),
		qm.From("\"reaction\""),
		qm.InnerJoin("\"uniprot_to_reaction\" as \"a\" on \"reaction\".\"accession\" = \"a\".\"reaction\""),
		qm.WhereIn("\"a\".\"uniprot\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reaction")
	}

	var resultSlice []*Reaction

	var localJoinCols []null.String
	for results.Next() {
		one := new(Reaction)
		var localJoinCol null.String

		err = results.Scan(&one.ID, &one.Directional, &one.Accession, &one.Status, &one.Comment, &one.Equation, &one.HTMLEquation, &one.IsChemicallyBalanced, &one.IsTransport, &one.Ec, &one.Location, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for reaction")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice reaction")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reaction")
	}

	if len(reactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionR{}
			}
			foreign.R.Uniprots = append(foreign.R.Uniprots, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.Accession, localJoinCol) {
				local.R.Reactions = append(local.R.Reactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionR{}
				}
				foreign.R.Uniprots = append(foreign.R.Uniprots, local)
				break
			}
		}
	}

	return nil
}

// SetUniprotSeqhash of the uniprot to the related item.
// Sets o.R.UniprotSeqhash to related.
// Adds o to related.R.Uniprots.
func (o *Uniprot) SetUniprotSeqhash(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Seqhash) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"uniprot\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"seqhash"}),
		strmangle.WhereClause("\"", "\"", 0, uniprotPrimaryKeyColumns),
	)
	values := []interface{}{related.Seqhash, o.Accession}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Seqhash = related.Seqhash
	if o.R == nil {
		o.R = &uniprotR{
			UniprotSeqhash: related,
		}
	} else {
		o.R.UniprotSeqhash = related
	}

	if related.R == nil {
		related.R = &seqhashR{
			Uniprots: UniprotSlice{o},
		}
	} else {
		related.R.Uniprots = append(related.R.Uniprots, o)
	}

	return nil
}

// AddReactions adds the given related objects to the existing relationships
// of the uniprot, optionally inserting them as new records.
// Appends related to o.R.Reactions.
// Sets related.R.Uniprots appropriately.
func (o *Uniprot) AddReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"uniprot_to_reaction\" (\"uniprot\", \"reaction\") values (?, ?)"
		values := []interface{}{o.Accession, rel.Accession}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &uniprotR{
			Reactions: related,
		}
	} else {
		o.R.Reactions = append(o.R.Reactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionR{
				Uniprots: UniprotSlice{o},
			}
		} else {
			rel.R.Uniprots = append(rel.R.Uniprots, o)
		}
	}
	return nil
}

// SetReactions removes all previously related items of the
// uniprot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Uniprots's Reactions accordingly.
// Replaces o.R.Reactions with related.
// Sets related.R.Uniprots's Reactions accordingly.
func (o *Uniprot) SetReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	query := "delete from \"uniprot_to_reaction\" where \"uniprot\" = ?"
	values := []interface{}{o.Accession}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeReactionsFromUniprotsSlice(o, related)
	if o.R != nil {
		o.R.Reactions = nil
	}

	return o.AddReactions(ctx, exec, insert, related...)
}

// RemoveReactions relationships from objects passed in.
// Removes related items from R.Reactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Uniprots.
func (o *Uniprot) RemoveReactions(ctx context.Context, exec boil.ContextExecutor, related ...*Reaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"uniprot_to_reaction\" where \"uniprot\" = ? and \"reaction\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.Accession}
	for _, rel := range related {
		values = append(values, rel.Accession)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeReactionsFromUniprotsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Reactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Reactions)
			if ln > 1 && i < ln-1 {
				o.R.Reactions[i] = o.R.Reactions[ln-1]
			}
			o.R.Reactions = o.R.Reactions[:ln-1]
			break
		}
	}

	return nil
}

func removeReactionsFromUniprotsSlice(o *Uniprot, related []*Reaction) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Uniprots {
			if !queries.Equal(o.Accession, ri.Accession) {
				continue
			}

			ln := len(rel.R.Uniprots)
			if ln > 1 && i < ln-1 {
				rel.R.Uniprots[i] = rel.R.Uniprots[ln-1]
			}
			rel.R.Uniprots = rel.R.Uniprots[:ln-1]
			break
		}
	}
}

// Uniprots retrieves all the records using an executor.
func Uniprots(mods ...qm.QueryMod) uniprotQuery {
	mods = append(mods, qm.From("\"uniprot\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"uniprot\".*"})
	}

	return uniprotQuery{q}
}

// FindUniprot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUniprot(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*Uniprot, error) {
	uniprotObj := &Uniprot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uniprot\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, uniprotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from uniprot")
	}

	if err = uniprotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uniprotObj, err
	}

	return uniprotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Uniprot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uniprot provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uniprotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uniprotInsertCacheMut.RLock()
	cache, cached := uniprotInsertCache[key]
	uniprotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uniprotAllColumns,
			uniprotColumnsWithDefault,
			uniprotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uniprotType, uniprotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uniprotType, uniprotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uniprot\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uniprot\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into uniprot")
	}

	if !cached {
		uniprotInsertCacheMut.Lock()
		uniprotInsertCache[key] = cache
		uniprotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Uniprot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Uniprot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uniprotUpdateCacheMut.RLock()
	cache, cached := uniprotUpdateCache[key]
	uniprotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uniprotAllColumns,
			uniprotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update uniprot, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uniprot\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, uniprotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uniprotType, uniprotMapping, append(wl, uniprotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update uniprot row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for uniprot")
	}

	if !cached {
		uniprotUpdateCacheMut.Lock()
		uniprotUpdateCache[key] = cache
		uniprotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uniprotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for uniprot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for uniprot")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UniprotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uniprotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uniprot\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uniprotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uniprot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uniprot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Uniprot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uniprot provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uniprotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uniprotUpsertCacheMut.RLock()
	cache, cached := uniprotUpsertCache[key]
	uniprotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uniprotAllColumns,
			uniprotColumnsWithDefault,
			uniprotColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			uniprotAllColumns,
			uniprotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert uniprot, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uniprotPrimaryKeyColumns))
			copy(conflict, uniprotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"uniprot\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uniprotType, uniprotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uniprotType, uniprotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert uniprot")
	}

	if !cached {
		uniprotUpsertCacheMut.Lock()
		uniprotUpsertCache[key] = cache
		uniprotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Uniprot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Uniprot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Uniprot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniprotPrimaryKeyMapping)
	sql := "DELETE FROM \"uniprot\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from uniprot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for uniprot")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uniprotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uniprotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uniprot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uniprot")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UniprotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uniprotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uniprotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"uniprot\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uniprotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uniprot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uniprot")
	}

	if len(uniprotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Uniprot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUniprot(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UniprotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UniprotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uniprotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uniprot\".* FROM \"uniprot\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uniprotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UniprotSlice")
	}

	*o = slice

	return nil
}

// UniprotExists checks if the Uniprot row exists.
func UniprotExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uniprot\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if uniprot exists")
	}

	return exists, nil
}
