// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TissueDictionary is an object representing the database table.
type TissueDictionary struct {
	TissueID int64       `boil:"tissue_id" json:"tissue_id" toml:"tissue_id" yaml:"tissue_id"`
	UberonID null.String `boil:"uberon_id" json:"uberon_id,omitempty" toml:"uberon_id" yaml:"uberon_id,omitempty"`
	PrefName string      `boil:"pref_name" json:"pref_name" toml:"pref_name" yaml:"pref_name"`
	EfoID    null.String `boil:"efo_id" json:"efo_id,omitempty" toml:"efo_id" yaml:"efo_id,omitempty"`
	ChemblID string      `boil:"chembl_id" json:"chembl_id" toml:"chembl_id" yaml:"chembl_id"`
	BtoID    null.String `boil:"bto_id" json:"bto_id,omitempty" toml:"bto_id" yaml:"bto_id,omitempty"`
	CalohaID null.String `boil:"caloha_id" json:"caloha_id,omitempty" toml:"caloha_id" yaml:"caloha_id,omitempty"`

	R *tissueDictionaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tissueDictionaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TissueDictionaryColumns = struct {
	TissueID string
	UberonID string
	PrefName string
	EfoID    string
	ChemblID string
	BtoID    string
	CalohaID string
}{
	TissueID: "tissue_id",
	UberonID: "uberon_id",
	PrefName: "pref_name",
	EfoID:    "efo_id",
	ChemblID: "chembl_id",
	BtoID:    "bto_id",
	CalohaID: "caloha_id",
}

var TissueDictionaryTableColumns = struct {
	TissueID string
	UberonID string
	PrefName string
	EfoID    string
	ChemblID string
	BtoID    string
	CalohaID string
}{
	TissueID: "tissue_dictionary.tissue_id",
	UberonID: "tissue_dictionary.uberon_id",
	PrefName: "tissue_dictionary.pref_name",
	EfoID:    "tissue_dictionary.efo_id",
	ChemblID: "tissue_dictionary.chembl_id",
	BtoID:    "tissue_dictionary.bto_id",
	CalohaID: "tissue_dictionary.caloha_id",
}

// Generated where

var TissueDictionaryWhere = struct {
	TissueID whereHelperint64
	UberonID whereHelpernull_String
	PrefName whereHelperstring
	EfoID    whereHelpernull_String
	ChemblID whereHelperstring
	BtoID    whereHelpernull_String
	CalohaID whereHelpernull_String
}{
	TissueID: whereHelperint64{field: "\"tissue_dictionary\".\"tissue_id\""},
	UberonID: whereHelpernull_String{field: "\"tissue_dictionary\".\"uberon_id\""},
	PrefName: whereHelperstring{field: "\"tissue_dictionary\".\"pref_name\""},
	EfoID:    whereHelpernull_String{field: "\"tissue_dictionary\".\"efo_id\""},
	ChemblID: whereHelperstring{field: "\"tissue_dictionary\".\"chembl_id\""},
	BtoID:    whereHelpernull_String{field: "\"tissue_dictionary\".\"bto_id\""},
	CalohaID: whereHelpernull_String{field: "\"tissue_dictionary\".\"caloha_id\""},
}

// TissueDictionaryRels is where relationship names are stored.
var TissueDictionaryRels = struct {
	Chembl       string
	TissueAssays string
}{
	Chembl:       "Chembl",
	TissueAssays: "TissueAssays",
}

// tissueDictionaryR is where relationships are stored.
type tissueDictionaryR struct {
	Chembl       *ChemblIDLookup `boil:"Chembl" json:"Chembl" toml:"Chembl" yaml:"Chembl"`
	TissueAssays AssaySlice      `boil:"TissueAssays" json:"TissueAssays" toml:"TissueAssays" yaml:"TissueAssays"`
}

// NewStruct creates a new relationship struct
func (*tissueDictionaryR) NewStruct() *tissueDictionaryR {
	return &tissueDictionaryR{}
}

func (r *tissueDictionaryR) GetChembl() *ChemblIDLookup {
	if r == nil {
		return nil
	}
	return r.Chembl
}

func (r *tissueDictionaryR) GetTissueAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.TissueAssays
}

// tissueDictionaryL is where Load methods for each relationship are stored.
type tissueDictionaryL struct{}

var (
	tissueDictionaryAllColumns            = []string{"tissue_id", "uberon_id", "pref_name", "efo_id", "chembl_id", "bto_id", "caloha_id"}
	tissueDictionaryColumnsWithoutDefault = []string{"tissue_id", "pref_name", "chembl_id"}
	tissueDictionaryColumnsWithDefault    = []string{"uberon_id", "efo_id", "bto_id", "caloha_id"}
	tissueDictionaryPrimaryKeyColumns     = []string{"tissue_id"}
	tissueDictionaryGeneratedColumns      = []string{}
)

type (
	// TissueDictionarySlice is an alias for a slice of pointers to TissueDictionary.
	// This should almost always be used instead of []TissueDictionary.
	TissueDictionarySlice []*TissueDictionary
	// TissueDictionaryHook is the signature for custom TissueDictionary hook methods
	TissueDictionaryHook func(context.Context, boil.ContextExecutor, *TissueDictionary) error

	tissueDictionaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tissueDictionaryType                 = reflect.TypeOf(&TissueDictionary{})
	tissueDictionaryMapping              = queries.MakeStructMapping(tissueDictionaryType)
	tissueDictionaryPrimaryKeyMapping, _ = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, tissueDictionaryPrimaryKeyColumns)
	tissueDictionaryInsertCacheMut       sync.RWMutex
	tissueDictionaryInsertCache          = make(map[string]insertCache)
	tissueDictionaryUpdateCacheMut       sync.RWMutex
	tissueDictionaryUpdateCache          = make(map[string]updateCache)
	tissueDictionaryUpsertCacheMut       sync.RWMutex
	tissueDictionaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tissueDictionaryAfterSelectHooks []TissueDictionaryHook

var tissueDictionaryBeforeInsertHooks []TissueDictionaryHook
var tissueDictionaryAfterInsertHooks []TissueDictionaryHook

var tissueDictionaryBeforeUpdateHooks []TissueDictionaryHook
var tissueDictionaryAfterUpdateHooks []TissueDictionaryHook

var tissueDictionaryBeforeDeleteHooks []TissueDictionaryHook
var tissueDictionaryAfterDeleteHooks []TissueDictionaryHook

var tissueDictionaryBeforeUpsertHooks []TissueDictionaryHook
var tissueDictionaryAfterUpsertHooks []TissueDictionaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TissueDictionary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TissueDictionary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TissueDictionary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TissueDictionary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TissueDictionary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TissueDictionary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TissueDictionary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TissueDictionary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TissueDictionary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tissueDictionaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTissueDictionaryHook registers your hook function for all future operations.
func AddTissueDictionaryHook(hookPoint boil.HookPoint, tissueDictionaryHook TissueDictionaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tissueDictionaryAfterSelectHooks = append(tissueDictionaryAfterSelectHooks, tissueDictionaryHook)
	case boil.BeforeInsertHook:
		tissueDictionaryBeforeInsertHooks = append(tissueDictionaryBeforeInsertHooks, tissueDictionaryHook)
	case boil.AfterInsertHook:
		tissueDictionaryAfterInsertHooks = append(tissueDictionaryAfterInsertHooks, tissueDictionaryHook)
	case boil.BeforeUpdateHook:
		tissueDictionaryBeforeUpdateHooks = append(tissueDictionaryBeforeUpdateHooks, tissueDictionaryHook)
	case boil.AfterUpdateHook:
		tissueDictionaryAfterUpdateHooks = append(tissueDictionaryAfterUpdateHooks, tissueDictionaryHook)
	case boil.BeforeDeleteHook:
		tissueDictionaryBeforeDeleteHooks = append(tissueDictionaryBeforeDeleteHooks, tissueDictionaryHook)
	case boil.AfterDeleteHook:
		tissueDictionaryAfterDeleteHooks = append(tissueDictionaryAfterDeleteHooks, tissueDictionaryHook)
	case boil.BeforeUpsertHook:
		tissueDictionaryBeforeUpsertHooks = append(tissueDictionaryBeforeUpsertHooks, tissueDictionaryHook)
	case boil.AfterUpsertHook:
		tissueDictionaryAfterUpsertHooks = append(tissueDictionaryAfterUpsertHooks, tissueDictionaryHook)
	}
}

// One returns a single tissueDictionary record from the query.
func (q tissueDictionaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TissueDictionary, error) {
	o := &TissueDictionary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tissue_dictionary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TissueDictionary records from the query.
func (q tissueDictionaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TissueDictionarySlice, error) {
	var o []*TissueDictionary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TissueDictionary slice")
	}

	if len(tissueDictionaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TissueDictionary records in the query.
func (q tissueDictionaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tissue_dictionary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tissueDictionaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tissue_dictionary exists")
	}

	return count > 0, nil
}

// Chembl pointed to by the foreign key.
func (o *TissueDictionary) Chembl(mods ...qm.QueryMod) chemblIDLookupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return ChemblIDLookups(queryMods...)
}

// TissueAssays retrieves all the assay's Assays with an executor via tissue_id column.
func (o *TissueDictionary) TissueAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"tissue_id\"=?", o.TissueID),
	)

	return Assays(queryMods...)
}

// LoadChembl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tissueDictionaryL) LoadChembl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTissueDictionary interface{}, mods queries.Applicator) error {
	var slice []*TissueDictionary
	var object *TissueDictionary

	if singular {
		object = maybeTissueDictionary.(*TissueDictionary)
	} else {
		slice = *maybeTissueDictionary.(*[]*TissueDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tissueDictionaryR{}
		}
		args = append(args, object.ChemblID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tissueDictionaryR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chembl_id_lookup`),
		qm.WhereIn(`chembl_id_lookup.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChemblIDLookup")
	}

	var resultSlice []*ChemblIDLookup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChemblIDLookup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chembl_id_lookup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chembl_id_lookup")
	}

	if len(tissueDictionaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chembl = foreign
		if foreign.R == nil {
			foreign.R = &chemblIDLookupR{}
		}
		foreign.R.ChemblTissueDictionary = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.Chembl = foreign
				if foreign.R == nil {
					foreign.R = &chemblIDLookupR{}
				}
				foreign.R.ChemblTissueDictionary = local
				break
			}
		}
	}

	return nil
}

// LoadTissueAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tissueDictionaryL) LoadTissueAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTissueDictionary interface{}, mods queries.Applicator) error {
	var slice []*TissueDictionary
	var object *TissueDictionary

	if singular {
		object = maybeTissueDictionary.(*TissueDictionary)
	} else {
		slice = *maybeTissueDictionary.(*[]*TissueDictionary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tissueDictionaryR{}
		}
		args = append(args, object.TissueID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tissueDictionaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TissueID) {
					continue Outer
				}
			}

			args = append(args, obj.TissueID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.tissue_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TissueAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.Tissue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TissueID, foreign.TissueID) {
				local.R.TissueAssays = append(local.R.TissueAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.Tissue = local
				break
			}
		}
	}

	return nil
}

// SetChembl of the tissueDictionary to the related item.
// Sets o.R.Chembl to related.
// Adds o to related.R.ChemblTissueDictionary.
func (o *TissueDictionary) SetChembl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChemblIDLookup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tissue_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
		strmangle.WhereClause("\"", "\"", 0, tissueDictionaryPrimaryKeyColumns),
	)
	values := []interface{}{related.ChemblID, o.TissueID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChemblID = related.ChemblID
	if o.R == nil {
		o.R = &tissueDictionaryR{
			Chembl: related,
		}
	} else {
		o.R.Chembl = related
	}

	if related.R == nil {
		related.R = &chemblIDLookupR{
			ChemblTissueDictionary: o,
		}
	} else {
		related.R.ChemblTissueDictionary = o
	}

	return nil
}

// AddTissueAssays adds the given related objects to the existing relationships
// of the tissue_dictionary, optionally inserting them as new records.
// Appends related to o.R.TissueAssays.
// Sets related.R.Tissue appropriately.
func (o *TissueDictionary) AddTissueAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TissueID, o.TissueID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tissue_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.TissueID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TissueID, o.TissueID)
		}
	}

	if o.R == nil {
		o.R = &tissueDictionaryR{
			TissueAssays: related,
		}
	} else {
		o.R.TissueAssays = append(o.R.TissueAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				Tissue: o,
			}
		} else {
			rel.R.Tissue = o
		}
	}
	return nil
}

// SetTissueAssays removes all previously related items of the
// tissue_dictionary replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tissue's TissueAssays accordingly.
// Replaces o.R.TissueAssays with related.
// Sets related.R.Tissue's TissueAssays accordingly.
func (o *TissueDictionary) SetTissueAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"tissue_id\" = null where \"tissue_id\" = ?"
	values := []interface{}{o.TissueID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TissueAssays {
			queries.SetScanner(&rel.TissueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Tissue = nil
		}
		o.R.TissueAssays = nil
	}

	return o.AddTissueAssays(ctx, exec, insert, related...)
}

// RemoveTissueAssays relationships from objects passed in.
// Removes related items from R.TissueAssays (uses pointer comparison, removal does not keep order)
// Sets related.R.Tissue.
func (o *TissueDictionary) RemoveTissueAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TissueID, nil)
		if rel.R != nil {
			rel.R.Tissue = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tissue_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TissueAssays {
			if rel != ri {
				continue
			}

			ln := len(o.R.TissueAssays)
			if ln > 1 && i < ln-1 {
				o.R.TissueAssays[i] = o.R.TissueAssays[ln-1]
			}
			o.R.TissueAssays = o.R.TissueAssays[:ln-1]
			break
		}
	}

	return nil
}

// TissueDictionaries retrieves all the records using an executor.
func TissueDictionaries(mods ...qm.QueryMod) tissueDictionaryQuery {
	mods = append(mods, qm.From("\"tissue_dictionary\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tissue_dictionary\".*"})
	}

	return tissueDictionaryQuery{q}
}

// FindTissueDictionary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTissueDictionary(ctx context.Context, exec boil.ContextExecutor, tissueID int64, selectCols ...string) (*TissueDictionary, error) {
	tissueDictionaryObj := &TissueDictionary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tissue_dictionary\" where \"tissue_id\"=?", sel,
	)

	q := queries.Raw(query, tissueID)

	err := q.Bind(ctx, exec, tissueDictionaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tissue_dictionary")
	}

	if err = tissueDictionaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tissueDictionaryObj, err
	}

	return tissueDictionaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TissueDictionary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tissue_dictionary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tissueDictionaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tissueDictionaryInsertCacheMut.RLock()
	cache, cached := tissueDictionaryInsertCache[key]
	tissueDictionaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tissueDictionaryAllColumns,
			tissueDictionaryColumnsWithDefault,
			tissueDictionaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tissue_dictionary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tissue_dictionary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tissue_dictionary")
	}

	if !cached {
		tissueDictionaryInsertCacheMut.Lock()
		tissueDictionaryInsertCache[key] = cache
		tissueDictionaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TissueDictionary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TissueDictionary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tissueDictionaryUpdateCacheMut.RLock()
	cache, cached := tissueDictionaryUpdateCache[key]
	tissueDictionaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tissueDictionaryAllColumns,
			tissueDictionaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tissue_dictionary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tissue_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, tissueDictionaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, append(wl, tissueDictionaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tissue_dictionary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tissue_dictionary")
	}

	if !cached {
		tissueDictionaryUpdateCacheMut.Lock()
		tissueDictionaryUpdateCache[key] = cache
		tissueDictionaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tissueDictionaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tissue_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tissue_dictionary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TissueDictionarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tissueDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tissue_dictionary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tissueDictionaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tissueDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tissueDictionary")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TissueDictionary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tissue_dictionary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tissueDictionaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tissueDictionaryUpsertCacheMut.RLock()
	cache, cached := tissueDictionaryUpsertCache[key]
	tissueDictionaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tissueDictionaryAllColumns,
			tissueDictionaryColumnsWithDefault,
			tissueDictionaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tissueDictionaryAllColumns,
			tissueDictionaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tissue_dictionary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tissueDictionaryPrimaryKeyColumns))
			copy(conflict, tissueDictionaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"tissue_dictionary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tissueDictionaryType, tissueDictionaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tissue_dictionary")
	}

	if !cached {
		tissueDictionaryUpsertCacheMut.Lock()
		tissueDictionaryUpsertCache[key] = cache
		tissueDictionaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TissueDictionary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TissueDictionary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TissueDictionary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tissueDictionaryPrimaryKeyMapping)
	sql := "DELETE FROM \"tissue_dictionary\" WHERE \"tissue_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tissue_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tissue_dictionary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tissueDictionaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tissueDictionaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tissue_dictionary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tissue_dictionary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TissueDictionarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tissueDictionaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tissueDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tissue_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tissueDictionaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tissueDictionary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tissue_dictionary")
	}

	if len(tissueDictionaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TissueDictionary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTissueDictionary(ctx, exec, o.TissueID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TissueDictionarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TissueDictionarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tissueDictionaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tissue_dictionary\".* FROM \"tissue_dictionary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tissueDictionaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TissueDictionarySlice")
	}

	*o = slice

	return nil
}

// TissueDictionaryExists checks if the TissueDictionary row exists.
func TissueDictionaryExists(ctx context.Context, exec boil.ContextExecutor, tissueID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tissue_dictionary\" where \"tissue_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tissueID)
	}
	row := exec.QueryRowContext(ctx, sql, tissueID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tissue_dictionary exists")
	}

	return exists, nil
}
