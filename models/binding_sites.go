// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BindingSite is an object representing the database table.
type BindingSite struct {
	SiteID   int64       `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	SiteName null.String `boil:"site_name" json:"site_name,omitempty" toml:"site_name" yaml:"site_name,omitempty"`
	Tid      null.Int64  `boil:"tid" json:"tid,omitempty" toml:"tid" yaml:"tid,omitempty"`

	R *bindingSiteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bindingSiteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BindingSiteColumns = struct {
	SiteID   string
	SiteName string
	Tid      string
}{
	SiteID:   "site_id",
	SiteName: "site_name",
	Tid:      "tid",
}

var BindingSiteTableColumns = struct {
	SiteID   string
	SiteName string
	Tid      string
}{
	SiteID:   "binding_sites.site_id",
	SiteName: "binding_sites.site_name",
	Tid:      "binding_sites.tid",
}

// Generated where

var BindingSiteWhere = struct {
	SiteID   whereHelperint64
	SiteName whereHelpernull_String
	Tid      whereHelpernull_Int64
}{
	SiteID:   whereHelperint64{field: "\"binding_sites\".\"site_id\""},
	SiteName: whereHelpernull_String{field: "\"binding_sites\".\"site_name\""},
	Tid:      whereHelpernull_Int64{field: "\"binding_sites\".\"tid\""},
}

// BindingSiteRels is where relationship names are stored.
var BindingSiteRels = struct {
	TidTargetDictionary         string
	SiteDrugMechanisms          string
	SitePredictedBindingDomains string
	SiteSiteComponents          string
}{
	TidTargetDictionary:         "TidTargetDictionary",
	SiteDrugMechanisms:          "SiteDrugMechanisms",
	SitePredictedBindingDomains: "SitePredictedBindingDomains",
	SiteSiteComponents:          "SiteSiteComponents",
}

// bindingSiteR is where relationships are stored.
type bindingSiteR struct {
	TidTargetDictionary         *TargetDictionary           `boil:"TidTargetDictionary" json:"TidTargetDictionary" toml:"TidTargetDictionary" yaml:"TidTargetDictionary"`
	SiteDrugMechanisms          DrugMechanismSlice          `boil:"SiteDrugMechanisms" json:"SiteDrugMechanisms" toml:"SiteDrugMechanisms" yaml:"SiteDrugMechanisms"`
	SitePredictedBindingDomains PredictedBindingDomainSlice `boil:"SitePredictedBindingDomains" json:"SitePredictedBindingDomains" toml:"SitePredictedBindingDomains" yaml:"SitePredictedBindingDomains"`
	SiteSiteComponents          SiteComponentSlice          `boil:"SiteSiteComponents" json:"SiteSiteComponents" toml:"SiteSiteComponents" yaml:"SiteSiteComponents"`
}

// NewStruct creates a new relationship struct
func (*bindingSiteR) NewStruct() *bindingSiteR {
	return &bindingSiteR{}
}

func (r *bindingSiteR) GetTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.TidTargetDictionary
}

func (r *bindingSiteR) GetSiteDrugMechanisms() DrugMechanismSlice {
	if r == nil {
		return nil
	}
	return r.SiteDrugMechanisms
}

func (r *bindingSiteR) GetSitePredictedBindingDomains() PredictedBindingDomainSlice {
	if r == nil {
		return nil
	}
	return r.SitePredictedBindingDomains
}

func (r *bindingSiteR) GetSiteSiteComponents() SiteComponentSlice {
	if r == nil {
		return nil
	}
	return r.SiteSiteComponents
}

// bindingSiteL is where Load methods for each relationship are stored.
type bindingSiteL struct{}

var (
	bindingSiteAllColumns            = []string{"site_id", "site_name", "tid"}
	bindingSiteColumnsWithoutDefault = []string{"site_id"}
	bindingSiteColumnsWithDefault    = []string{"site_name", "tid"}
	bindingSitePrimaryKeyColumns     = []string{"site_id"}
	bindingSiteGeneratedColumns      = []string{}
)

type (
	// BindingSiteSlice is an alias for a slice of pointers to BindingSite.
	// This should almost always be used instead of []BindingSite.
	BindingSiteSlice []*BindingSite
	// BindingSiteHook is the signature for custom BindingSite hook methods
	BindingSiteHook func(context.Context, boil.ContextExecutor, *BindingSite) error

	bindingSiteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bindingSiteType                 = reflect.TypeOf(&BindingSite{})
	bindingSiteMapping              = queries.MakeStructMapping(bindingSiteType)
	bindingSitePrimaryKeyMapping, _ = queries.BindMapping(bindingSiteType, bindingSiteMapping, bindingSitePrimaryKeyColumns)
	bindingSiteInsertCacheMut       sync.RWMutex
	bindingSiteInsertCache          = make(map[string]insertCache)
	bindingSiteUpdateCacheMut       sync.RWMutex
	bindingSiteUpdateCache          = make(map[string]updateCache)
	bindingSiteUpsertCacheMut       sync.RWMutex
	bindingSiteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bindingSiteAfterSelectHooks []BindingSiteHook

var bindingSiteBeforeInsertHooks []BindingSiteHook
var bindingSiteAfterInsertHooks []BindingSiteHook

var bindingSiteBeforeUpdateHooks []BindingSiteHook
var bindingSiteAfterUpdateHooks []BindingSiteHook

var bindingSiteBeforeDeleteHooks []BindingSiteHook
var bindingSiteAfterDeleteHooks []BindingSiteHook

var bindingSiteBeforeUpsertHooks []BindingSiteHook
var bindingSiteAfterUpsertHooks []BindingSiteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BindingSite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BindingSite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BindingSite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BindingSite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BindingSite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BindingSite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BindingSite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BindingSite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BindingSite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bindingSiteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBindingSiteHook registers your hook function for all future operations.
func AddBindingSiteHook(hookPoint boil.HookPoint, bindingSiteHook BindingSiteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bindingSiteAfterSelectHooks = append(bindingSiteAfterSelectHooks, bindingSiteHook)
	case boil.BeforeInsertHook:
		bindingSiteBeforeInsertHooks = append(bindingSiteBeforeInsertHooks, bindingSiteHook)
	case boil.AfterInsertHook:
		bindingSiteAfterInsertHooks = append(bindingSiteAfterInsertHooks, bindingSiteHook)
	case boil.BeforeUpdateHook:
		bindingSiteBeforeUpdateHooks = append(bindingSiteBeforeUpdateHooks, bindingSiteHook)
	case boil.AfterUpdateHook:
		bindingSiteAfterUpdateHooks = append(bindingSiteAfterUpdateHooks, bindingSiteHook)
	case boil.BeforeDeleteHook:
		bindingSiteBeforeDeleteHooks = append(bindingSiteBeforeDeleteHooks, bindingSiteHook)
	case boil.AfterDeleteHook:
		bindingSiteAfterDeleteHooks = append(bindingSiteAfterDeleteHooks, bindingSiteHook)
	case boil.BeforeUpsertHook:
		bindingSiteBeforeUpsertHooks = append(bindingSiteBeforeUpsertHooks, bindingSiteHook)
	case boil.AfterUpsertHook:
		bindingSiteAfterUpsertHooks = append(bindingSiteAfterUpsertHooks, bindingSiteHook)
	}
}

// One returns a single bindingSite record from the query.
func (q bindingSiteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BindingSite, error) {
	o := &BindingSite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for binding_sites")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BindingSite records from the query.
func (q bindingSiteQuery) All(ctx context.Context, exec boil.ContextExecutor) (BindingSiteSlice, error) {
	var o []*BindingSite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BindingSite slice")
	}

	if len(bindingSiteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BindingSite records in the query.
func (q bindingSiteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count binding_sites rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bindingSiteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if binding_sites exists")
	}

	return count > 0, nil
}

// TidTargetDictionary pointed to by the foreign key.
func (o *BindingSite) TidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.Tid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// SiteDrugMechanisms retrieves all the drug_mechanism's DrugMechanisms with an executor via site_id column.
func (o *BindingSite) SiteDrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_mechanism\".\"site_id\"=?", o.SiteID),
	)

	return DrugMechanisms(queryMods...)
}

// SitePredictedBindingDomains retrieves all the predicted_binding_domain's PredictedBindingDomains with an executor via site_id column.
func (o *BindingSite) SitePredictedBindingDomains(mods ...qm.QueryMod) predictedBindingDomainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"predicted_binding_domains\".\"site_id\"=?", o.SiteID),
	)

	return PredictedBindingDomains(queryMods...)
}

// SiteSiteComponents retrieves all the site_component's SiteComponents with an executor via site_id column.
func (o *BindingSite) SiteSiteComponents(mods ...qm.QueryMod) siteComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"site_components\".\"site_id\"=?", o.SiteID),
	)

	return SiteComponents(queryMods...)
}

// LoadTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bindingSiteL) LoadTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBindingSite interface{}, mods queries.Applicator) error {
	var slice []*BindingSite
	var object *BindingSite

	if singular {
		object = maybeBindingSite.(*BindingSite)
	} else {
		slice = *maybeBindingSite.(*[]*BindingSite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bindingSiteR{}
		}
		if !queries.IsNil(object.Tid) {
			args = append(args, object.Tid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bindingSiteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Tid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Tid) {
				args = append(args, obj.Tid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(bindingSiteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.TidBindingSites = append(foreign.R.TidBindingSites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Tid, foreign.Tid) {
				local.R.TidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.TidBindingSites = append(foreign.R.TidBindingSites, local)
				break
			}
		}
	}

	return nil
}

// LoadSiteDrugMechanisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bindingSiteL) LoadSiteDrugMechanisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBindingSite interface{}, mods queries.Applicator) error {
	var slice []*BindingSite
	var object *BindingSite

	if singular {
		object = maybeBindingSite.(*BindingSite)
	} else {
		slice = *maybeBindingSite.(*[]*BindingSite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bindingSiteR{}
		}
		args = append(args, object.SiteID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bindingSiteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SiteID) {
					continue Outer
				}
			}

			args = append(args, obj.SiteID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_mechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_mechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteDrugMechanisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugMechanismR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.SiteID, foreign.SiteID) {
				local.R.SiteDrugMechanisms = append(local.R.SiteDrugMechanisms, foreign)
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// LoadSitePredictedBindingDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bindingSiteL) LoadSitePredictedBindingDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBindingSite interface{}, mods queries.Applicator) error {
	var slice []*BindingSite
	var object *BindingSite

	if singular {
		object = maybeBindingSite.(*BindingSite)
	} else {
		slice = *maybeBindingSite.(*[]*BindingSite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bindingSiteR{}
		}
		args = append(args, object.SiteID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bindingSiteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SiteID) {
					continue Outer
				}
			}

			args = append(args, obj.SiteID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`predicted_binding_domains`),
		qm.WhereIn(`predicted_binding_domains.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load predicted_binding_domains")
	}

	var resultSlice []*PredictedBindingDomain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice predicted_binding_domains")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on predicted_binding_domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for predicted_binding_domains")
	}

	if len(predictedBindingDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SitePredictedBindingDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &predictedBindingDomainR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.SiteID, foreign.SiteID) {
				local.R.SitePredictedBindingDomains = append(local.R.SitePredictedBindingDomains, foreign)
				if foreign.R == nil {
					foreign.R = &predictedBindingDomainR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// LoadSiteSiteComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bindingSiteL) LoadSiteSiteComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBindingSite interface{}, mods queries.Applicator) error {
	var slice []*BindingSite
	var object *BindingSite

	if singular {
		object = maybeBindingSite.(*BindingSite)
	} else {
		slice = *maybeBindingSite.(*[]*BindingSite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bindingSiteR{}
		}
		args = append(args, object.SiteID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bindingSiteR{}
			}

			for _, a := range args {
				if a == obj.SiteID {
					continue Outer
				}
			}

			args = append(args, obj.SiteID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`site_components`),
		qm.WhereIn(`site_components.site_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_components")
	}

	var resultSlice []*SiteComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice site_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_components")
	}

	if len(siteComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteSiteComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteComponentR{}
			}
			foreign.R.Site = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SiteID == foreign.SiteID {
				local.R.SiteSiteComponents = append(local.R.SiteSiteComponents, foreign)
				if foreign.R == nil {
					foreign.R = &siteComponentR{}
				}
				foreign.R.Site = local
				break
			}
		}
	}

	return nil
}

// SetTidTargetDictionary of the bindingSite to the related item.
// Sets o.R.TidTargetDictionary to related.
// Adds o to related.R.TidBindingSites.
func (o *BindingSite) SetTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"binding_sites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
		strmangle.WhereClause("\"", "\"", 0, bindingSitePrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Tid, related.Tid)
	if o.R == nil {
		o.R = &bindingSiteR{
			TidTargetDictionary: related,
		}
	} else {
		o.R.TidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			TidBindingSites: BindingSiteSlice{o},
		}
	} else {
		related.R.TidBindingSites = append(related.R.TidBindingSites, o)
	}

	return nil
}

// RemoveTidTargetDictionary relationship.
// Sets o.R.TidTargetDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *BindingSite) RemoveTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, related *TargetDictionary) error {
	var err error

	queries.SetScanner(&o.Tid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TidTargetDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TidBindingSites {
		if queries.Equal(o.Tid, ri.Tid) {
			continue
		}

		ln := len(related.R.TidBindingSites)
		if ln > 1 && i < ln-1 {
			related.R.TidBindingSites[i] = related.R.TidBindingSites[ln-1]
		}
		related.R.TidBindingSites = related.R.TidBindingSites[:ln-1]
		break
	}
	return nil
}

// AddSiteDrugMechanisms adds the given related objects to the existing relationships
// of the binding_site, optionally inserting them as new records.
// Appends related to o.R.SiteDrugMechanisms.
// Sets related.R.Site appropriately.
func (o *BindingSite) AddSiteDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SiteID, o.SiteID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_mechanism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.MecID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SiteID, o.SiteID)
		}
	}

	if o.R == nil {
		o.R = &bindingSiteR{
			SiteDrugMechanisms: related,
		}
	} else {
		o.R.SiteDrugMechanisms = append(o.R.SiteDrugMechanisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugMechanismR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// SetSiteDrugMechanisms removes all previously related items of the
// binding_site replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Site's SiteDrugMechanisms accordingly.
// Replaces o.R.SiteDrugMechanisms with related.
// Sets related.R.Site's SiteDrugMechanisms accordingly.
func (o *BindingSite) SetSiteDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	query := "update \"drug_mechanism\" set \"site_id\" = null where \"site_id\" = ?"
	values := []interface{}{o.SiteID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SiteDrugMechanisms {
			queries.SetScanner(&rel.SiteID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Site = nil
		}
		o.R.SiteDrugMechanisms = nil
	}

	return o.AddSiteDrugMechanisms(ctx, exec, insert, related...)
}

// RemoveSiteDrugMechanisms relationships from objects passed in.
// Removes related items from R.SiteDrugMechanisms (uses pointer comparison, removal does not keep order)
// Sets related.R.Site.
func (o *BindingSite) RemoveSiteDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, related ...*DrugMechanism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SiteID, nil)
		if rel.R != nil {
			rel.R.Site = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("site_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SiteDrugMechanisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.SiteDrugMechanisms)
			if ln > 1 && i < ln-1 {
				o.R.SiteDrugMechanisms[i] = o.R.SiteDrugMechanisms[ln-1]
			}
			o.R.SiteDrugMechanisms = o.R.SiteDrugMechanisms[:ln-1]
			break
		}
	}

	return nil
}

// AddSitePredictedBindingDomains adds the given related objects to the existing relationships
// of the binding_site, optionally inserting them as new records.
// Appends related to o.R.SitePredictedBindingDomains.
// Sets related.R.Site appropriately.
func (o *BindingSite) AddSitePredictedBindingDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PredictedBindingDomain) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SiteID, o.SiteID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"predicted_binding_domains\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 0, predictedBindingDomainPrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.PredbindID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SiteID, o.SiteID)
		}
	}

	if o.R == nil {
		o.R = &bindingSiteR{
			SitePredictedBindingDomains: related,
		}
	} else {
		o.R.SitePredictedBindingDomains = append(o.R.SitePredictedBindingDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &predictedBindingDomainR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// SetSitePredictedBindingDomains removes all previously related items of the
// binding_site replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Site's SitePredictedBindingDomains accordingly.
// Replaces o.R.SitePredictedBindingDomains with related.
// Sets related.R.Site's SitePredictedBindingDomains accordingly.
func (o *BindingSite) SetSitePredictedBindingDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PredictedBindingDomain) error {
	query := "update \"predicted_binding_domains\" set \"site_id\" = null where \"site_id\" = ?"
	values := []interface{}{o.SiteID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SitePredictedBindingDomains {
			queries.SetScanner(&rel.SiteID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Site = nil
		}
		o.R.SitePredictedBindingDomains = nil
	}

	return o.AddSitePredictedBindingDomains(ctx, exec, insert, related...)
}

// RemoveSitePredictedBindingDomains relationships from objects passed in.
// Removes related items from R.SitePredictedBindingDomains (uses pointer comparison, removal does not keep order)
// Sets related.R.Site.
func (o *BindingSite) RemoveSitePredictedBindingDomains(ctx context.Context, exec boil.ContextExecutor, related ...*PredictedBindingDomain) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SiteID, nil)
		if rel.R != nil {
			rel.R.Site = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("site_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SitePredictedBindingDomains {
			if rel != ri {
				continue
			}

			ln := len(o.R.SitePredictedBindingDomains)
			if ln > 1 && i < ln-1 {
				o.R.SitePredictedBindingDomains[i] = o.R.SitePredictedBindingDomains[ln-1]
			}
			o.R.SitePredictedBindingDomains = o.R.SitePredictedBindingDomains[:ln-1]
			break
		}
	}

	return nil
}

// AddSiteSiteComponents adds the given related objects to the existing relationships
// of the binding_site, optionally inserting them as new records.
// Appends related to o.R.SiteSiteComponents.
// Sets related.R.Site appropriately.
func (o *BindingSite) AddSiteSiteComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SiteID = o.SiteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"site_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"site_id"}),
				strmangle.WhereClause("\"", "\"", 0, siteComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.SiteID, rel.SitecompID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SiteID = o.SiteID
		}
	}

	if o.R == nil {
		o.R = &bindingSiteR{
			SiteSiteComponents: related,
		}
	} else {
		o.R.SiteSiteComponents = append(o.R.SiteSiteComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteComponentR{
				Site: o,
			}
		} else {
			rel.R.Site = o
		}
	}
	return nil
}

// BindingSites retrieves all the records using an executor.
func BindingSites(mods ...qm.QueryMod) bindingSiteQuery {
	mods = append(mods, qm.From("\"binding_sites\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"binding_sites\".*"})
	}

	return bindingSiteQuery{q}
}

// FindBindingSite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBindingSite(ctx context.Context, exec boil.ContextExecutor, siteID int64, selectCols ...string) (*BindingSite, error) {
	bindingSiteObj := &BindingSite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"binding_sites\" where \"site_id\"=?", sel,
	)

	q := queries.Raw(query, siteID)

	err := q.Bind(ctx, exec, bindingSiteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from binding_sites")
	}

	if err = bindingSiteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bindingSiteObj, err
	}

	return bindingSiteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BindingSite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no binding_sites provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bindingSiteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bindingSiteInsertCacheMut.RLock()
	cache, cached := bindingSiteInsertCache[key]
	bindingSiteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bindingSiteAllColumns,
			bindingSiteColumnsWithDefault,
			bindingSiteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bindingSiteType, bindingSiteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bindingSiteType, bindingSiteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"binding_sites\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"binding_sites\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into binding_sites")
	}

	if !cached {
		bindingSiteInsertCacheMut.Lock()
		bindingSiteInsertCache[key] = cache
		bindingSiteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BindingSite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BindingSite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bindingSiteUpdateCacheMut.RLock()
	cache, cached := bindingSiteUpdateCache[key]
	bindingSiteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bindingSiteAllColumns,
			bindingSitePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update binding_sites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"binding_sites\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bindingSitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bindingSiteType, bindingSiteMapping, append(wl, bindingSitePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update binding_sites row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for binding_sites")
	}

	if !cached {
		bindingSiteUpdateCacheMut.Lock()
		bindingSiteUpdateCache[key] = cache
		bindingSiteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bindingSiteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for binding_sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for binding_sites")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BindingSiteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"binding_sites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingSitePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bindingSite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bindingSite")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BindingSite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no binding_sites provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bindingSiteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bindingSiteUpsertCacheMut.RLock()
	cache, cached := bindingSiteUpsertCache[key]
	bindingSiteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bindingSiteAllColumns,
			bindingSiteColumnsWithDefault,
			bindingSiteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bindingSiteAllColumns,
			bindingSitePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert binding_sites, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bindingSitePrimaryKeyColumns))
			copy(conflict, bindingSitePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"binding_sites\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bindingSiteType, bindingSiteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bindingSiteType, bindingSiteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert binding_sites")
	}

	if !cached {
		bindingSiteUpsertCacheMut.Lock()
		bindingSiteUpsertCache[key] = cache
		bindingSiteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BindingSite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BindingSite) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BindingSite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bindingSitePrimaryKeyMapping)
	sql := "DELETE FROM \"binding_sites\" WHERE \"site_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from binding_sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for binding_sites")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bindingSiteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bindingSiteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from binding_sites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for binding_sites")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BindingSiteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bindingSiteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"binding_sites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingSitePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bindingSite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for binding_sites")
	}

	if len(bindingSiteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BindingSite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBindingSite(ctx, exec, o.SiteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BindingSiteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BindingSiteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingSitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"binding_sites\".* FROM \"binding_sites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingSitePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BindingSiteSlice")
	}

	*o = slice

	return nil
}

// BindingSiteExists checks if the BindingSite row exists.
func BindingSiteExists(ctx context.Context, exec boil.ContextExecutor, siteID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"binding_sites\" where \"site_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, siteID)
	}
	row := exec.QueryRowContext(ctx, sql, siteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if binding_sites exists")
	}

	return exists, nil
}
