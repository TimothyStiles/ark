// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TargetRelation is an object representing the database table.
type TargetRelation struct {
	Tid          int64  `boil:"tid" json:"tid" toml:"tid" yaml:"tid"`
	Relationship string `boil:"relationship" json:"relationship" toml:"relationship" yaml:"relationship"`
	RelatedTid   int64  `boil:"related_tid" json:"related_tid" toml:"related_tid" yaml:"related_tid"`
	TargrelID    int64  `boil:"targrel_id" json:"targrel_id" toml:"targrel_id" yaml:"targrel_id"`

	R *targetRelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetRelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetRelationColumns = struct {
	Tid          string
	Relationship string
	RelatedTid   string
	TargrelID    string
}{
	Tid:          "tid",
	Relationship: "relationship",
	RelatedTid:   "related_tid",
	TargrelID:    "targrel_id",
}

var TargetRelationTableColumns = struct {
	Tid          string
	Relationship string
	RelatedTid   string
	TargrelID    string
}{
	Tid:          "target_relations.tid",
	Relationship: "target_relations.relationship",
	RelatedTid:   "target_relations.related_tid",
	TargrelID:    "target_relations.targrel_id",
}

// Generated where

var TargetRelationWhere = struct {
	Tid          whereHelperint64
	Relationship whereHelperstring
	RelatedTid   whereHelperint64
	TargrelID    whereHelperint64
}{
	Tid:          whereHelperint64{field: "\"target_relations\".\"tid\""},
	Relationship: whereHelperstring{field: "\"target_relations\".\"relationship\""},
	RelatedTid:   whereHelperint64{field: "\"target_relations\".\"related_tid\""},
	TargrelID:    whereHelperint64{field: "\"target_relations\".\"targrel_id\""},
}

// TargetRelationRels is where relationship names are stored.
var TargetRelationRels = struct {
	TidTargetDictionary        string
	RelatedTidTargetDictionary string
}{
	TidTargetDictionary:        "TidTargetDictionary",
	RelatedTidTargetDictionary: "RelatedTidTargetDictionary",
}

// targetRelationR is where relationships are stored.
type targetRelationR struct {
	TidTargetDictionary        *TargetDictionary `boil:"TidTargetDictionary" json:"TidTargetDictionary" toml:"TidTargetDictionary" yaml:"TidTargetDictionary"`
	RelatedTidTargetDictionary *TargetDictionary `boil:"RelatedTidTargetDictionary" json:"RelatedTidTargetDictionary" toml:"RelatedTidTargetDictionary" yaml:"RelatedTidTargetDictionary"`
}

// NewStruct creates a new relationship struct
func (*targetRelationR) NewStruct() *targetRelationR {
	return &targetRelationR{}
}

func (r *targetRelationR) GetTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.TidTargetDictionary
}

func (r *targetRelationR) GetRelatedTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.RelatedTidTargetDictionary
}

// targetRelationL is where Load methods for each relationship are stored.
type targetRelationL struct{}

var (
	targetRelationAllColumns            = []string{"tid", "relationship", "related_tid", "targrel_id"}
	targetRelationColumnsWithoutDefault = []string{"tid", "relationship", "related_tid", "targrel_id"}
	targetRelationColumnsWithDefault    = []string{}
	targetRelationPrimaryKeyColumns     = []string{"targrel_id"}
	targetRelationGeneratedColumns      = []string{}
)

type (
	// TargetRelationSlice is an alias for a slice of pointers to TargetRelation.
	// This should almost always be used instead of []TargetRelation.
	TargetRelationSlice []*TargetRelation
	// TargetRelationHook is the signature for custom TargetRelation hook methods
	TargetRelationHook func(context.Context, boil.ContextExecutor, *TargetRelation) error

	targetRelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetRelationType                 = reflect.TypeOf(&TargetRelation{})
	targetRelationMapping              = queries.MakeStructMapping(targetRelationType)
	targetRelationPrimaryKeyMapping, _ = queries.BindMapping(targetRelationType, targetRelationMapping, targetRelationPrimaryKeyColumns)
	targetRelationInsertCacheMut       sync.RWMutex
	targetRelationInsertCache          = make(map[string]insertCache)
	targetRelationUpdateCacheMut       sync.RWMutex
	targetRelationUpdateCache          = make(map[string]updateCache)
	targetRelationUpsertCacheMut       sync.RWMutex
	targetRelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetRelationAfterSelectHooks []TargetRelationHook

var targetRelationBeforeInsertHooks []TargetRelationHook
var targetRelationAfterInsertHooks []TargetRelationHook

var targetRelationBeforeUpdateHooks []TargetRelationHook
var targetRelationAfterUpdateHooks []TargetRelationHook

var targetRelationBeforeDeleteHooks []TargetRelationHook
var targetRelationAfterDeleteHooks []TargetRelationHook

var targetRelationBeforeUpsertHooks []TargetRelationHook
var targetRelationAfterUpsertHooks []TargetRelationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TargetRelation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TargetRelation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TargetRelation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TargetRelation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TargetRelation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TargetRelation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TargetRelation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TargetRelation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TargetRelation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetRelationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetRelationHook registers your hook function for all future operations.
func AddTargetRelationHook(hookPoint boil.HookPoint, targetRelationHook TargetRelationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		targetRelationAfterSelectHooks = append(targetRelationAfterSelectHooks, targetRelationHook)
	case boil.BeforeInsertHook:
		targetRelationBeforeInsertHooks = append(targetRelationBeforeInsertHooks, targetRelationHook)
	case boil.AfterInsertHook:
		targetRelationAfterInsertHooks = append(targetRelationAfterInsertHooks, targetRelationHook)
	case boil.BeforeUpdateHook:
		targetRelationBeforeUpdateHooks = append(targetRelationBeforeUpdateHooks, targetRelationHook)
	case boil.AfterUpdateHook:
		targetRelationAfterUpdateHooks = append(targetRelationAfterUpdateHooks, targetRelationHook)
	case boil.BeforeDeleteHook:
		targetRelationBeforeDeleteHooks = append(targetRelationBeforeDeleteHooks, targetRelationHook)
	case boil.AfterDeleteHook:
		targetRelationAfterDeleteHooks = append(targetRelationAfterDeleteHooks, targetRelationHook)
	case boil.BeforeUpsertHook:
		targetRelationBeforeUpsertHooks = append(targetRelationBeforeUpsertHooks, targetRelationHook)
	case boil.AfterUpsertHook:
		targetRelationAfterUpsertHooks = append(targetRelationAfterUpsertHooks, targetRelationHook)
	}
}

// One returns a single targetRelation record from the query.
func (q targetRelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TargetRelation, error) {
	o := &TargetRelation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for target_relations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TargetRelation records from the query.
func (q targetRelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetRelationSlice, error) {
	var o []*TargetRelation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TargetRelation slice")
	}

	if len(targetRelationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TargetRelation records in the query.
func (q targetRelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count target_relations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetRelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if target_relations exists")
	}

	return count > 0, nil
}

// TidTargetDictionary pointed to by the foreign key.
func (o *TargetRelation) TidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.Tid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// RelatedTidTargetDictionary pointed to by the foreign key.
func (o *TargetRelation) RelatedTidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.RelatedTid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// LoadTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetRelationL) LoadTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetRelation interface{}, mods queries.Applicator) error {
	var slice []*TargetRelation
	var object *TargetRelation

	if singular {
		object = maybeTargetRelation.(*TargetRelation)
	} else {
		slice = *maybeTargetRelation.(*[]*TargetRelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetRelationR{}
		}
		args = append(args, object.Tid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetRelationR{}
			}

			for _, a := range args {
				if a == obj.Tid {
					continue Outer
				}
			}

			args = append(args, obj.Tid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(targetRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.TidTargetRelations = append(foreign.R.TidTargetRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tid == foreign.Tid {
				local.R.TidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.TidTargetRelations = append(foreign.R.TidTargetRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetRelationL) LoadRelatedTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargetRelation interface{}, mods queries.Applicator) error {
	var slice []*TargetRelation
	var object *TargetRelation

	if singular {
		object = maybeTargetRelation.(*TargetRelation)
	} else {
		slice = *maybeTargetRelation.(*[]*TargetRelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &targetRelationR{}
		}
		args = append(args, object.RelatedTid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetRelationR{}
			}

			for _, a := range args {
				if a == obj.RelatedTid {
					continue Outer
				}
			}

			args = append(args, obj.RelatedTid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(targetRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedTidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.RelatedTidTargetRelations = append(foreign.R.RelatedTidTargetRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RelatedTid == foreign.Tid {
				local.R.RelatedTidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.RelatedTidTargetRelations = append(foreign.R.RelatedTidTargetRelations, local)
				break
			}
		}
	}

	return nil
}

// SetTidTargetDictionary of the targetRelation to the related item.
// Sets o.R.TidTargetDictionary to related.
// Adds o to related.R.TidTargetRelations.
func (o *TargetRelation) SetTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tid"}),
		strmangle.WhereClause("\"", "\"", 0, targetRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.TargrelID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tid = related.Tid
	if o.R == nil {
		o.R = &targetRelationR{
			TidTargetDictionary: related,
		}
	} else {
		o.R.TidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			TidTargetRelations: TargetRelationSlice{o},
		}
	} else {
		related.R.TidTargetRelations = append(related.R.TidTargetRelations, o)
	}

	return nil
}

// SetRelatedTidTargetDictionary of the targetRelation to the related item.
// Sets o.R.RelatedTidTargetDictionary to related.
// Adds o to related.R.RelatedTidTargetRelations.
func (o *TargetRelation) SetRelatedTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"target_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"related_tid"}),
		strmangle.WhereClause("\"", "\"", 0, targetRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.TargrelID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RelatedTid = related.Tid
	if o.R == nil {
		o.R = &targetRelationR{
			RelatedTidTargetDictionary: related,
		}
	} else {
		o.R.RelatedTidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			RelatedTidTargetRelations: TargetRelationSlice{o},
		}
	} else {
		related.R.RelatedTidTargetRelations = append(related.R.RelatedTidTargetRelations, o)
	}

	return nil
}

// TargetRelations retrieves all the records using an executor.
func TargetRelations(mods ...qm.QueryMod) targetRelationQuery {
	mods = append(mods, qm.From("\"target_relations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"target_relations\".*"})
	}

	return targetRelationQuery{q}
}

// FindTargetRelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTargetRelation(ctx context.Context, exec boil.ContextExecutor, targrelID int64, selectCols ...string) (*TargetRelation, error) {
	targetRelationObj := &TargetRelation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"target_relations\" where \"targrel_id\"=?", sel,
	)

	q := queries.Raw(query, targrelID)

	err := q.Bind(ctx, exec, targetRelationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from target_relations")
	}

	if err = targetRelationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return targetRelationObj, err
	}

	return targetRelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TargetRelation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_relations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetRelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetRelationInsertCacheMut.RLock()
	cache, cached := targetRelationInsertCache[key]
	targetRelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetRelationAllColumns,
			targetRelationColumnsWithDefault,
			targetRelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetRelationType, targetRelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetRelationType, targetRelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"target_relations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"target_relations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into target_relations")
	}

	if !cached {
		targetRelationInsertCacheMut.Lock()
		targetRelationInsertCache[key] = cache
		targetRelationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TargetRelation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TargetRelation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetRelationUpdateCacheMut.RLock()
	cache, cached := targetRelationUpdateCache[key]
	targetRelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetRelationAllColumns,
			targetRelationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update target_relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"target_relations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, targetRelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetRelationType, targetRelationMapping, append(wl, targetRelationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update target_relations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for target_relations")
	}

	if !cached {
		targetRelationUpdateCacheMut.Lock()
		targetRelationUpdateCache[key] = cache
		targetRelationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetRelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for target_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for target_relations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetRelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"target_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetRelationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in targetRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all targetRelation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TargetRelation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no target_relations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetRelationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetRelationUpsertCacheMut.RLock()
	cache, cached := targetRelationUpsertCache[key]
	targetRelationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			targetRelationAllColumns,
			targetRelationColumnsWithDefault,
			targetRelationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			targetRelationAllColumns,
			targetRelationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert target_relations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(targetRelationPrimaryKeyColumns))
			copy(conflict, targetRelationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"target_relations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(targetRelationType, targetRelationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetRelationType, targetRelationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert target_relations")
	}

	if !cached {
		targetRelationUpsertCacheMut.Lock()
		targetRelationUpsertCache[key] = cache
		targetRelationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TargetRelation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TargetRelation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TargetRelation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetRelationPrimaryKeyMapping)
	sql := "DELETE FROM \"target_relations\" WHERE \"targrel_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from target_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for target_relations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetRelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetRelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from target_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_relations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetRelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetRelationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"target_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetRelationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targetRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for target_relations")
	}

	if len(targetRelationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TargetRelation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTargetRelation(ctx, exec, o.TargrelID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetRelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetRelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"target_relations\".* FROM \"target_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, targetRelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetRelationSlice")
	}

	*o = slice

	return nil
}

// TargetRelationExists checks if the TargetRelation row exists.
func TargetRelationExists(ctx context.Context, exec boil.ContextExecutor, targrelID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"target_relations\" where \"targrel_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, targrelID)
	}
	row := exec.QueryRowContext(ctx, sql, targrelID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if target_relations exists")
	}

	return exists, nil
}
