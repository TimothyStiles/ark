// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MoleculeIracClassification is an object representing the database table.
type MoleculeIracClassification struct {
	MolIracID   int64 `boil:"mol_irac_id" json:"mol_irac_id" toml:"mol_irac_id" yaml:"mol_irac_id"`
	IracClassID int64 `boil:"irac_class_id" json:"irac_class_id" toml:"irac_class_id" yaml:"irac_class_id"`
	Molregno    int64 `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`

	R *moleculeIracClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moleculeIracClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoleculeIracClassificationColumns = struct {
	MolIracID   string
	IracClassID string
	Molregno    string
}{
	MolIracID:   "mol_irac_id",
	IracClassID: "irac_class_id",
	Molregno:    "molregno",
}

var MoleculeIracClassificationTableColumns = struct {
	MolIracID   string
	IracClassID string
	Molregno    string
}{
	MolIracID:   "molecule_irac_classification.mol_irac_id",
	IracClassID: "molecule_irac_classification.irac_class_id",
	Molregno:    "molecule_irac_classification.molregno",
}

// Generated where

var MoleculeIracClassificationWhere = struct {
	MolIracID   whereHelperint64
	IracClassID whereHelperint64
	Molregno    whereHelperint64
}{
	MolIracID:   whereHelperint64{field: "\"molecule_irac_classification\".\"mol_irac_id\""},
	IracClassID: whereHelperint64{field: "\"molecule_irac_classification\".\"irac_class_id\""},
	Molregno:    whereHelperint64{field: "\"molecule_irac_classification\".\"molregno\""},
}

// MoleculeIracClassificationRels is where relationship names are stored.
var MoleculeIracClassificationRels = struct {
	MolregnoMoleculeDictionary string
	IracClass                  string
}{
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	IracClass:                  "IracClass",
}

// moleculeIracClassificationR is where relationships are stored.
type moleculeIracClassificationR struct {
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	IracClass                  *IracClassification `boil:"IracClass" json:"IracClass" toml:"IracClass" yaml:"IracClass"`
}

// NewStruct creates a new relationship struct
func (*moleculeIracClassificationR) NewStruct() *moleculeIracClassificationR {
	return &moleculeIracClassificationR{}
}

func (r *moleculeIracClassificationR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *moleculeIracClassificationR) GetIracClass() *IracClassification {
	if r == nil {
		return nil
	}
	return r.IracClass
}

// moleculeIracClassificationL is where Load methods for each relationship are stored.
type moleculeIracClassificationL struct{}

var (
	moleculeIracClassificationAllColumns            = []string{"mol_irac_id", "irac_class_id", "molregno"}
	moleculeIracClassificationColumnsWithoutDefault = []string{"mol_irac_id", "irac_class_id", "molregno"}
	moleculeIracClassificationColumnsWithDefault    = []string{}
	moleculeIracClassificationPrimaryKeyColumns     = []string{"mol_irac_id"}
	moleculeIracClassificationGeneratedColumns      = []string{}
)

type (
	// MoleculeIracClassificationSlice is an alias for a slice of pointers to MoleculeIracClassification.
	// This should almost always be used instead of []MoleculeIracClassification.
	MoleculeIracClassificationSlice []*MoleculeIracClassification
	// MoleculeIracClassificationHook is the signature for custom MoleculeIracClassification hook methods
	MoleculeIracClassificationHook func(context.Context, boil.ContextExecutor, *MoleculeIracClassification) error

	moleculeIracClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moleculeIracClassificationType                 = reflect.TypeOf(&MoleculeIracClassification{})
	moleculeIracClassificationMapping              = queries.MakeStructMapping(moleculeIracClassificationType)
	moleculeIracClassificationPrimaryKeyMapping, _ = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, moleculeIracClassificationPrimaryKeyColumns)
	moleculeIracClassificationInsertCacheMut       sync.RWMutex
	moleculeIracClassificationInsertCache          = make(map[string]insertCache)
	moleculeIracClassificationUpdateCacheMut       sync.RWMutex
	moleculeIracClassificationUpdateCache          = make(map[string]updateCache)
	moleculeIracClassificationUpsertCacheMut       sync.RWMutex
	moleculeIracClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moleculeIracClassificationAfterSelectHooks []MoleculeIracClassificationHook

var moleculeIracClassificationBeforeInsertHooks []MoleculeIracClassificationHook
var moleculeIracClassificationAfterInsertHooks []MoleculeIracClassificationHook

var moleculeIracClassificationBeforeUpdateHooks []MoleculeIracClassificationHook
var moleculeIracClassificationAfterUpdateHooks []MoleculeIracClassificationHook

var moleculeIracClassificationBeforeDeleteHooks []MoleculeIracClassificationHook
var moleculeIracClassificationAfterDeleteHooks []MoleculeIracClassificationHook

var moleculeIracClassificationBeforeUpsertHooks []MoleculeIracClassificationHook
var moleculeIracClassificationAfterUpsertHooks []MoleculeIracClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MoleculeIracClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MoleculeIracClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MoleculeIracClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MoleculeIracClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MoleculeIracClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MoleculeIracClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MoleculeIracClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MoleculeIracClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MoleculeIracClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeIracClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoleculeIracClassificationHook registers your hook function for all future operations.
func AddMoleculeIracClassificationHook(hookPoint boil.HookPoint, moleculeIracClassificationHook MoleculeIracClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moleculeIracClassificationAfterSelectHooks = append(moleculeIracClassificationAfterSelectHooks, moleculeIracClassificationHook)
	case boil.BeforeInsertHook:
		moleculeIracClassificationBeforeInsertHooks = append(moleculeIracClassificationBeforeInsertHooks, moleculeIracClassificationHook)
	case boil.AfterInsertHook:
		moleculeIracClassificationAfterInsertHooks = append(moleculeIracClassificationAfterInsertHooks, moleculeIracClassificationHook)
	case boil.BeforeUpdateHook:
		moleculeIracClassificationBeforeUpdateHooks = append(moleculeIracClassificationBeforeUpdateHooks, moleculeIracClassificationHook)
	case boil.AfterUpdateHook:
		moleculeIracClassificationAfterUpdateHooks = append(moleculeIracClassificationAfterUpdateHooks, moleculeIracClassificationHook)
	case boil.BeforeDeleteHook:
		moleculeIracClassificationBeforeDeleteHooks = append(moleculeIracClassificationBeforeDeleteHooks, moleculeIracClassificationHook)
	case boil.AfterDeleteHook:
		moleculeIracClassificationAfterDeleteHooks = append(moleculeIracClassificationAfterDeleteHooks, moleculeIracClassificationHook)
	case boil.BeforeUpsertHook:
		moleculeIracClassificationBeforeUpsertHooks = append(moleculeIracClassificationBeforeUpsertHooks, moleculeIracClassificationHook)
	case boil.AfterUpsertHook:
		moleculeIracClassificationAfterUpsertHooks = append(moleculeIracClassificationAfterUpsertHooks, moleculeIracClassificationHook)
	}
}

// One returns a single moleculeIracClassification record from the query.
func (q moleculeIracClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MoleculeIracClassification, error) {
	o := &MoleculeIracClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for molecule_irac_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MoleculeIracClassification records from the query.
func (q moleculeIracClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoleculeIracClassificationSlice, error) {
	var o []*MoleculeIracClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MoleculeIracClassification slice")
	}

	if len(moleculeIracClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MoleculeIracClassification records in the query.
func (q moleculeIracClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count molecule_irac_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q moleculeIracClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if molecule_irac_classification exists")
	}

	return count > 0, nil
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeIracClassification) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// IracClass pointed to by the foreign key.
func (o *MoleculeIracClassification) IracClass(mods ...qm.QueryMod) iracClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"irac_class_id\" = ?", o.IracClassID),
	}

	queryMods = append(queryMods, mods...)

	return IracClassifications(queryMods...)
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeIracClassificationL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeIracClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeIracClassification
	var object *MoleculeIracClassification

	if singular {
		object = maybeMoleculeIracClassification.(*MoleculeIracClassification)
	} else {
		slice = *maybeMoleculeIracClassification.(*[]*MoleculeIracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeIracClassificationR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeIracClassificationR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeIracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoMoleculeIracClassifications = append(foreign.R.MolregnoMoleculeIracClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoMoleculeIracClassifications = append(foreign.R.MolregnoMoleculeIracClassifications, local)
				break
			}
		}
	}

	return nil
}

// LoadIracClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeIracClassificationL) LoadIracClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeIracClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeIracClassification
	var object *MoleculeIracClassification

	if singular {
		object = maybeMoleculeIracClassification.(*MoleculeIracClassification)
	} else {
		slice = *maybeMoleculeIracClassification.(*[]*MoleculeIracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeIracClassificationR{}
		}
		args = append(args, object.IracClassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeIracClassificationR{}
			}

			for _, a := range args {
				if a == obj.IracClassID {
					continue Outer
				}
			}

			args = append(args, obj.IracClassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`irac_classification`),
		qm.WhereIn(`irac_classification.irac_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IracClassification")
	}

	var resultSlice []*IracClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IracClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for irac_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for irac_classification")
	}

	if len(moleculeIracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IracClass = foreign
		if foreign.R == nil {
			foreign.R = &iracClassificationR{}
		}
		foreign.R.IracClassMoleculeIracClassifications = append(foreign.R.IracClassMoleculeIracClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IracClassID == foreign.IracClassID {
				local.R.IracClass = foreign
				if foreign.R == nil {
					foreign.R = &iracClassificationR{}
				}
				foreign.R.IracClassMoleculeIracClassifications = append(foreign.R.IracClassMoleculeIracClassifications, local)
				break
			}
		}
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the moleculeIracClassification to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoMoleculeIracClassifications.
func (o *MoleculeIracClassification) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_irac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeIracClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.MolIracID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &moleculeIracClassificationR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoMoleculeIracClassifications: MoleculeIracClassificationSlice{o},
		}
	} else {
		related.R.MolregnoMoleculeIracClassifications = append(related.R.MolregnoMoleculeIracClassifications, o)
	}

	return nil
}

// SetIracClass of the moleculeIracClassification to the related item.
// Sets o.R.IracClass to related.
// Adds o to related.R.IracClassMoleculeIracClassifications.
func (o *MoleculeIracClassification) SetIracClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IracClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_irac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"irac_class_id"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeIracClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.IracClassID, o.MolIracID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IracClassID = related.IracClassID
	if o.R == nil {
		o.R = &moleculeIracClassificationR{
			IracClass: related,
		}
	} else {
		o.R.IracClass = related
	}

	if related.R == nil {
		related.R = &iracClassificationR{
			IracClassMoleculeIracClassifications: MoleculeIracClassificationSlice{o},
		}
	} else {
		related.R.IracClassMoleculeIracClassifications = append(related.R.IracClassMoleculeIracClassifications, o)
	}

	return nil
}

// MoleculeIracClassifications retrieves all the records using an executor.
func MoleculeIracClassifications(mods ...qm.QueryMod) moleculeIracClassificationQuery {
	mods = append(mods, qm.From("\"molecule_irac_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"molecule_irac_classification\".*"})
	}

	return moleculeIracClassificationQuery{q}
}

// FindMoleculeIracClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoleculeIracClassification(ctx context.Context, exec boil.ContextExecutor, molIracID int64, selectCols ...string) (*MoleculeIracClassification, error) {
	moleculeIracClassificationObj := &MoleculeIracClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"molecule_irac_classification\" where \"mol_irac_id\"=?", sel,
	)

	q := queries.Raw(query, molIracID)

	err := q.Bind(ctx, exec, moleculeIracClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from molecule_irac_classification")
	}

	if err = moleculeIracClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moleculeIracClassificationObj, err
	}

	return moleculeIracClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MoleculeIracClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_irac_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeIracClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moleculeIracClassificationInsertCacheMut.RLock()
	cache, cached := moleculeIracClassificationInsertCache[key]
	moleculeIracClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moleculeIracClassificationAllColumns,
			moleculeIracClassificationColumnsWithDefault,
			moleculeIracClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"molecule_irac_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"molecule_irac_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into molecule_irac_classification")
	}

	if !cached {
		moleculeIracClassificationInsertCacheMut.Lock()
		moleculeIracClassificationInsertCache[key] = cache
		moleculeIracClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MoleculeIracClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MoleculeIracClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moleculeIracClassificationUpdateCacheMut.RLock()
	cache, cached := moleculeIracClassificationUpdateCache[key]
	moleculeIracClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moleculeIracClassificationAllColumns,
			moleculeIracClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update molecule_irac_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"molecule_irac_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, moleculeIracClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, append(wl, moleculeIracClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update molecule_irac_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for molecule_irac_classification")
	}

	if !cached {
		moleculeIracClassificationUpdateCacheMut.Lock()
		moleculeIracClassificationUpdateCache[key] = cache
		moleculeIracClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q moleculeIracClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for molecule_irac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for molecule_irac_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoleculeIracClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeIracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"molecule_irac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeIracClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moleculeIracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moleculeIracClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MoleculeIracClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_irac_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeIracClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moleculeIracClassificationUpsertCacheMut.RLock()
	cache, cached := moleculeIracClassificationUpsertCache[key]
	moleculeIracClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			moleculeIracClassificationAllColumns,
			moleculeIracClassificationColumnsWithDefault,
			moleculeIracClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			moleculeIracClassificationAllColumns,
			moleculeIracClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert molecule_irac_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(moleculeIracClassificationPrimaryKeyColumns))
			copy(conflict, moleculeIracClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"molecule_irac_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moleculeIracClassificationType, moleculeIracClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert molecule_irac_classification")
	}

	if !cached {
		moleculeIracClassificationUpsertCacheMut.Lock()
		moleculeIracClassificationUpsertCache[key] = cache
		moleculeIracClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MoleculeIracClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MoleculeIracClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MoleculeIracClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moleculeIracClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"molecule_irac_classification\" WHERE \"mol_irac_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from molecule_irac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for molecule_irac_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q moleculeIracClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moleculeIracClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from molecule_irac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_irac_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoleculeIracClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moleculeIracClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeIracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"molecule_irac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeIracClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moleculeIracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_irac_classification")
	}

	if len(moleculeIracClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MoleculeIracClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoleculeIracClassification(ctx, exec, o.MolIracID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoleculeIracClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoleculeIracClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeIracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"molecule_irac_classification\".* FROM \"molecule_irac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeIracClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MoleculeIracClassificationSlice")
	}

	*o = slice

	return nil
}

// MoleculeIracClassificationExists checks if the MoleculeIracClassification row exists.
func MoleculeIracClassificationExists(ctx context.Context, exec boil.ContextExecutor, molIracID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"molecule_irac_classification\" where \"mol_irac_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, molIracID)
	}
	row := exec.QueryRowContext(ctx, sql, molIracID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if molecule_irac_classification exists")
	}

	return exists, nil
}
