// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AtcClassification is an object representing the database table.
type AtcClassification struct {
	WhoName           null.String `boil:"who_name" json:"who_name,omitempty" toml:"who_name" yaml:"who_name,omitempty"`
	Level1            null.String `boil:"level1" json:"level1,omitempty" toml:"level1" yaml:"level1,omitempty"`
	Level2            null.String `boil:"level2" json:"level2,omitempty" toml:"level2" yaml:"level2,omitempty"`
	Level3            null.String `boil:"level3" json:"level3,omitempty" toml:"level3" yaml:"level3,omitempty"`
	Level4            null.String `boil:"level4" json:"level4,omitempty" toml:"level4" yaml:"level4,omitempty"`
	Level5            string      `boil:"level5" json:"level5" toml:"level5" yaml:"level5"`
	Level1Description null.String `boil:"level1_description" json:"level1_description,omitempty" toml:"level1_description" yaml:"level1_description,omitempty"`
	Level2Description null.String `boil:"level2_description" json:"level2_description,omitempty" toml:"level2_description" yaml:"level2_description,omitempty"`
	Level3Description null.String `boil:"level3_description" json:"level3_description,omitempty" toml:"level3_description" yaml:"level3_description,omitempty"`
	Level4Description null.String `boil:"level4_description" json:"level4_description,omitempty" toml:"level4_description" yaml:"level4_description,omitempty"`

	R *atcClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L atcClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AtcClassificationColumns = struct {
	WhoName           string
	Level1            string
	Level2            string
	Level3            string
	Level4            string
	Level5            string
	Level1Description string
	Level2Description string
	Level3Description string
	Level4Description string
}{
	WhoName:           "who_name",
	Level1:            "level1",
	Level2:            "level2",
	Level3:            "level3",
	Level4:            "level4",
	Level5:            "level5",
	Level1Description: "level1_description",
	Level2Description: "level2_description",
	Level3Description: "level3_description",
	Level4Description: "level4_description",
}

var AtcClassificationTableColumns = struct {
	WhoName           string
	Level1            string
	Level2            string
	Level3            string
	Level4            string
	Level5            string
	Level1Description string
	Level2Description string
	Level3Description string
	Level4Description string
}{
	WhoName:           "atc_classification.who_name",
	Level1:            "atc_classification.level1",
	Level2:            "atc_classification.level2",
	Level3:            "atc_classification.level3",
	Level4:            "atc_classification.level4",
	Level5:            "atc_classification.level5",
	Level1Description: "atc_classification.level1_description",
	Level2Description: "atc_classification.level2_description",
	Level3Description: "atc_classification.level3_description",
	Level4Description: "atc_classification.level4_description",
}

// Generated where

var AtcClassificationWhere = struct {
	WhoName           whereHelpernull_String
	Level1            whereHelpernull_String
	Level2            whereHelpernull_String
	Level3            whereHelpernull_String
	Level4            whereHelpernull_String
	Level5            whereHelperstring
	Level1Description whereHelpernull_String
	Level2Description whereHelpernull_String
	Level3Description whereHelpernull_String
	Level4Description whereHelpernull_String
}{
	WhoName:           whereHelpernull_String{field: "\"atc_classification\".\"who_name\""},
	Level1:            whereHelpernull_String{field: "\"atc_classification\".\"level1\""},
	Level2:            whereHelpernull_String{field: "\"atc_classification\".\"level2\""},
	Level3:            whereHelpernull_String{field: "\"atc_classification\".\"level3\""},
	Level4:            whereHelpernull_String{field: "\"atc_classification\".\"level4\""},
	Level5:            whereHelperstring{field: "\"atc_classification\".\"level5\""},
	Level1Description: whereHelpernull_String{field: "\"atc_classification\".\"level1_description\""},
	Level2Description: whereHelpernull_String{field: "\"atc_classification\".\"level2_description\""},
	Level3Description: whereHelpernull_String{field: "\"atc_classification\".\"level3_description\""},
	Level4Description: whereHelpernull_String{field: "\"atc_classification\".\"level4_description\""},
}

// AtcClassificationRels is where relationship names are stored.
var AtcClassificationRels = struct {
	AtcCodeDefinedDailyDoses         string
	Level5MoleculeAtcClassifications string
}{
	AtcCodeDefinedDailyDoses:         "AtcCodeDefinedDailyDoses",
	Level5MoleculeAtcClassifications: "Level5MoleculeAtcClassifications",
}

// atcClassificationR is where relationships are stored.
type atcClassificationR struct {
	AtcCodeDefinedDailyDoses         DefinedDailyDoseSlice          `boil:"AtcCodeDefinedDailyDoses" json:"AtcCodeDefinedDailyDoses" toml:"AtcCodeDefinedDailyDoses" yaml:"AtcCodeDefinedDailyDoses"`
	Level5MoleculeAtcClassifications MoleculeAtcClassificationSlice `boil:"Level5MoleculeAtcClassifications" json:"Level5MoleculeAtcClassifications" toml:"Level5MoleculeAtcClassifications" yaml:"Level5MoleculeAtcClassifications"`
}

// NewStruct creates a new relationship struct
func (*atcClassificationR) NewStruct() *atcClassificationR {
	return &atcClassificationR{}
}

func (r *atcClassificationR) GetAtcCodeDefinedDailyDoses() DefinedDailyDoseSlice {
	if r == nil {
		return nil
	}
	return r.AtcCodeDefinedDailyDoses
}

func (r *atcClassificationR) GetLevel5MoleculeAtcClassifications() MoleculeAtcClassificationSlice {
	if r == nil {
		return nil
	}
	return r.Level5MoleculeAtcClassifications
}

// atcClassificationL is where Load methods for each relationship are stored.
type atcClassificationL struct{}

var (
	atcClassificationAllColumns            = []string{"who_name", "level1", "level2", "level3", "level4", "level5", "level1_description", "level2_description", "level3_description", "level4_description"}
	atcClassificationColumnsWithoutDefault = []string{"level5"}
	atcClassificationColumnsWithDefault    = []string{"who_name", "level1", "level2", "level3", "level4", "level1_description", "level2_description", "level3_description", "level4_description"}
	atcClassificationPrimaryKeyColumns     = []string{"level5"}
	atcClassificationGeneratedColumns      = []string{}
)

type (
	// AtcClassificationSlice is an alias for a slice of pointers to AtcClassification.
	// This should almost always be used instead of []AtcClassification.
	AtcClassificationSlice []*AtcClassification
	// AtcClassificationHook is the signature for custom AtcClassification hook methods
	AtcClassificationHook func(context.Context, boil.ContextExecutor, *AtcClassification) error

	atcClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	atcClassificationType                 = reflect.TypeOf(&AtcClassification{})
	atcClassificationMapping              = queries.MakeStructMapping(atcClassificationType)
	atcClassificationPrimaryKeyMapping, _ = queries.BindMapping(atcClassificationType, atcClassificationMapping, atcClassificationPrimaryKeyColumns)
	atcClassificationInsertCacheMut       sync.RWMutex
	atcClassificationInsertCache          = make(map[string]insertCache)
	atcClassificationUpdateCacheMut       sync.RWMutex
	atcClassificationUpdateCache          = make(map[string]updateCache)
	atcClassificationUpsertCacheMut       sync.RWMutex
	atcClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var atcClassificationAfterSelectHooks []AtcClassificationHook

var atcClassificationBeforeInsertHooks []AtcClassificationHook
var atcClassificationAfterInsertHooks []AtcClassificationHook

var atcClassificationBeforeUpdateHooks []AtcClassificationHook
var atcClassificationAfterUpdateHooks []AtcClassificationHook

var atcClassificationBeforeDeleteHooks []AtcClassificationHook
var atcClassificationAfterDeleteHooks []AtcClassificationHook

var atcClassificationBeforeUpsertHooks []AtcClassificationHook
var atcClassificationAfterUpsertHooks []AtcClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AtcClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AtcClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AtcClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AtcClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AtcClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AtcClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AtcClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AtcClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AtcClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range atcClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAtcClassificationHook registers your hook function for all future operations.
func AddAtcClassificationHook(hookPoint boil.HookPoint, atcClassificationHook AtcClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		atcClassificationAfterSelectHooks = append(atcClassificationAfterSelectHooks, atcClassificationHook)
	case boil.BeforeInsertHook:
		atcClassificationBeforeInsertHooks = append(atcClassificationBeforeInsertHooks, atcClassificationHook)
	case boil.AfterInsertHook:
		atcClassificationAfterInsertHooks = append(atcClassificationAfterInsertHooks, atcClassificationHook)
	case boil.BeforeUpdateHook:
		atcClassificationBeforeUpdateHooks = append(atcClassificationBeforeUpdateHooks, atcClassificationHook)
	case boil.AfterUpdateHook:
		atcClassificationAfterUpdateHooks = append(atcClassificationAfterUpdateHooks, atcClassificationHook)
	case boil.BeforeDeleteHook:
		atcClassificationBeforeDeleteHooks = append(atcClassificationBeforeDeleteHooks, atcClassificationHook)
	case boil.AfterDeleteHook:
		atcClassificationAfterDeleteHooks = append(atcClassificationAfterDeleteHooks, atcClassificationHook)
	case boil.BeforeUpsertHook:
		atcClassificationBeforeUpsertHooks = append(atcClassificationBeforeUpsertHooks, atcClassificationHook)
	case boil.AfterUpsertHook:
		atcClassificationAfterUpsertHooks = append(atcClassificationAfterUpsertHooks, atcClassificationHook)
	}
}

// One returns a single atcClassification record from the query.
func (q atcClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AtcClassification, error) {
	o := &AtcClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for atc_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AtcClassification records from the query.
func (q atcClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AtcClassificationSlice, error) {
	var o []*AtcClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AtcClassification slice")
	}

	if len(atcClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AtcClassification records in the query.
func (q atcClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count atc_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q atcClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if atc_classification exists")
	}

	return count > 0, nil
}

// AtcCodeDefinedDailyDoses retrieves all the defined_daily_dose's DefinedDailyDoses with an executor via atc_code column.
func (o *AtcClassification) AtcCodeDefinedDailyDoses(mods ...qm.QueryMod) definedDailyDoseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"defined_daily_dose\".\"atc_code\"=?", o.Level5),
	)

	return DefinedDailyDoses(queryMods...)
}

// Level5MoleculeAtcClassifications retrieves all the molecule_atc_classification's MoleculeAtcClassifications with an executor via level5 column.
func (o *AtcClassification) Level5MoleculeAtcClassifications(mods ...qm.QueryMod) moleculeAtcClassificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"molecule_atc_classification\".\"level5\"=?", o.Level5),
	)

	return MoleculeAtcClassifications(queryMods...)
}

// LoadAtcCodeDefinedDailyDoses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (atcClassificationL) LoadAtcCodeDefinedDailyDoses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAtcClassification interface{}, mods queries.Applicator) error {
	var slice []*AtcClassification
	var object *AtcClassification

	if singular {
		object = maybeAtcClassification.(*AtcClassification)
	} else {
		slice = *maybeAtcClassification.(*[]*AtcClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &atcClassificationR{}
		}
		args = append(args, object.Level5)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &atcClassificationR{}
			}

			for _, a := range args {
				if a == obj.Level5 {
					continue Outer
				}
			}

			args = append(args, obj.Level5)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`defined_daily_dose`),
		qm.WhereIn(`defined_daily_dose.atc_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load defined_daily_dose")
	}

	var resultSlice []*DefinedDailyDose
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice defined_daily_dose")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on defined_daily_dose")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for defined_daily_dose")
	}

	if len(definedDailyDoseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AtcCodeDefinedDailyDoses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &definedDailyDoseR{}
			}
			foreign.R.AtcCodeAtcClassification = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Level5 == foreign.AtcCode {
				local.R.AtcCodeDefinedDailyDoses = append(local.R.AtcCodeDefinedDailyDoses, foreign)
				if foreign.R == nil {
					foreign.R = &definedDailyDoseR{}
				}
				foreign.R.AtcCodeAtcClassification = local
				break
			}
		}
	}

	return nil
}

// LoadLevel5MoleculeAtcClassifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (atcClassificationL) LoadLevel5MoleculeAtcClassifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAtcClassification interface{}, mods queries.Applicator) error {
	var slice []*AtcClassification
	var object *AtcClassification

	if singular {
		object = maybeAtcClassification.(*AtcClassification)
	} else {
		slice = *maybeAtcClassification.(*[]*AtcClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &atcClassificationR{}
		}
		args = append(args, object.Level5)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &atcClassificationR{}
			}

			for _, a := range args {
				if a == obj.Level5 {
					continue Outer
				}
			}

			args = append(args, obj.Level5)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_atc_classification`),
		qm.WhereIn(`molecule_atc_classification.level5 in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load molecule_atc_classification")
	}

	var resultSlice []*MoleculeAtcClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice molecule_atc_classification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on molecule_atc_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_atc_classification")
	}

	if len(moleculeAtcClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Level5MoleculeAtcClassifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moleculeAtcClassificationR{}
			}
			foreign.R.Level5AtcClassification = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Level5 == foreign.Level5 {
				local.R.Level5MoleculeAtcClassifications = append(local.R.Level5MoleculeAtcClassifications, foreign)
				if foreign.R == nil {
					foreign.R = &moleculeAtcClassificationR{}
				}
				foreign.R.Level5AtcClassification = local
				break
			}
		}
	}

	return nil
}

// AddAtcCodeDefinedDailyDoses adds the given related objects to the existing relationships
// of the atc_classification, optionally inserting them as new records.
// Appends related to o.R.AtcCodeDefinedDailyDoses.
// Sets related.R.AtcCodeAtcClassification appropriately.
func (o *AtcClassification) AddAtcCodeDefinedDailyDoses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DefinedDailyDose) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AtcCode = o.Level5
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"defined_daily_dose\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"atc_code"}),
				strmangle.WhereClause("\"", "\"", 0, definedDailyDosePrimaryKeyColumns),
			)
			values := []interface{}{o.Level5, rel.DDDID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AtcCode = o.Level5
		}
	}

	if o.R == nil {
		o.R = &atcClassificationR{
			AtcCodeDefinedDailyDoses: related,
		}
	} else {
		o.R.AtcCodeDefinedDailyDoses = append(o.R.AtcCodeDefinedDailyDoses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &definedDailyDoseR{
				AtcCodeAtcClassification: o,
			}
		} else {
			rel.R.AtcCodeAtcClassification = o
		}
	}
	return nil
}

// AddLevel5MoleculeAtcClassifications adds the given related objects to the existing relationships
// of the atc_classification, optionally inserting them as new records.
// Appends related to o.R.Level5MoleculeAtcClassifications.
// Sets related.R.Level5AtcClassification appropriately.
func (o *AtcClassification) AddLevel5MoleculeAtcClassifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MoleculeAtcClassification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Level5 = o.Level5
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"molecule_atc_classification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"level5"}),
				strmangle.WhereClause("\"", "\"", 0, moleculeAtcClassificationPrimaryKeyColumns),
			)
			values := []interface{}{o.Level5, rel.MolAtcID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Level5 = o.Level5
		}
	}

	if o.R == nil {
		o.R = &atcClassificationR{
			Level5MoleculeAtcClassifications: related,
		}
	} else {
		o.R.Level5MoleculeAtcClassifications = append(o.R.Level5MoleculeAtcClassifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moleculeAtcClassificationR{
				Level5AtcClassification: o,
			}
		} else {
			rel.R.Level5AtcClassification = o
		}
	}
	return nil
}

// AtcClassifications retrieves all the records using an executor.
func AtcClassifications(mods ...qm.QueryMod) atcClassificationQuery {
	mods = append(mods, qm.From("\"atc_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"atc_classification\".*"})
	}

	return atcClassificationQuery{q}
}

// FindAtcClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAtcClassification(ctx context.Context, exec boil.ContextExecutor, level5 string, selectCols ...string) (*AtcClassification, error) {
	atcClassificationObj := &AtcClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"atc_classification\" where \"level5\"=?", sel,
	)

	q := queries.Raw(query, level5)

	err := q.Bind(ctx, exec, atcClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from atc_classification")
	}

	if err = atcClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return atcClassificationObj, err
	}

	return atcClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AtcClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no atc_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(atcClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	atcClassificationInsertCacheMut.RLock()
	cache, cached := atcClassificationInsertCache[key]
	atcClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			atcClassificationAllColumns,
			atcClassificationColumnsWithDefault,
			atcClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(atcClassificationType, atcClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(atcClassificationType, atcClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"atc_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"atc_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into atc_classification")
	}

	if !cached {
		atcClassificationInsertCacheMut.Lock()
		atcClassificationInsertCache[key] = cache
		atcClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AtcClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AtcClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	atcClassificationUpdateCacheMut.RLock()
	cache, cached := atcClassificationUpdateCache[key]
	atcClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			atcClassificationAllColumns,
			atcClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update atc_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"atc_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, atcClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(atcClassificationType, atcClassificationMapping, append(wl, atcClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update atc_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for atc_classification")
	}

	if !cached {
		atcClassificationUpdateCacheMut.Lock()
		atcClassificationUpdateCache[key] = cache
		atcClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q atcClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for atc_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AtcClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), atcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"atc_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, atcClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in atcClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all atcClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AtcClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no atc_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(atcClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	atcClassificationUpsertCacheMut.RLock()
	cache, cached := atcClassificationUpsertCache[key]
	atcClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			atcClassificationAllColumns,
			atcClassificationColumnsWithDefault,
			atcClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			atcClassificationAllColumns,
			atcClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert atc_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(atcClassificationPrimaryKeyColumns))
			copy(conflict, atcClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"atc_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(atcClassificationType, atcClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(atcClassificationType, atcClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert atc_classification")
	}

	if !cached {
		atcClassificationUpsertCacheMut.Lock()
		atcClassificationUpsertCache[key] = cache
		atcClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AtcClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AtcClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AtcClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), atcClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"atc_classification\" WHERE \"level5\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for atc_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q atcClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no atcClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for atc_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AtcClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(atcClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), atcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"atc_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, atcClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from atcClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for atc_classification")
	}

	if len(atcClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AtcClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAtcClassification(ctx, exec, o.Level5)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AtcClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AtcClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), atcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"atc_classification\".* FROM \"atc_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, atcClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AtcClassificationSlice")
	}

	*o = slice

	return nil
}

// AtcClassificationExists checks if the AtcClassification row exists.
func AtcClassificationExists(ctx context.Context, exec boil.ContextExecutor, level5 string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"atc_classification\" where \"level5\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, level5)
	}
	row := exec.QueryRowContext(ctx, sql, level5)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if atc_classification exists")
	}

	return exists, nil
}
