// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductPatent is an object representing the database table.
type ProductPatent struct {
	ProdPatID         int64       `boil:"prod_pat_id" json:"prod_pat_id" toml:"prod_pat_id" yaml:"prod_pat_id"`
	ProductID         string      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	PatentNo          string      `boil:"patent_no" json:"patent_no" toml:"patent_no" yaml:"patent_no"`
	PatentExpireDate  time.Time   `boil:"patent_expire_date" json:"patent_expire_date" toml:"patent_expire_date" yaml:"patent_expire_date"`
	DrugSubstanceFlag int16       `boil:"drug_substance_flag" json:"drug_substance_flag" toml:"drug_substance_flag" yaml:"drug_substance_flag"`
	DrugProductFlag   int16       `boil:"drug_product_flag" json:"drug_product_flag" toml:"drug_product_flag" yaml:"drug_product_flag"`
	PatentUseCode     null.String `boil:"patent_use_code" json:"patent_use_code,omitempty" toml:"patent_use_code" yaml:"patent_use_code,omitempty"`
	DelistFlag        int16       `boil:"delist_flag" json:"delist_flag" toml:"delist_flag" yaml:"delist_flag"`
	SubmissionDate    null.Time   `boil:"submission_date" json:"submission_date,omitempty" toml:"submission_date" yaml:"submission_date,omitempty"`

	R *productPatentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productPatentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductPatentColumns = struct {
	ProdPatID         string
	ProductID         string
	PatentNo          string
	PatentExpireDate  string
	DrugSubstanceFlag string
	DrugProductFlag   string
	PatentUseCode     string
	DelistFlag        string
	SubmissionDate    string
}{
	ProdPatID:         "prod_pat_id",
	ProductID:         "product_id",
	PatentNo:          "patent_no",
	PatentExpireDate:  "patent_expire_date",
	DrugSubstanceFlag: "drug_substance_flag",
	DrugProductFlag:   "drug_product_flag",
	PatentUseCode:     "patent_use_code",
	DelistFlag:        "delist_flag",
	SubmissionDate:    "submission_date",
}

var ProductPatentTableColumns = struct {
	ProdPatID         string
	ProductID         string
	PatentNo          string
	PatentExpireDate  string
	DrugSubstanceFlag string
	DrugProductFlag   string
	PatentUseCode     string
	DelistFlag        string
	SubmissionDate    string
}{
	ProdPatID:         "product_patents.prod_pat_id",
	ProductID:         "product_patents.product_id",
	PatentNo:          "product_patents.patent_no",
	PatentExpireDate:  "product_patents.patent_expire_date",
	DrugSubstanceFlag: "product_patents.drug_substance_flag",
	DrugProductFlag:   "product_patents.drug_product_flag",
	PatentUseCode:     "product_patents.patent_use_code",
	DelistFlag:        "product_patents.delist_flag",
	SubmissionDate:    "product_patents.submission_date",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProductPatentWhere = struct {
	ProdPatID         whereHelperint64
	ProductID         whereHelperstring
	PatentNo          whereHelperstring
	PatentExpireDate  whereHelpertime_Time
	DrugSubstanceFlag whereHelperint16
	DrugProductFlag   whereHelperint16
	PatentUseCode     whereHelpernull_String
	DelistFlag        whereHelperint16
	SubmissionDate    whereHelpernull_Time
}{
	ProdPatID:         whereHelperint64{field: "\"product_patents\".\"prod_pat_id\""},
	ProductID:         whereHelperstring{field: "\"product_patents\".\"product_id\""},
	PatentNo:          whereHelperstring{field: "\"product_patents\".\"patent_no\""},
	PatentExpireDate:  whereHelpertime_Time{field: "\"product_patents\".\"patent_expire_date\""},
	DrugSubstanceFlag: whereHelperint16{field: "\"product_patents\".\"drug_substance_flag\""},
	DrugProductFlag:   whereHelperint16{field: "\"product_patents\".\"drug_product_flag\""},
	PatentUseCode:     whereHelpernull_String{field: "\"product_patents\".\"patent_use_code\""},
	DelistFlag:        whereHelperint16{field: "\"product_patents\".\"delist_flag\""},
	SubmissionDate:    whereHelpernull_Time{field: "\"product_patents\".\"submission_date\""},
}

// ProductPatentRels is where relationship names are stored.
var ProductPatentRels = struct {
	ProductPatentPatentUseCode string
	Product                    string
}{
	ProductPatentPatentUseCode: "ProductPatentPatentUseCode",
	Product:                    "Product",
}

// productPatentR is where relationships are stored.
type productPatentR struct {
	ProductPatentPatentUseCode *PatentUseCode `boil:"ProductPatentPatentUseCode" json:"ProductPatentPatentUseCode" toml:"ProductPatentPatentUseCode" yaml:"ProductPatentPatentUseCode"`
	Product                    *Product       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productPatentR) NewStruct() *productPatentR {
	return &productPatentR{}
}

func (r *productPatentR) GetProductPatentPatentUseCode() *PatentUseCode {
	if r == nil {
		return nil
	}
	return r.ProductPatentPatentUseCode
}

func (r *productPatentR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// productPatentL is where Load methods for each relationship are stored.
type productPatentL struct{}

var (
	productPatentAllColumns            = []string{"prod_pat_id", "product_id", "patent_no", "patent_expire_date", "drug_substance_flag", "drug_product_flag", "patent_use_code", "delist_flag", "submission_date"}
	productPatentColumnsWithoutDefault = []string{"prod_pat_id", "product_id", "patent_no", "patent_expire_date", "drug_substance_flag", "drug_product_flag", "delist_flag"}
	productPatentColumnsWithDefault    = []string{"patent_use_code", "submission_date"}
	productPatentPrimaryKeyColumns     = []string{"prod_pat_id"}
	productPatentGeneratedColumns      = []string{}
)

type (
	// ProductPatentSlice is an alias for a slice of pointers to ProductPatent.
	// This should almost always be used instead of []ProductPatent.
	ProductPatentSlice []*ProductPatent
	// ProductPatentHook is the signature for custom ProductPatent hook methods
	ProductPatentHook func(context.Context, boil.ContextExecutor, *ProductPatent) error

	productPatentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productPatentType                 = reflect.TypeOf(&ProductPatent{})
	productPatentMapping              = queries.MakeStructMapping(productPatentType)
	productPatentPrimaryKeyMapping, _ = queries.BindMapping(productPatentType, productPatentMapping, productPatentPrimaryKeyColumns)
	productPatentInsertCacheMut       sync.RWMutex
	productPatentInsertCache          = make(map[string]insertCache)
	productPatentUpdateCacheMut       sync.RWMutex
	productPatentUpdateCache          = make(map[string]updateCache)
	productPatentUpsertCacheMut       sync.RWMutex
	productPatentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productPatentAfterSelectHooks []ProductPatentHook

var productPatentBeforeInsertHooks []ProductPatentHook
var productPatentAfterInsertHooks []ProductPatentHook

var productPatentBeforeUpdateHooks []ProductPatentHook
var productPatentAfterUpdateHooks []ProductPatentHook

var productPatentBeforeDeleteHooks []ProductPatentHook
var productPatentAfterDeleteHooks []ProductPatentHook

var productPatentBeforeUpsertHooks []ProductPatentHook
var productPatentAfterUpsertHooks []ProductPatentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductPatent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductPatent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductPatent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductPatent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductPatent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductPatent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductPatent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductPatent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductPatent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPatentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductPatentHook registers your hook function for all future operations.
func AddProductPatentHook(hookPoint boil.HookPoint, productPatentHook ProductPatentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productPatentAfterSelectHooks = append(productPatentAfterSelectHooks, productPatentHook)
	case boil.BeforeInsertHook:
		productPatentBeforeInsertHooks = append(productPatentBeforeInsertHooks, productPatentHook)
	case boil.AfterInsertHook:
		productPatentAfterInsertHooks = append(productPatentAfterInsertHooks, productPatentHook)
	case boil.BeforeUpdateHook:
		productPatentBeforeUpdateHooks = append(productPatentBeforeUpdateHooks, productPatentHook)
	case boil.AfterUpdateHook:
		productPatentAfterUpdateHooks = append(productPatentAfterUpdateHooks, productPatentHook)
	case boil.BeforeDeleteHook:
		productPatentBeforeDeleteHooks = append(productPatentBeforeDeleteHooks, productPatentHook)
	case boil.AfterDeleteHook:
		productPatentAfterDeleteHooks = append(productPatentAfterDeleteHooks, productPatentHook)
	case boil.BeforeUpsertHook:
		productPatentBeforeUpsertHooks = append(productPatentBeforeUpsertHooks, productPatentHook)
	case boil.AfterUpsertHook:
		productPatentAfterUpsertHooks = append(productPatentAfterUpsertHooks, productPatentHook)
	}
}

// One returns a single productPatent record from the query.
func (q productPatentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductPatent, error) {
	o := &ProductPatent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_patents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductPatent records from the query.
func (q productPatentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductPatentSlice, error) {
	var o []*ProductPatent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductPatent slice")
	}

	if len(productPatentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductPatent records in the query.
func (q productPatentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_patents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productPatentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_patents exists")
	}

	return count > 0, nil
}

// ProductPatentPatentUseCode pointed to by the foreign key.
func (o *ProductPatent) ProductPatentPatentUseCode(mods ...qm.QueryMod) patentUseCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"patent_use_code\" = ?", o.PatentUseCode),
	}

	queryMods = append(queryMods, mods...)

	return PatentUseCodes(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductPatent) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadProductPatentPatentUseCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPatentL) LoadProductPatentPatentUseCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPatent interface{}, mods queries.Applicator) error {
	var slice []*ProductPatent
	var object *ProductPatent

	if singular {
		object = maybeProductPatent.(*ProductPatent)
	} else {
		slice = *maybeProductPatent.(*[]*ProductPatent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPatentR{}
		}
		if !queries.IsNil(object.PatentUseCode) {
			args = append(args, object.PatentUseCode)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPatentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PatentUseCode) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PatentUseCode) {
				args = append(args, obj.PatentUseCode)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`patent_use_codes`),
		qm.WhereIn(`patent_use_codes.patent_use_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PatentUseCode")
	}

	var resultSlice []*PatentUseCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PatentUseCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for patent_use_codes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for patent_use_codes")
	}

	if len(productPatentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductPatentPatentUseCode = foreign
		if foreign.R == nil {
			foreign.R = &patentUseCodeR{}
		}
		foreign.R.ProductPatents = append(foreign.R.ProductPatents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PatentUseCode, foreign.PatentUseCode) {
				local.R.ProductPatentPatentUseCode = foreign
				if foreign.R == nil {
					foreign.R = &patentUseCodeR{}
				}
				foreign.R.ProductPatents = append(foreign.R.ProductPatents, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPatentL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPatent interface{}, mods queries.Applicator) error {
	var slice []*ProductPatent
	var object *ProductPatent

	if singular {
		object = maybeProductPatent.(*ProductPatent)
	} else {
		slice = *maybeProductPatent.(*[]*ProductPatent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPatentR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPatentR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productPatentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductPatents = append(foreign.R.ProductPatents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductPatents = append(foreign.R.ProductPatents, local)
				break
			}
		}
	}

	return nil
}

// SetProductPatentPatentUseCode of the productPatent to the related item.
// Sets o.R.ProductPatentPatentUseCode to related.
// Adds o to related.R.ProductPatents.
func (o *ProductPatent) SetProductPatentPatentUseCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PatentUseCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_patents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"patent_use_code"}),
		strmangle.WhereClause("\"", "\"", 0, productPatentPrimaryKeyColumns),
	)
	values := []interface{}{related.PatentUseCode, o.ProdPatID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PatentUseCode, related.PatentUseCode)
	if o.R == nil {
		o.R = &productPatentR{
			ProductPatentPatentUseCode: related,
		}
	} else {
		o.R.ProductPatentPatentUseCode = related
	}

	if related.R == nil {
		related.R = &patentUseCodeR{
			ProductPatents: ProductPatentSlice{o},
		}
	} else {
		related.R.ProductPatents = append(related.R.ProductPatents, o)
	}

	return nil
}

// RemoveProductPatentPatentUseCode relationship.
// Sets o.R.ProductPatentPatentUseCode to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductPatent) RemoveProductPatentPatentUseCode(ctx context.Context, exec boil.ContextExecutor, related *PatentUseCode) error {
	var err error

	queries.SetScanner(&o.PatentUseCode, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("patent_use_code")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductPatentPatentUseCode = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductPatents {
		if queries.Equal(o.PatentUseCode, ri.PatentUseCode) {
			continue
		}

		ln := len(related.R.ProductPatents)
		if ln > 1 && i < ln-1 {
			related.R.ProductPatents[i] = related.R.ProductPatents[ln-1]
		}
		related.R.ProductPatents = related.R.ProductPatents[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productPatent to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductPatents.
func (o *ProductPatent) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_patents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 0, productPatentPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.ProdPatID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &productPatentR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductPatents: ProductPatentSlice{o},
		}
	} else {
		related.R.ProductPatents = append(related.R.ProductPatents, o)
	}

	return nil
}

// ProductPatents retrieves all the records using an executor.
func ProductPatents(mods ...qm.QueryMod) productPatentQuery {
	mods = append(mods, qm.From("\"product_patents\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_patents\".*"})
	}

	return productPatentQuery{q}
}

// FindProductPatent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductPatent(ctx context.Context, exec boil.ContextExecutor, prodPatID int64, selectCols ...string) (*ProductPatent, error) {
	productPatentObj := &ProductPatent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_patents\" where \"prod_pat_id\"=?", sel,
	)

	q := queries.Raw(query, prodPatID)

	err := q.Bind(ctx, exec, productPatentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_patents")
	}

	if err = productPatentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productPatentObj, err
	}

	return productPatentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductPatent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_patents provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productPatentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productPatentInsertCacheMut.RLock()
	cache, cached := productPatentInsertCache[key]
	productPatentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productPatentAllColumns,
			productPatentColumnsWithDefault,
			productPatentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productPatentType, productPatentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productPatentType, productPatentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_patents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_patents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_patents")
	}

	if !cached {
		productPatentInsertCacheMut.Lock()
		productPatentInsertCache[key] = cache
		productPatentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductPatent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductPatent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productPatentUpdateCacheMut.RLock()
	cache, cached := productPatentUpdateCache[key]
	productPatentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productPatentAllColumns,
			productPatentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_patents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_patents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, productPatentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productPatentType, productPatentMapping, append(wl, productPatentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_patents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_patents")
	}

	if !cached {
		productPatentUpdateCacheMut.Lock()
		productPatentUpdateCache[key] = cache
		productPatentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productPatentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_patents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_patents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductPatentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPatentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_patents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPatentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productPatent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productPatent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductPatent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_patents provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productPatentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productPatentUpsertCacheMut.RLock()
	cache, cached := productPatentUpsertCache[key]
	productPatentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productPatentAllColumns,
			productPatentColumnsWithDefault,
			productPatentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productPatentAllColumns,
			productPatentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_patents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productPatentPrimaryKeyColumns))
			copy(conflict, productPatentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"product_patents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productPatentType, productPatentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productPatentType, productPatentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_patents")
	}

	if !cached {
		productPatentUpsertCacheMut.Lock()
		productPatentUpsertCache[key] = cache
		productPatentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductPatent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductPatent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductPatent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPatentPrimaryKeyMapping)
	sql := "DELETE FROM \"product_patents\" WHERE \"prod_pat_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_patents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_patents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productPatentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productPatentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_patents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_patents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductPatentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productPatentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPatentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_patents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPatentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productPatent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_patents")
	}

	if len(productPatentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductPatent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductPatent(ctx, exec, o.ProdPatID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductPatentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductPatentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPatentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_patents\".* FROM \"product_patents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPatentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductPatentSlice")
	}

	*o = slice

	return nil
}

// ProductPatentExists checks if the ProductPatent row exists.
func ProductPatentExists(ctx context.Context, exec boil.ContextExecutor, prodPatID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_patents\" where \"prod_pat_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, prodPatID)
	}
	row := exec.QueryRowContext(ctx, sql, prodPatID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_patents exists")
	}

	return exists, nil
}
