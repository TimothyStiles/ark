// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HracClassification is an object representing the database table.
type HracClassification struct {
	HracClassID       int64       `boil:"hrac_class_id" json:"hrac_class_id" toml:"hrac_class_id" yaml:"hrac_class_id"`
	ActiveIngredient  string      `boil:"active_ingredient" json:"active_ingredient" toml:"active_ingredient" yaml:"active_ingredient"`
	Level1            string      `boil:"level1" json:"level1" toml:"level1" yaml:"level1"`
	Level1Description string      `boil:"level1_description" json:"level1_description" toml:"level1_description" yaml:"level1_description"`
	Level2            string      `boil:"level2" json:"level2" toml:"level2" yaml:"level2"`
	Level2Description null.String `boil:"level2_description" json:"level2_description,omitempty" toml:"level2_description" yaml:"level2_description,omitempty"`
	Level3            string      `boil:"level3" json:"level3" toml:"level3" yaml:"level3"`
	HracCode          string      `boil:"hrac_code" json:"hrac_code" toml:"hrac_code" yaml:"hrac_code"`

	R *hracClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hracClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HracClassificationColumns = struct {
	HracClassID       string
	ActiveIngredient  string
	Level1            string
	Level1Description string
	Level2            string
	Level2Description string
	Level3            string
	HracCode          string
}{
	HracClassID:       "hrac_class_id",
	ActiveIngredient:  "active_ingredient",
	Level1:            "level1",
	Level1Description: "level1_description",
	Level2:            "level2",
	Level2Description: "level2_description",
	Level3:            "level3",
	HracCode:          "hrac_code",
}

var HracClassificationTableColumns = struct {
	HracClassID       string
	ActiveIngredient  string
	Level1            string
	Level1Description string
	Level2            string
	Level2Description string
	Level3            string
	HracCode          string
}{
	HracClassID:       "hrac_classification.hrac_class_id",
	ActiveIngredient:  "hrac_classification.active_ingredient",
	Level1:            "hrac_classification.level1",
	Level1Description: "hrac_classification.level1_description",
	Level2:            "hrac_classification.level2",
	Level2Description: "hrac_classification.level2_description",
	Level3:            "hrac_classification.level3",
	HracCode:          "hrac_classification.hrac_code",
}

// Generated where

var HracClassificationWhere = struct {
	HracClassID       whereHelperint64
	ActiveIngredient  whereHelperstring
	Level1            whereHelperstring
	Level1Description whereHelperstring
	Level2            whereHelperstring
	Level2Description whereHelpernull_String
	Level3            whereHelperstring
	HracCode          whereHelperstring
}{
	HracClassID:       whereHelperint64{field: "\"hrac_classification\".\"hrac_class_id\""},
	ActiveIngredient:  whereHelperstring{field: "\"hrac_classification\".\"active_ingredient\""},
	Level1:            whereHelperstring{field: "\"hrac_classification\".\"level1\""},
	Level1Description: whereHelperstring{field: "\"hrac_classification\".\"level1_description\""},
	Level2:            whereHelperstring{field: "\"hrac_classification\".\"level2\""},
	Level2Description: whereHelpernull_String{field: "\"hrac_classification\".\"level2_description\""},
	Level3:            whereHelperstring{field: "\"hrac_classification\".\"level3\""},
	HracCode:          whereHelperstring{field: "\"hrac_classification\".\"hrac_code\""},
}

// HracClassificationRels is where relationship names are stored.
var HracClassificationRels = struct {
	HracClassMoleculeHracClassifications string
}{
	HracClassMoleculeHracClassifications: "HracClassMoleculeHracClassifications",
}

// hracClassificationR is where relationships are stored.
type hracClassificationR struct {
	HracClassMoleculeHracClassifications MoleculeHracClassificationSlice `boil:"HracClassMoleculeHracClassifications" json:"HracClassMoleculeHracClassifications" toml:"HracClassMoleculeHracClassifications" yaml:"HracClassMoleculeHracClassifications"`
}

// NewStruct creates a new relationship struct
func (*hracClassificationR) NewStruct() *hracClassificationR {
	return &hracClassificationR{}
}

func (r *hracClassificationR) GetHracClassMoleculeHracClassifications() MoleculeHracClassificationSlice {
	if r == nil {
		return nil
	}
	return r.HracClassMoleculeHracClassifications
}

// hracClassificationL is where Load methods for each relationship are stored.
type hracClassificationL struct{}

var (
	hracClassificationAllColumns            = []string{"hrac_class_id", "active_ingredient", "level1", "level1_description", "level2", "level2_description", "level3", "hrac_code"}
	hracClassificationColumnsWithoutDefault = []string{"hrac_class_id", "active_ingredient", "level1", "level1_description", "level2", "level3", "hrac_code"}
	hracClassificationColumnsWithDefault    = []string{"level2_description"}
	hracClassificationPrimaryKeyColumns     = []string{"hrac_class_id"}
	hracClassificationGeneratedColumns      = []string{}
)

type (
	// HracClassificationSlice is an alias for a slice of pointers to HracClassification.
	// This should almost always be used instead of []HracClassification.
	HracClassificationSlice []*HracClassification
	// HracClassificationHook is the signature for custom HracClassification hook methods
	HracClassificationHook func(context.Context, boil.ContextExecutor, *HracClassification) error

	hracClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hracClassificationType                 = reflect.TypeOf(&HracClassification{})
	hracClassificationMapping              = queries.MakeStructMapping(hracClassificationType)
	hracClassificationPrimaryKeyMapping, _ = queries.BindMapping(hracClassificationType, hracClassificationMapping, hracClassificationPrimaryKeyColumns)
	hracClassificationInsertCacheMut       sync.RWMutex
	hracClassificationInsertCache          = make(map[string]insertCache)
	hracClassificationUpdateCacheMut       sync.RWMutex
	hracClassificationUpdateCache          = make(map[string]updateCache)
	hracClassificationUpsertCacheMut       sync.RWMutex
	hracClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hracClassificationAfterSelectHooks []HracClassificationHook

var hracClassificationBeforeInsertHooks []HracClassificationHook
var hracClassificationAfterInsertHooks []HracClassificationHook

var hracClassificationBeforeUpdateHooks []HracClassificationHook
var hracClassificationAfterUpdateHooks []HracClassificationHook

var hracClassificationBeforeDeleteHooks []HracClassificationHook
var hracClassificationAfterDeleteHooks []HracClassificationHook

var hracClassificationBeforeUpsertHooks []HracClassificationHook
var hracClassificationAfterUpsertHooks []HracClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HracClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HracClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HracClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HracClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HracClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HracClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HracClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HracClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HracClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hracClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHracClassificationHook registers your hook function for all future operations.
func AddHracClassificationHook(hookPoint boil.HookPoint, hracClassificationHook HracClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hracClassificationAfterSelectHooks = append(hracClassificationAfterSelectHooks, hracClassificationHook)
	case boil.BeforeInsertHook:
		hracClassificationBeforeInsertHooks = append(hracClassificationBeforeInsertHooks, hracClassificationHook)
	case boil.AfterInsertHook:
		hracClassificationAfterInsertHooks = append(hracClassificationAfterInsertHooks, hracClassificationHook)
	case boil.BeforeUpdateHook:
		hracClassificationBeforeUpdateHooks = append(hracClassificationBeforeUpdateHooks, hracClassificationHook)
	case boil.AfterUpdateHook:
		hracClassificationAfterUpdateHooks = append(hracClassificationAfterUpdateHooks, hracClassificationHook)
	case boil.BeforeDeleteHook:
		hracClassificationBeforeDeleteHooks = append(hracClassificationBeforeDeleteHooks, hracClassificationHook)
	case boil.AfterDeleteHook:
		hracClassificationAfterDeleteHooks = append(hracClassificationAfterDeleteHooks, hracClassificationHook)
	case boil.BeforeUpsertHook:
		hracClassificationBeforeUpsertHooks = append(hracClassificationBeforeUpsertHooks, hracClassificationHook)
	case boil.AfterUpsertHook:
		hracClassificationAfterUpsertHooks = append(hracClassificationAfterUpsertHooks, hracClassificationHook)
	}
}

// One returns a single hracClassification record from the query.
func (q hracClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HracClassification, error) {
	o := &HracClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hrac_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HracClassification records from the query.
func (q hracClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (HracClassificationSlice, error) {
	var o []*HracClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HracClassification slice")
	}

	if len(hracClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HracClassification records in the query.
func (q hracClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hrac_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hracClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hrac_classification exists")
	}

	return count > 0, nil
}

// HracClassMoleculeHracClassifications retrieves all the molecule_hrac_classification's MoleculeHracClassifications with an executor via hrac_class_id column.
func (o *HracClassification) HracClassMoleculeHracClassifications(mods ...qm.QueryMod) moleculeHracClassificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"molecule_hrac_classification\".\"hrac_class_id\"=?", o.HracClassID),
	)

	return MoleculeHracClassifications(queryMods...)
}

// LoadHracClassMoleculeHracClassifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hracClassificationL) LoadHracClassMoleculeHracClassifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHracClassification interface{}, mods queries.Applicator) error {
	var slice []*HracClassification
	var object *HracClassification

	if singular {
		object = maybeHracClassification.(*HracClassification)
	} else {
		slice = *maybeHracClassification.(*[]*HracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hracClassificationR{}
		}
		args = append(args, object.HracClassID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hracClassificationR{}
			}

			for _, a := range args {
				if a == obj.HracClassID {
					continue Outer
				}
			}

			args = append(args, obj.HracClassID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_hrac_classification`),
		qm.WhereIn(`molecule_hrac_classification.hrac_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load molecule_hrac_classification")
	}

	var resultSlice []*MoleculeHracClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice molecule_hrac_classification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on molecule_hrac_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_hrac_classification")
	}

	if len(moleculeHracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HracClassMoleculeHracClassifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moleculeHracClassificationR{}
			}
			foreign.R.HracClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.HracClassID == foreign.HracClassID {
				local.R.HracClassMoleculeHracClassifications = append(local.R.HracClassMoleculeHracClassifications, foreign)
				if foreign.R == nil {
					foreign.R = &moleculeHracClassificationR{}
				}
				foreign.R.HracClass = local
				break
			}
		}
	}

	return nil
}

// AddHracClassMoleculeHracClassifications adds the given related objects to the existing relationships
// of the hrac_classification, optionally inserting them as new records.
// Appends related to o.R.HracClassMoleculeHracClassifications.
// Sets related.R.HracClass appropriately.
func (o *HracClassification) AddHracClassMoleculeHracClassifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MoleculeHracClassification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HracClassID = o.HracClassID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"molecule_hrac_classification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"hrac_class_id"}),
				strmangle.WhereClause("\"", "\"", 0, moleculeHracClassificationPrimaryKeyColumns),
			)
			values := []interface{}{o.HracClassID, rel.MolHracID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HracClassID = o.HracClassID
		}
	}

	if o.R == nil {
		o.R = &hracClassificationR{
			HracClassMoleculeHracClassifications: related,
		}
	} else {
		o.R.HracClassMoleculeHracClassifications = append(o.R.HracClassMoleculeHracClassifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moleculeHracClassificationR{
				HracClass: o,
			}
		} else {
			rel.R.HracClass = o
		}
	}
	return nil
}

// HracClassifications retrieves all the records using an executor.
func HracClassifications(mods ...qm.QueryMod) hracClassificationQuery {
	mods = append(mods, qm.From("\"hrac_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hrac_classification\".*"})
	}

	return hracClassificationQuery{q}
}

// FindHracClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHracClassification(ctx context.Context, exec boil.ContextExecutor, hracClassID int64, selectCols ...string) (*HracClassification, error) {
	hracClassificationObj := &HracClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hrac_classification\" where \"hrac_class_id\"=?", sel,
	)

	q := queries.Raw(query, hracClassID)

	err := q.Bind(ctx, exec, hracClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hrac_classification")
	}

	if err = hracClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hracClassificationObj, err
	}

	return hracClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HracClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hrac_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hracClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hracClassificationInsertCacheMut.RLock()
	cache, cached := hracClassificationInsertCache[key]
	hracClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hracClassificationAllColumns,
			hracClassificationColumnsWithDefault,
			hracClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hracClassificationType, hracClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hracClassificationType, hracClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hrac_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hrac_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hrac_classification")
	}

	if !cached {
		hracClassificationInsertCacheMut.Lock()
		hracClassificationInsertCache[key] = cache
		hracClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HracClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HracClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hracClassificationUpdateCacheMut.RLock()
	cache, cached := hracClassificationUpdateCache[key]
	hracClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hracClassificationAllColumns,
			hracClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hrac_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hrac_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, hracClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hracClassificationType, hracClassificationMapping, append(wl, hracClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hrac_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hrac_classification")
	}

	if !cached {
		hracClassificationUpdateCacheMut.Lock()
		hracClassificationUpdateCache[key] = cache
		hracClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hracClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hrac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hrac_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HracClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hrac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hracClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hracClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HracClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hrac_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hracClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hracClassificationUpsertCacheMut.RLock()
	cache, cached := hracClassificationUpsertCache[key]
	hracClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hracClassificationAllColumns,
			hracClassificationColumnsWithDefault,
			hracClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			hracClassificationAllColumns,
			hracClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hrac_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hracClassificationPrimaryKeyColumns))
			copy(conflict, hracClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"hrac_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hracClassificationType, hracClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hracClassificationType, hracClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hrac_classification")
	}

	if !cached {
		hracClassificationUpsertCacheMut.Lock()
		hracClassificationUpsertCache[key] = cache
		hracClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HracClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HracClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HracClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hracClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"hrac_classification\" WHERE \"hrac_class_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hrac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hrac_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hracClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hracClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hrac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hrac_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HracClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hracClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hrac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hracClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hrac_classification")
	}

	if len(hracClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HracClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHracClassification(ctx, exec, o.HracClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HracClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HracClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hrac_classification\".* FROM \"hrac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, hracClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HracClassificationSlice")
	}

	*o = slice

	return nil
}

// HracClassificationExists checks if the HracClassification row exists.
func HracClassificationExists(ctx context.Context, exec boil.ContextExecutor, hracClassID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hrac_classification\" where \"hrac_class_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hracClassID)
	}
	row := exec.QueryRowContext(ctx, sql, hracClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hrac_classification exists")
	}

	return exists, nil
}
