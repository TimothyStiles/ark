// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReactionParticipant is an object representing the database table.
type ReactionParticipant struct {
	Compound     null.String `boil:"compound" json:"compound,omitempty" toml:"compound" yaml:"compound,omitempty"`
	Reactionside string      `boil:"reactionside" json:"reactionside" toml:"reactionside" yaml:"reactionside"`
	Contains     null.Int64  `boil:"contains" json:"contains,omitempty" toml:"contains" yaml:"contains,omitempty"`
	ContainsN    string      `boil:"contains_n" json:"contains_n" toml:"contains_n" yaml:"contains_n"`
	Minus        string      `boil:"minus" json:"minus" toml:"minus" yaml:"minus"`
	Plus         string      `boil:"plus" json:"plus" toml:"plus" yaml:"plus"`

	R *reactionParticipantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionParticipantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionParticipantColumns = struct {
	Compound     string
	Reactionside string
	Contains     string
	ContainsN    string
	Minus        string
	Plus         string
}{
	Compound:     "compound",
	Reactionside: "reactionside",
	Contains:     "contains",
	ContainsN:    "contains_n",
	Minus:        "minus",
	Plus:         "plus",
}

var ReactionParticipantTableColumns = struct {
	Compound     string
	Reactionside string
	Contains     string
	ContainsN    string
	Minus        string
	Plus         string
}{
	Compound:     "reaction_participant.compound",
	Reactionside: "reaction_participant.reactionside",
	Contains:     "reaction_participant.contains",
	ContainsN:    "reaction_participant.contains_n",
	Minus:        "reaction_participant.minus",
	Plus:         "reaction_participant.plus",
}

// Generated where

var ReactionParticipantWhere = struct {
	Compound     whereHelpernull_String
	Reactionside whereHelperstring
	Contains     whereHelpernull_Int64
	ContainsN    whereHelperstring
	Minus        whereHelperstring
	Plus         whereHelperstring
}{
	Compound:     whereHelpernull_String{field: "\"reaction_participant\".\"compound\""},
	Reactionside: whereHelperstring{field: "\"reaction_participant\".\"reactionside\""},
	Contains:     whereHelpernull_Int64{field: "\"reaction_participant\".\"contains\""},
	ContainsN:    whereHelperstring{field: "\"reaction_participant\".\"contains_n\""},
	Minus:        whereHelperstring{field: "\"reaction_participant\".\"minus\""},
	Plus:         whereHelperstring{field: "\"reaction_participant\".\"plus\""},
}

// ReactionParticipantRels is where relationship names are stored.
var ReactionParticipantRels = struct {
	ReactionParticipantReactionside string
	ReactionParticipantCompound     string
}{
	ReactionParticipantReactionside: "ReactionParticipantReactionside",
	ReactionParticipantCompound:     "ReactionParticipantCompound",
}

// reactionParticipantR is where relationships are stored.
type reactionParticipantR struct {
	ReactionParticipantReactionside *Reactionside `boil:"ReactionParticipantReactionside" json:"ReactionParticipantReactionside" toml:"ReactionParticipantReactionside" yaml:"ReactionParticipantReactionside"`
	ReactionParticipantCompound     *Compound     `boil:"ReactionParticipantCompound" json:"ReactionParticipantCompound" toml:"ReactionParticipantCompound" yaml:"ReactionParticipantCompound"`
}

// NewStruct creates a new relationship struct
func (*reactionParticipantR) NewStruct() *reactionParticipantR {
	return &reactionParticipantR{}
}

func (r *reactionParticipantR) GetReactionParticipantReactionside() *Reactionside {
	if r == nil {
		return nil
	}
	return r.ReactionParticipantReactionside
}

func (r *reactionParticipantR) GetReactionParticipantCompound() *Compound {
	if r == nil {
		return nil
	}
	return r.ReactionParticipantCompound
}

// reactionParticipantL is where Load methods for each relationship are stored.
type reactionParticipantL struct{}

var (
	reactionParticipantAllColumns            = []string{"compound", "reactionside", "contains", "contains_n", "minus", "plus"}
	reactionParticipantColumnsWithoutDefault = []string{"reactionside"}
	reactionParticipantColumnsWithDefault    = []string{"compound", "contains", "contains_n", "minus", "plus"}
	reactionParticipantPrimaryKeyColumns     = []string{"compound", "reactionside"}
	reactionParticipantGeneratedColumns      = []string{}
)

type (
	// ReactionParticipantSlice is an alias for a slice of pointers to ReactionParticipant.
	// This should almost always be used instead of []ReactionParticipant.
	ReactionParticipantSlice []*ReactionParticipant
	// ReactionParticipantHook is the signature for custom ReactionParticipant hook methods
	ReactionParticipantHook func(context.Context, boil.ContextExecutor, *ReactionParticipant) error

	reactionParticipantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionParticipantType                 = reflect.TypeOf(&ReactionParticipant{})
	reactionParticipantMapping              = queries.MakeStructMapping(reactionParticipantType)
	reactionParticipantPrimaryKeyMapping, _ = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, reactionParticipantPrimaryKeyColumns)
	reactionParticipantInsertCacheMut       sync.RWMutex
	reactionParticipantInsertCache          = make(map[string]insertCache)
	reactionParticipantUpdateCacheMut       sync.RWMutex
	reactionParticipantUpdateCache          = make(map[string]updateCache)
	reactionParticipantUpsertCacheMut       sync.RWMutex
	reactionParticipantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionParticipantAfterSelectHooks []ReactionParticipantHook

var reactionParticipantBeforeInsertHooks []ReactionParticipantHook
var reactionParticipantAfterInsertHooks []ReactionParticipantHook

var reactionParticipantBeforeUpdateHooks []ReactionParticipantHook
var reactionParticipantAfterUpdateHooks []ReactionParticipantHook

var reactionParticipantBeforeDeleteHooks []ReactionParticipantHook
var reactionParticipantAfterDeleteHooks []ReactionParticipantHook

var reactionParticipantBeforeUpsertHooks []ReactionParticipantHook
var reactionParticipantAfterUpsertHooks []ReactionParticipantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReactionParticipant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReactionParticipant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReactionParticipant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReactionParticipant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReactionParticipant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReactionParticipant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReactionParticipant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReactionParticipant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReactionParticipant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionParticipantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionParticipantHook registers your hook function for all future operations.
func AddReactionParticipantHook(hookPoint boil.HookPoint, reactionParticipantHook ReactionParticipantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionParticipantAfterSelectHooks = append(reactionParticipantAfterSelectHooks, reactionParticipantHook)
	case boil.BeforeInsertHook:
		reactionParticipantBeforeInsertHooks = append(reactionParticipantBeforeInsertHooks, reactionParticipantHook)
	case boil.AfterInsertHook:
		reactionParticipantAfterInsertHooks = append(reactionParticipantAfterInsertHooks, reactionParticipantHook)
	case boil.BeforeUpdateHook:
		reactionParticipantBeforeUpdateHooks = append(reactionParticipantBeforeUpdateHooks, reactionParticipantHook)
	case boil.AfterUpdateHook:
		reactionParticipantAfterUpdateHooks = append(reactionParticipantAfterUpdateHooks, reactionParticipantHook)
	case boil.BeforeDeleteHook:
		reactionParticipantBeforeDeleteHooks = append(reactionParticipantBeforeDeleteHooks, reactionParticipantHook)
	case boil.AfterDeleteHook:
		reactionParticipantAfterDeleteHooks = append(reactionParticipantAfterDeleteHooks, reactionParticipantHook)
	case boil.BeforeUpsertHook:
		reactionParticipantBeforeUpsertHooks = append(reactionParticipantBeforeUpsertHooks, reactionParticipantHook)
	case boil.AfterUpsertHook:
		reactionParticipantAfterUpsertHooks = append(reactionParticipantAfterUpsertHooks, reactionParticipantHook)
	}
}

// One returns a single reactionParticipant record from the query.
func (q reactionParticipantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReactionParticipant, error) {
	o := &ReactionParticipant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reaction_participant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReactionParticipant records from the query.
func (q reactionParticipantQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionParticipantSlice, error) {
	var o []*ReactionParticipant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReactionParticipant slice")
	}

	if len(reactionParticipantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReactionParticipant records in the query.
func (q reactionParticipantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reaction_participant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactionParticipantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reaction_participant exists")
	}

	return count > 0, nil
}

// ReactionParticipantReactionside pointed to by the foreign key.
func (o *ReactionParticipant) ReactionParticipantReactionside(mods ...qm.QueryMod) reactionsideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Reactionside),
	}

	queryMods = append(queryMods, mods...)

	return Reactionsides(queryMods...)
}

// ReactionParticipantCompound pointed to by the foreign key.
func (o *ReactionParticipant) ReactionParticipantCompound(mods ...qm.QueryMod) compoundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Compound),
	}

	queryMods = append(queryMods, mods...)

	return Compounds(queryMods...)
}

// LoadReactionParticipantReactionside allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionParticipantL) LoadReactionParticipantReactionside(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionParticipant interface{}, mods queries.Applicator) error {
	var slice []*ReactionParticipant
	var object *ReactionParticipant

	if singular {
		object = maybeReactionParticipant.(*ReactionParticipant)
	} else {
		slice = *maybeReactionParticipant.(*[]*ReactionParticipant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionParticipantR{}
		}
		if !queries.IsNil(object.Reactionside) {
			args = append(args, object.Reactionside)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionParticipantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Reactionside) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Reactionside) {
				args = append(args, obj.Reactionside)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionside`),
		qm.WhereIn(`reactionside.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reactionside")
	}

	var resultSlice []*Reactionside
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reactionside")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reactionside")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionside")
	}

	if len(reactionParticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionParticipantReactionside = foreign
		if foreign.R == nil {
			foreign.R = &reactionsideR{}
		}
		foreign.R.ReactionParticipants = append(foreign.R.ReactionParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Reactionside, foreign.Accession) {
				local.R.ReactionParticipantReactionside = foreign
				if foreign.R == nil {
					foreign.R = &reactionsideR{}
				}
				foreign.R.ReactionParticipants = append(foreign.R.ReactionParticipants, local)
				break
			}
		}
	}

	return nil
}

// LoadReactionParticipantCompound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionParticipantL) LoadReactionParticipantCompound(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionParticipant interface{}, mods queries.Applicator) error {
	var slice []*ReactionParticipant
	var object *ReactionParticipant

	if singular {
		object = maybeReactionParticipant.(*ReactionParticipant)
	} else {
		slice = *maybeReactionParticipant.(*[]*ReactionParticipant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionParticipantR{}
		}
		if !queries.IsNil(object.Compound) {
			args = append(args, object.Compound)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionParticipantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Compound) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Compound) {
				args = append(args, obj.Compound)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound`),
		qm.WhereIn(`compound.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Compound")
	}

	var resultSlice []*Compound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Compound")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound")
	}

	if len(reactionParticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactionParticipantCompound = foreign
		if foreign.R == nil {
			foreign.R = &compoundR{}
		}
		foreign.R.ReactionParticipants = append(foreign.R.ReactionParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Compound, foreign.Accession) {
				local.R.ReactionParticipantCompound = foreign
				if foreign.R == nil {
					foreign.R = &compoundR{}
				}
				foreign.R.ReactionParticipants = append(foreign.R.ReactionParticipants, local)
				break
			}
		}
	}

	return nil
}

// SetReactionParticipantReactionside of the reactionParticipant to the related item.
// Sets o.R.ReactionParticipantReactionside to related.
// Adds o to related.R.ReactionParticipants.
func (o *ReactionParticipant) SetReactionParticipantReactionside(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reactionside) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reaction_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"reactionside"}),
		strmangle.WhereClause("\"", "\"", 0, reactionParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Compound, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Reactionside, related.Accession)
	if o.R == nil {
		o.R = &reactionParticipantR{
			ReactionParticipantReactionside: related,
		}
	} else {
		o.R.ReactionParticipantReactionside = related
	}

	if related.R == nil {
		related.R = &reactionsideR{
			ReactionParticipants: ReactionParticipantSlice{o},
		}
	} else {
		related.R.ReactionParticipants = append(related.R.ReactionParticipants, o)
	}

	return nil
}

// SetReactionParticipantCompound of the reactionParticipant to the related item.
// Sets o.R.ReactionParticipantCompound to related.
// Adds o to related.R.ReactionParticipants.
func (o *ReactionParticipant) SetReactionParticipantCompound(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Compound) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reaction_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"compound"}),
		strmangle.WhereClause("\"", "\"", 0, reactionParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Compound, o.Reactionside}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Compound, related.Accession)
	if o.R == nil {
		o.R = &reactionParticipantR{
			ReactionParticipantCompound: related,
		}
	} else {
		o.R.ReactionParticipantCompound = related
	}

	if related.R == nil {
		related.R = &compoundR{
			ReactionParticipants: ReactionParticipantSlice{o},
		}
	} else {
		related.R.ReactionParticipants = append(related.R.ReactionParticipants, o)
	}

	return nil
}

// RemoveReactionParticipantCompound relationship.
// Sets o.R.ReactionParticipantCompound to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ReactionParticipant) RemoveReactionParticipantCompound(ctx context.Context, exec boil.ContextExecutor, related *Compound) error {
	var err error

	queries.SetScanner(&o.Compound, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("compound")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReactionParticipantCompound = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReactionParticipants {
		if queries.Equal(o.Compound, ri.Compound) {
			continue
		}

		ln := len(related.R.ReactionParticipants)
		if ln > 1 && i < ln-1 {
			related.R.ReactionParticipants[i] = related.R.ReactionParticipants[ln-1]
		}
		related.R.ReactionParticipants = related.R.ReactionParticipants[:ln-1]
		break
	}
	return nil
}

// ReactionParticipants retrieves all the records using an executor.
func ReactionParticipants(mods ...qm.QueryMod) reactionParticipantQuery {
	mods = append(mods, qm.From("\"reaction_participant\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reaction_participant\".*"})
	}

	return reactionParticipantQuery{q}
}

// FindReactionParticipant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReactionParticipant(ctx context.Context, exec boil.ContextExecutor, compound null.String, reactionside string, selectCols ...string) (*ReactionParticipant, error) {
	reactionParticipantObj := &ReactionParticipant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reaction_participant\" where \"compound\"=? AND \"reactionside\"=?", sel,
	)

	q := queries.Raw(query, compound, reactionside)

	err := q.Bind(ctx, exec, reactionParticipantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reaction_participant")
	}

	if err = reactionParticipantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionParticipantObj, err
	}

	return reactionParticipantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReactionParticipant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reaction_participant provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionParticipantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionParticipantInsertCacheMut.RLock()
	cache, cached := reactionParticipantInsertCache[key]
	reactionParticipantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionParticipantAllColumns,
			reactionParticipantColumnsWithDefault,
			reactionParticipantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reaction_participant\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reaction_participant\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reaction_participant")
	}

	if !cached {
		reactionParticipantInsertCacheMut.Lock()
		reactionParticipantInsertCache[key] = cache
		reactionParticipantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReactionParticipant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReactionParticipant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionParticipantUpdateCacheMut.RLock()
	cache, cached := reactionParticipantUpdateCache[key]
	reactionParticipantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionParticipantAllColumns,
			reactionParticipantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reaction_participant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reaction_participant\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactionParticipantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, append(wl, reactionParticipantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reaction_participant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reaction_participant")
	}

	if !cached {
		reactionParticipantUpdateCacheMut.Lock()
		reactionParticipantUpdateCache[key] = cache
		reactionParticipantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionParticipantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reaction_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reaction_participant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionParticipantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reaction_participant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionParticipantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reactionParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reactionParticipant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReactionParticipant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reaction_participant provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionParticipantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionParticipantUpsertCacheMut.RLock()
	cache, cached := reactionParticipantUpsertCache[key]
	reactionParticipantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactionParticipantAllColumns,
			reactionParticipantColumnsWithDefault,
			reactionParticipantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactionParticipantAllColumns,
			reactionParticipantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reaction_participant, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactionParticipantPrimaryKeyColumns))
			copy(conflict, reactionParticipantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reaction_participant\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionParticipantType, reactionParticipantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reaction_participant")
	}

	if !cached {
		reactionParticipantUpsertCacheMut.Lock()
		reactionParticipantUpsertCache[key] = cache
		reactionParticipantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReactionParticipant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReactionParticipant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReactionParticipant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionParticipantPrimaryKeyMapping)
	sql := "DELETE FROM \"reaction_participant\" WHERE \"compound\"=? AND \"reactionside\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reaction_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reaction_participant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactionParticipantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionParticipantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reaction_participant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reaction_participant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionParticipantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionParticipantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reaction_participant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionParticipantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reaction_participant")
	}

	if len(reactionParticipantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReactionParticipant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReactionParticipant(ctx, exec, o.Compound, o.Reactionside)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionParticipantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionParticipantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reaction_participant\".* FROM \"reaction_participant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionParticipantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionParticipantSlice")
	}

	*o = slice

	return nil
}

// ReactionParticipantExists checks if the ReactionParticipant row exists.
func ReactionParticipantExists(ctx context.Context, exec boil.ContextExecutor, compound null.String, reactionside string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reaction_participant\" where \"compound\"=? AND \"reactionside\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, compound, reactionside)
	}
	row := exec.QueryRowContext(ctx, sql, compound, reactionside)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reaction_participant exists")
	}

	return exists, nil
}
