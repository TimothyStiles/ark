// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DrugIndication is an object representing the database table.
type DrugIndication struct {
	DrugindID      int64       `boil:"drugind_id" json:"drugind_id" toml:"drugind_id" yaml:"drugind_id"`
	RecordID       int64       `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	Molregno       null.Int64  `boil:"molregno" json:"molregno,omitempty" toml:"molregno" yaml:"molregno,omitempty"`
	MaxPhaseForInd null.Int16  `boil:"max_phase_for_ind" json:"max_phase_for_ind,omitempty" toml:"max_phase_for_ind" yaml:"max_phase_for_ind,omitempty"`
	MeshID         string      `boil:"mesh_id" json:"mesh_id" toml:"mesh_id" yaml:"mesh_id"`
	MeshHeading    string      `boil:"mesh_heading" json:"mesh_heading" toml:"mesh_heading" yaml:"mesh_heading"`
	EfoID          null.String `boil:"efo_id" json:"efo_id,omitempty" toml:"efo_id" yaml:"efo_id,omitempty"`
	EfoTerm        null.String `boil:"efo_term" json:"efo_term,omitempty" toml:"efo_term" yaml:"efo_term,omitempty"`

	R *drugIndicationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L drugIndicationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DrugIndicationColumns = struct {
	DrugindID      string
	RecordID       string
	Molregno       string
	MaxPhaseForInd string
	MeshID         string
	MeshHeading    string
	EfoID          string
	EfoTerm        string
}{
	DrugindID:      "drugind_id",
	RecordID:       "record_id",
	Molregno:       "molregno",
	MaxPhaseForInd: "max_phase_for_ind",
	MeshID:         "mesh_id",
	MeshHeading:    "mesh_heading",
	EfoID:          "efo_id",
	EfoTerm:        "efo_term",
}

var DrugIndicationTableColumns = struct {
	DrugindID      string
	RecordID       string
	Molregno       string
	MaxPhaseForInd string
	MeshID         string
	MeshHeading    string
	EfoID          string
	EfoTerm        string
}{
	DrugindID:      "drug_indication.drugind_id",
	RecordID:       "drug_indication.record_id",
	Molregno:       "drug_indication.molregno",
	MaxPhaseForInd: "drug_indication.max_phase_for_ind",
	MeshID:         "drug_indication.mesh_id",
	MeshHeading:    "drug_indication.mesh_heading",
	EfoID:          "drug_indication.efo_id",
	EfoTerm:        "drug_indication.efo_term",
}

// Generated where

var DrugIndicationWhere = struct {
	DrugindID      whereHelperint64
	RecordID       whereHelperint64
	Molregno       whereHelpernull_Int64
	MaxPhaseForInd whereHelpernull_Int16
	MeshID         whereHelperstring
	MeshHeading    whereHelperstring
	EfoID          whereHelpernull_String
	EfoTerm        whereHelpernull_String
}{
	DrugindID:      whereHelperint64{field: "\"drug_indication\".\"drugind_id\""},
	RecordID:       whereHelperint64{field: "\"drug_indication\".\"record_id\""},
	Molregno:       whereHelpernull_Int64{field: "\"drug_indication\".\"molregno\""},
	MaxPhaseForInd: whereHelpernull_Int16{field: "\"drug_indication\".\"max_phase_for_ind\""},
	MeshID:         whereHelperstring{field: "\"drug_indication\".\"mesh_id\""},
	MeshHeading:    whereHelperstring{field: "\"drug_indication\".\"mesh_heading\""},
	EfoID:          whereHelpernull_String{field: "\"drug_indication\".\"efo_id\""},
	EfoTerm:        whereHelpernull_String{field: "\"drug_indication\".\"efo_term\""},
}

// DrugIndicationRels is where relationship names are stored.
var DrugIndicationRels = struct {
	Record                     string
	MolregnoMoleculeDictionary string
	DrugindIndicationRefs      string
}{
	Record:                     "Record",
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	DrugindIndicationRefs:      "DrugindIndicationRefs",
}

// drugIndicationR is where relationships are stored.
type drugIndicationR struct {
	Record                     *CompoundRecord     `boil:"Record" json:"Record" toml:"Record" yaml:"Record"`
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	DrugindIndicationRefs      IndicationRefSlice  `boil:"DrugindIndicationRefs" json:"DrugindIndicationRefs" toml:"DrugindIndicationRefs" yaml:"DrugindIndicationRefs"`
}

// NewStruct creates a new relationship struct
func (*drugIndicationR) NewStruct() *drugIndicationR {
	return &drugIndicationR{}
}

func (r *drugIndicationR) GetRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.Record
}

func (r *drugIndicationR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *drugIndicationR) GetDrugindIndicationRefs() IndicationRefSlice {
	if r == nil {
		return nil
	}
	return r.DrugindIndicationRefs
}

// drugIndicationL is where Load methods for each relationship are stored.
type drugIndicationL struct{}

var (
	drugIndicationAllColumns            = []string{"drugind_id", "record_id", "molregno", "max_phase_for_ind", "mesh_id", "mesh_heading", "efo_id", "efo_term"}
	drugIndicationColumnsWithoutDefault = []string{"drugind_id", "record_id", "mesh_id", "mesh_heading"}
	drugIndicationColumnsWithDefault    = []string{"molregno", "max_phase_for_ind", "efo_id", "efo_term"}
	drugIndicationPrimaryKeyColumns     = []string{"drugind_id"}
	drugIndicationGeneratedColumns      = []string{}
)

type (
	// DrugIndicationSlice is an alias for a slice of pointers to DrugIndication.
	// This should almost always be used instead of []DrugIndication.
	DrugIndicationSlice []*DrugIndication
	// DrugIndicationHook is the signature for custom DrugIndication hook methods
	DrugIndicationHook func(context.Context, boil.ContextExecutor, *DrugIndication) error

	drugIndicationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	drugIndicationType                 = reflect.TypeOf(&DrugIndication{})
	drugIndicationMapping              = queries.MakeStructMapping(drugIndicationType)
	drugIndicationPrimaryKeyMapping, _ = queries.BindMapping(drugIndicationType, drugIndicationMapping, drugIndicationPrimaryKeyColumns)
	drugIndicationInsertCacheMut       sync.RWMutex
	drugIndicationInsertCache          = make(map[string]insertCache)
	drugIndicationUpdateCacheMut       sync.RWMutex
	drugIndicationUpdateCache          = make(map[string]updateCache)
	drugIndicationUpsertCacheMut       sync.RWMutex
	drugIndicationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var drugIndicationAfterSelectHooks []DrugIndicationHook

var drugIndicationBeforeInsertHooks []DrugIndicationHook
var drugIndicationAfterInsertHooks []DrugIndicationHook

var drugIndicationBeforeUpdateHooks []DrugIndicationHook
var drugIndicationAfterUpdateHooks []DrugIndicationHook

var drugIndicationBeforeDeleteHooks []DrugIndicationHook
var drugIndicationAfterDeleteHooks []DrugIndicationHook

var drugIndicationBeforeUpsertHooks []DrugIndicationHook
var drugIndicationAfterUpsertHooks []DrugIndicationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DrugIndication) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DrugIndication) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DrugIndication) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DrugIndication) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DrugIndication) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DrugIndication) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DrugIndication) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DrugIndication) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DrugIndication) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drugIndicationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDrugIndicationHook registers your hook function for all future operations.
func AddDrugIndicationHook(hookPoint boil.HookPoint, drugIndicationHook DrugIndicationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		drugIndicationAfterSelectHooks = append(drugIndicationAfterSelectHooks, drugIndicationHook)
	case boil.BeforeInsertHook:
		drugIndicationBeforeInsertHooks = append(drugIndicationBeforeInsertHooks, drugIndicationHook)
	case boil.AfterInsertHook:
		drugIndicationAfterInsertHooks = append(drugIndicationAfterInsertHooks, drugIndicationHook)
	case boil.BeforeUpdateHook:
		drugIndicationBeforeUpdateHooks = append(drugIndicationBeforeUpdateHooks, drugIndicationHook)
	case boil.AfterUpdateHook:
		drugIndicationAfterUpdateHooks = append(drugIndicationAfterUpdateHooks, drugIndicationHook)
	case boil.BeforeDeleteHook:
		drugIndicationBeforeDeleteHooks = append(drugIndicationBeforeDeleteHooks, drugIndicationHook)
	case boil.AfterDeleteHook:
		drugIndicationAfterDeleteHooks = append(drugIndicationAfterDeleteHooks, drugIndicationHook)
	case boil.BeforeUpsertHook:
		drugIndicationBeforeUpsertHooks = append(drugIndicationBeforeUpsertHooks, drugIndicationHook)
	case boil.AfterUpsertHook:
		drugIndicationAfterUpsertHooks = append(drugIndicationAfterUpsertHooks, drugIndicationHook)
	}
}

// One returns a single drugIndication record from the query.
func (q drugIndicationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DrugIndication, error) {
	o := &DrugIndication{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for drug_indication")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DrugIndication records from the query.
func (q drugIndicationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DrugIndicationSlice, error) {
	var o []*DrugIndication

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DrugIndication slice")
	}

	if len(drugIndicationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DrugIndication records in the query.
func (q drugIndicationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count drug_indication rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q drugIndicationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if drug_indication exists")
	}

	return count > 0, nil
}

// Record pointed to by the foreign key.
func (o *DrugIndication) Record(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.RecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *DrugIndication) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// DrugindIndicationRefs retrieves all the indication_ref's IndicationRefs with an executor via drugind_id column.
func (o *DrugIndication) DrugindIndicationRefs(mods ...qm.QueryMod) indicationRefQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"indication_refs\".\"drugind_id\"=?", o.DrugindID),
	)

	return IndicationRefs(queryMods...)
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugIndicationL) LoadRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugIndication interface{}, mods queries.Applicator) error {
	var slice []*DrugIndication
	var object *DrugIndication

	if singular {
		object = maybeDrugIndication.(*DrugIndication)
	} else {
		slice = *maybeDrugIndication.(*[]*DrugIndication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugIndicationR{}
		}
		args = append(args, object.RecordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugIndicationR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(drugIndicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Record = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.RecordDrugIndications = append(foreign.R.RecordDrugIndications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecordID == foreign.RecordID {
				local.R.Record = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.RecordDrugIndications = append(foreign.R.RecordDrugIndications, local)
				break
			}
		}
	}

	return nil
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drugIndicationL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugIndication interface{}, mods queries.Applicator) error {
	var slice []*DrugIndication
	var object *DrugIndication

	if singular {
		object = maybeDrugIndication.(*DrugIndication)
	} else {
		slice = *maybeDrugIndication.(*[]*DrugIndication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugIndicationR{}
		}
		if !queries.IsNil(object.Molregno) {
			args = append(args, object.Molregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugIndicationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Molregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Molregno) {
				args = append(args, obj.Molregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(drugIndicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoDrugIndications = append(foreign.R.MolregnoDrugIndications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Molregno, foreign.Molregno) {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoDrugIndications = append(foreign.R.MolregnoDrugIndications, local)
				break
			}
		}
	}

	return nil
}

// LoadDrugindIndicationRefs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (drugIndicationL) LoadDrugindIndicationRefs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrugIndication interface{}, mods queries.Applicator) error {
	var slice []*DrugIndication
	var object *DrugIndication

	if singular {
		object = maybeDrugIndication.(*DrugIndication)
	} else {
		slice = *maybeDrugIndication.(*[]*DrugIndication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drugIndicationR{}
		}
		args = append(args, object.DrugindID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drugIndicationR{}
			}

			for _, a := range args {
				if a == obj.DrugindID {
					continue Outer
				}
			}

			args = append(args, obj.DrugindID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`indication_refs`),
		qm.WhereIn(`indication_refs.drugind_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load indication_refs")
	}

	var resultSlice []*IndicationRef
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice indication_refs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on indication_refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for indication_refs")
	}

	if len(indicationRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DrugindIndicationRefs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &indicationRefR{}
			}
			foreign.R.Drugind = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DrugindID == foreign.DrugindID {
				local.R.DrugindIndicationRefs = append(local.R.DrugindIndicationRefs, foreign)
				if foreign.R == nil {
					foreign.R = &indicationRefR{}
				}
				foreign.R.Drugind = local
				break
			}
		}
	}

	return nil
}

// SetRecord of the drugIndication to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.RecordDrugIndications.
func (o *DrugIndication) SetRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_indication\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
		strmangle.WhereClause("\"", "\"", 0, drugIndicationPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.DrugindID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecordID = related.RecordID
	if o.R == nil {
		o.R = &drugIndicationR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			RecordDrugIndications: DrugIndicationSlice{o},
		}
	} else {
		related.R.RecordDrugIndications = append(related.R.RecordDrugIndications, o)
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the drugIndication to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoDrugIndications.
func (o *DrugIndication) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"drug_indication\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, drugIndicationPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.DrugindID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Molregno, related.Molregno)
	if o.R == nil {
		o.R = &drugIndicationR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoDrugIndications: DrugIndicationSlice{o},
		}
	} else {
		related.R.MolregnoDrugIndications = append(related.R.MolregnoDrugIndications, o)
	}

	return nil
}

// RemoveMolregnoMoleculeDictionary relationship.
// Sets o.R.MolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DrugIndication) RemoveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.Molregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MolregnoDrugIndications {
		if queries.Equal(o.Molregno, ri.Molregno) {
			continue
		}

		ln := len(related.R.MolregnoDrugIndications)
		if ln > 1 && i < ln-1 {
			related.R.MolregnoDrugIndications[i] = related.R.MolregnoDrugIndications[ln-1]
		}
		related.R.MolregnoDrugIndications = related.R.MolregnoDrugIndications[:ln-1]
		break
	}
	return nil
}

// AddDrugindIndicationRefs adds the given related objects to the existing relationships
// of the drug_indication, optionally inserting them as new records.
// Appends related to o.R.DrugindIndicationRefs.
// Sets related.R.Drugind appropriately.
func (o *DrugIndication) AddDrugindIndicationRefs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IndicationRef) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DrugindID = o.DrugindID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"indication_refs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"drugind_id"}),
				strmangle.WhereClause("\"", "\"", 0, indicationRefPrimaryKeyColumns),
			)
			values := []interface{}{o.DrugindID, rel.IndrefID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DrugindID = o.DrugindID
		}
	}

	if o.R == nil {
		o.R = &drugIndicationR{
			DrugindIndicationRefs: related,
		}
	} else {
		o.R.DrugindIndicationRefs = append(o.R.DrugindIndicationRefs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &indicationRefR{
				Drugind: o,
			}
		} else {
			rel.R.Drugind = o
		}
	}
	return nil
}

// DrugIndications retrieves all the records using an executor.
func DrugIndications(mods ...qm.QueryMod) drugIndicationQuery {
	mods = append(mods, qm.From("\"drug_indication\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"drug_indication\".*"})
	}

	return drugIndicationQuery{q}
}

// FindDrugIndication retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDrugIndication(ctx context.Context, exec boil.ContextExecutor, drugindID int64, selectCols ...string) (*DrugIndication, error) {
	drugIndicationObj := &DrugIndication{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"drug_indication\" where \"drugind_id\"=?", sel,
	)

	q := queries.Raw(query, drugindID)

	err := q.Bind(ctx, exec, drugIndicationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from drug_indication")
	}

	if err = drugIndicationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return drugIndicationObj, err
	}

	return drugIndicationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DrugIndication) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_indication provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugIndicationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	drugIndicationInsertCacheMut.RLock()
	cache, cached := drugIndicationInsertCache[key]
	drugIndicationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			drugIndicationAllColumns,
			drugIndicationColumnsWithDefault,
			drugIndicationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(drugIndicationType, drugIndicationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(drugIndicationType, drugIndicationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"drug_indication\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"drug_indication\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into drug_indication")
	}

	if !cached {
		drugIndicationInsertCacheMut.Lock()
		drugIndicationInsertCache[key] = cache
		drugIndicationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DrugIndication.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DrugIndication) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	drugIndicationUpdateCacheMut.RLock()
	cache, cached := drugIndicationUpdateCache[key]
	drugIndicationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			drugIndicationAllColumns,
			drugIndicationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update drug_indication, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"drug_indication\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, drugIndicationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(drugIndicationType, drugIndicationMapping, append(wl, drugIndicationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update drug_indication row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for drug_indication")
	}

	if !cached {
		drugIndicationUpdateCacheMut.Lock()
		drugIndicationUpdateCache[key] = cache
		drugIndicationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q drugIndicationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for drug_indication")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for drug_indication")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DrugIndicationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugIndicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"drug_indication\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugIndicationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in drugIndication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all drugIndication")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DrugIndication) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drug_indication provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drugIndicationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	drugIndicationUpsertCacheMut.RLock()
	cache, cached := drugIndicationUpsertCache[key]
	drugIndicationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			drugIndicationAllColumns,
			drugIndicationColumnsWithDefault,
			drugIndicationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			drugIndicationAllColumns,
			drugIndicationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert drug_indication, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(drugIndicationPrimaryKeyColumns))
			copy(conflict, drugIndicationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"drug_indication\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(drugIndicationType, drugIndicationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(drugIndicationType, drugIndicationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert drug_indication")
	}

	if !cached {
		drugIndicationUpsertCacheMut.Lock()
		drugIndicationUpsertCache[key] = cache
		drugIndicationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DrugIndication record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DrugIndication) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DrugIndication provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), drugIndicationPrimaryKeyMapping)
	sql := "DELETE FROM \"drug_indication\" WHERE \"drugind_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from drug_indication")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for drug_indication")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q drugIndicationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no drugIndicationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drug_indication")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_indication")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DrugIndicationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(drugIndicationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugIndicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"drug_indication\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugIndicationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drugIndication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drug_indication")
	}

	if len(drugIndicationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DrugIndication) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDrugIndication(ctx, exec, o.DrugindID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DrugIndicationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DrugIndicationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drugIndicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"drug_indication\".* FROM \"drug_indication\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, drugIndicationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DrugIndicationSlice")
	}

	*o = slice

	return nil
}

// DrugIndicationExists checks if the DrugIndication row exists.
func DrugIndicationExists(ctx context.Context, exec boil.ContextExecutor, drugindID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"drug_indication\" where \"drugind_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, drugindID)
	}
	row := exec.QueryRowContext(ctx, sql, drugindID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if drug_indication exists")
	}

	return exists, nil
}
