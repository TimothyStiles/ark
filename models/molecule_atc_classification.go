// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MoleculeAtcClassification is an object representing the database table.
type MoleculeAtcClassification struct {
	MolAtcID int64  `boil:"mol_atc_id" json:"mol_atc_id" toml:"mol_atc_id" yaml:"mol_atc_id"`
	Level5   string `boil:"level5" json:"level5" toml:"level5" yaml:"level5"`
	Molregno int64  `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`

	R *moleculeAtcClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moleculeAtcClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoleculeAtcClassificationColumns = struct {
	MolAtcID string
	Level5   string
	Molregno string
}{
	MolAtcID: "mol_atc_id",
	Level5:   "level5",
	Molregno: "molregno",
}

var MoleculeAtcClassificationTableColumns = struct {
	MolAtcID string
	Level5   string
	Molregno string
}{
	MolAtcID: "molecule_atc_classification.mol_atc_id",
	Level5:   "molecule_atc_classification.level5",
	Molregno: "molecule_atc_classification.molregno",
}

// Generated where

var MoleculeAtcClassificationWhere = struct {
	MolAtcID whereHelperint64
	Level5   whereHelperstring
	Molregno whereHelperint64
}{
	MolAtcID: whereHelperint64{field: "\"molecule_atc_classification\".\"mol_atc_id\""},
	Level5:   whereHelperstring{field: "\"molecule_atc_classification\".\"level5\""},
	Molregno: whereHelperint64{field: "\"molecule_atc_classification\".\"molregno\""},
}

// MoleculeAtcClassificationRels is where relationship names are stored.
var MoleculeAtcClassificationRels = struct {
	MolregnoMoleculeDictionary string
	Level5AtcClassification    string
}{
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	Level5AtcClassification:    "Level5AtcClassification",
}

// moleculeAtcClassificationR is where relationships are stored.
type moleculeAtcClassificationR struct {
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	Level5AtcClassification    *AtcClassification  `boil:"Level5AtcClassification" json:"Level5AtcClassification" toml:"Level5AtcClassification" yaml:"Level5AtcClassification"`
}

// NewStruct creates a new relationship struct
func (*moleculeAtcClassificationR) NewStruct() *moleculeAtcClassificationR {
	return &moleculeAtcClassificationR{}
}

func (r *moleculeAtcClassificationR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *moleculeAtcClassificationR) GetLevel5AtcClassification() *AtcClassification {
	if r == nil {
		return nil
	}
	return r.Level5AtcClassification
}

// moleculeAtcClassificationL is where Load methods for each relationship are stored.
type moleculeAtcClassificationL struct{}

var (
	moleculeAtcClassificationAllColumns            = []string{"mol_atc_id", "level5", "molregno"}
	moleculeAtcClassificationColumnsWithoutDefault = []string{"mol_atc_id", "level5", "molregno"}
	moleculeAtcClassificationColumnsWithDefault    = []string{}
	moleculeAtcClassificationPrimaryKeyColumns     = []string{"mol_atc_id"}
	moleculeAtcClassificationGeneratedColumns      = []string{}
)

type (
	// MoleculeAtcClassificationSlice is an alias for a slice of pointers to MoleculeAtcClassification.
	// This should almost always be used instead of []MoleculeAtcClassification.
	MoleculeAtcClassificationSlice []*MoleculeAtcClassification
	// MoleculeAtcClassificationHook is the signature for custom MoleculeAtcClassification hook methods
	MoleculeAtcClassificationHook func(context.Context, boil.ContextExecutor, *MoleculeAtcClassification) error

	moleculeAtcClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moleculeAtcClassificationType                 = reflect.TypeOf(&MoleculeAtcClassification{})
	moleculeAtcClassificationMapping              = queries.MakeStructMapping(moleculeAtcClassificationType)
	moleculeAtcClassificationPrimaryKeyMapping, _ = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, moleculeAtcClassificationPrimaryKeyColumns)
	moleculeAtcClassificationInsertCacheMut       sync.RWMutex
	moleculeAtcClassificationInsertCache          = make(map[string]insertCache)
	moleculeAtcClassificationUpdateCacheMut       sync.RWMutex
	moleculeAtcClassificationUpdateCache          = make(map[string]updateCache)
	moleculeAtcClassificationUpsertCacheMut       sync.RWMutex
	moleculeAtcClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moleculeAtcClassificationAfterSelectHooks []MoleculeAtcClassificationHook

var moleculeAtcClassificationBeforeInsertHooks []MoleculeAtcClassificationHook
var moleculeAtcClassificationAfterInsertHooks []MoleculeAtcClassificationHook

var moleculeAtcClassificationBeforeUpdateHooks []MoleculeAtcClassificationHook
var moleculeAtcClassificationAfterUpdateHooks []MoleculeAtcClassificationHook

var moleculeAtcClassificationBeforeDeleteHooks []MoleculeAtcClassificationHook
var moleculeAtcClassificationAfterDeleteHooks []MoleculeAtcClassificationHook

var moleculeAtcClassificationBeforeUpsertHooks []MoleculeAtcClassificationHook
var moleculeAtcClassificationAfterUpsertHooks []MoleculeAtcClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MoleculeAtcClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MoleculeAtcClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MoleculeAtcClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MoleculeAtcClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MoleculeAtcClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MoleculeAtcClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MoleculeAtcClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MoleculeAtcClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MoleculeAtcClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moleculeAtcClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoleculeAtcClassificationHook registers your hook function for all future operations.
func AddMoleculeAtcClassificationHook(hookPoint boil.HookPoint, moleculeAtcClassificationHook MoleculeAtcClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moleculeAtcClassificationAfterSelectHooks = append(moleculeAtcClassificationAfterSelectHooks, moleculeAtcClassificationHook)
	case boil.BeforeInsertHook:
		moleculeAtcClassificationBeforeInsertHooks = append(moleculeAtcClassificationBeforeInsertHooks, moleculeAtcClassificationHook)
	case boil.AfterInsertHook:
		moleculeAtcClassificationAfterInsertHooks = append(moleculeAtcClassificationAfterInsertHooks, moleculeAtcClassificationHook)
	case boil.BeforeUpdateHook:
		moleculeAtcClassificationBeforeUpdateHooks = append(moleculeAtcClassificationBeforeUpdateHooks, moleculeAtcClassificationHook)
	case boil.AfterUpdateHook:
		moleculeAtcClassificationAfterUpdateHooks = append(moleculeAtcClassificationAfterUpdateHooks, moleculeAtcClassificationHook)
	case boil.BeforeDeleteHook:
		moleculeAtcClassificationBeforeDeleteHooks = append(moleculeAtcClassificationBeforeDeleteHooks, moleculeAtcClassificationHook)
	case boil.AfterDeleteHook:
		moleculeAtcClassificationAfterDeleteHooks = append(moleculeAtcClassificationAfterDeleteHooks, moleculeAtcClassificationHook)
	case boil.BeforeUpsertHook:
		moleculeAtcClassificationBeforeUpsertHooks = append(moleculeAtcClassificationBeforeUpsertHooks, moleculeAtcClassificationHook)
	case boil.AfterUpsertHook:
		moleculeAtcClassificationAfterUpsertHooks = append(moleculeAtcClassificationAfterUpsertHooks, moleculeAtcClassificationHook)
	}
}

// One returns a single moleculeAtcClassification record from the query.
func (q moleculeAtcClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MoleculeAtcClassification, error) {
	o := &MoleculeAtcClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for molecule_atc_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MoleculeAtcClassification records from the query.
func (q moleculeAtcClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoleculeAtcClassificationSlice, error) {
	var o []*MoleculeAtcClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MoleculeAtcClassification slice")
	}

	if len(moleculeAtcClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MoleculeAtcClassification records in the query.
func (q moleculeAtcClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count molecule_atc_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q moleculeAtcClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if molecule_atc_classification exists")
	}

	return count > 0, nil
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *MoleculeAtcClassification) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// Level5AtcClassification pointed to by the foreign key.
func (o *MoleculeAtcClassification) Level5AtcClassification(mods ...qm.QueryMod) atcClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"level5\" = ?", o.Level5),
	}

	queryMods = append(queryMods, mods...)

	return AtcClassifications(queryMods...)
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeAtcClassificationL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeAtcClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeAtcClassification
	var object *MoleculeAtcClassification

	if singular {
		object = maybeMoleculeAtcClassification.(*MoleculeAtcClassification)
	} else {
		slice = *maybeMoleculeAtcClassification.(*[]*MoleculeAtcClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeAtcClassificationR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeAtcClassificationR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(moleculeAtcClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoMoleculeAtcClassifications = append(foreign.R.MolregnoMoleculeAtcClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoMoleculeAtcClassifications = append(foreign.R.MolregnoMoleculeAtcClassifications, local)
				break
			}
		}
	}

	return nil
}

// LoadLevel5AtcClassification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moleculeAtcClassificationL) LoadLevel5AtcClassification(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoleculeAtcClassification interface{}, mods queries.Applicator) error {
	var slice []*MoleculeAtcClassification
	var object *MoleculeAtcClassification

	if singular {
		object = maybeMoleculeAtcClassification.(*MoleculeAtcClassification)
	} else {
		slice = *maybeMoleculeAtcClassification.(*[]*MoleculeAtcClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moleculeAtcClassificationR{}
		}
		args = append(args, object.Level5)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moleculeAtcClassificationR{}
			}

			for _, a := range args {
				if a == obj.Level5 {
					continue Outer
				}
			}

			args = append(args, obj.Level5)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`atc_classification`),
		qm.WhereIn(`atc_classification.level5 in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AtcClassification")
	}

	var resultSlice []*AtcClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AtcClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for atc_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for atc_classification")
	}

	if len(moleculeAtcClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Level5AtcClassification = foreign
		if foreign.R == nil {
			foreign.R = &atcClassificationR{}
		}
		foreign.R.Level5MoleculeAtcClassifications = append(foreign.R.Level5MoleculeAtcClassifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Level5 == foreign.Level5 {
				local.R.Level5AtcClassification = foreign
				if foreign.R == nil {
					foreign.R = &atcClassificationR{}
				}
				foreign.R.Level5MoleculeAtcClassifications = append(foreign.R.Level5MoleculeAtcClassifications, local)
				break
			}
		}
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the moleculeAtcClassification to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoMoleculeAtcClassifications.
func (o *MoleculeAtcClassification) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_atc_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeAtcClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.MolAtcID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &moleculeAtcClassificationR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoMoleculeAtcClassifications: MoleculeAtcClassificationSlice{o},
		}
	} else {
		related.R.MolregnoMoleculeAtcClassifications = append(related.R.MolregnoMoleculeAtcClassifications, o)
	}

	return nil
}

// SetLevel5AtcClassification of the moleculeAtcClassification to the related item.
// Sets o.R.Level5AtcClassification to related.
// Adds o to related.R.Level5MoleculeAtcClassifications.
func (o *MoleculeAtcClassification) SetLevel5AtcClassification(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AtcClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"molecule_atc_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"level5"}),
		strmangle.WhereClause("\"", "\"", 0, moleculeAtcClassificationPrimaryKeyColumns),
	)
	values := []interface{}{related.Level5, o.MolAtcID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Level5 = related.Level5
	if o.R == nil {
		o.R = &moleculeAtcClassificationR{
			Level5AtcClassification: related,
		}
	} else {
		o.R.Level5AtcClassification = related
	}

	if related.R == nil {
		related.R = &atcClassificationR{
			Level5MoleculeAtcClassifications: MoleculeAtcClassificationSlice{o},
		}
	} else {
		related.R.Level5MoleculeAtcClassifications = append(related.R.Level5MoleculeAtcClassifications, o)
	}

	return nil
}

// MoleculeAtcClassifications retrieves all the records using an executor.
func MoleculeAtcClassifications(mods ...qm.QueryMod) moleculeAtcClassificationQuery {
	mods = append(mods, qm.From("\"molecule_atc_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"molecule_atc_classification\".*"})
	}

	return moleculeAtcClassificationQuery{q}
}

// FindMoleculeAtcClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoleculeAtcClassification(ctx context.Context, exec boil.ContextExecutor, molAtcID int64, selectCols ...string) (*MoleculeAtcClassification, error) {
	moleculeAtcClassificationObj := &MoleculeAtcClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"molecule_atc_classification\" where \"mol_atc_id\"=?", sel,
	)

	q := queries.Raw(query, molAtcID)

	err := q.Bind(ctx, exec, moleculeAtcClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from molecule_atc_classification")
	}

	if err = moleculeAtcClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moleculeAtcClassificationObj, err
	}

	return moleculeAtcClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MoleculeAtcClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_atc_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeAtcClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moleculeAtcClassificationInsertCacheMut.RLock()
	cache, cached := moleculeAtcClassificationInsertCache[key]
	moleculeAtcClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moleculeAtcClassificationAllColumns,
			moleculeAtcClassificationColumnsWithDefault,
			moleculeAtcClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"molecule_atc_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"molecule_atc_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into molecule_atc_classification")
	}

	if !cached {
		moleculeAtcClassificationInsertCacheMut.Lock()
		moleculeAtcClassificationInsertCache[key] = cache
		moleculeAtcClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MoleculeAtcClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MoleculeAtcClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moleculeAtcClassificationUpdateCacheMut.RLock()
	cache, cached := moleculeAtcClassificationUpdateCache[key]
	moleculeAtcClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moleculeAtcClassificationAllColumns,
			moleculeAtcClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update molecule_atc_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"molecule_atc_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, moleculeAtcClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, append(wl, moleculeAtcClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update molecule_atc_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for molecule_atc_classification")
	}

	if !cached {
		moleculeAtcClassificationUpdateCacheMut.Lock()
		moleculeAtcClassificationUpdateCache[key] = cache
		moleculeAtcClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q moleculeAtcClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for molecule_atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for molecule_atc_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoleculeAtcClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeAtcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"molecule_atc_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeAtcClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moleculeAtcClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moleculeAtcClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MoleculeAtcClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no molecule_atc_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moleculeAtcClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moleculeAtcClassificationUpsertCacheMut.RLock()
	cache, cached := moleculeAtcClassificationUpsertCache[key]
	moleculeAtcClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			moleculeAtcClassificationAllColumns,
			moleculeAtcClassificationColumnsWithDefault,
			moleculeAtcClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			moleculeAtcClassificationAllColumns,
			moleculeAtcClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert molecule_atc_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(moleculeAtcClassificationPrimaryKeyColumns))
			copy(conflict, moleculeAtcClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"molecule_atc_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moleculeAtcClassificationType, moleculeAtcClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert molecule_atc_classification")
	}

	if !cached {
		moleculeAtcClassificationUpsertCacheMut.Lock()
		moleculeAtcClassificationUpsertCache[key] = cache
		moleculeAtcClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MoleculeAtcClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MoleculeAtcClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MoleculeAtcClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moleculeAtcClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"molecule_atc_classification\" WHERE \"mol_atc_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from molecule_atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for molecule_atc_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q moleculeAtcClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moleculeAtcClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from molecule_atc_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_atc_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoleculeAtcClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moleculeAtcClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeAtcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"molecule_atc_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeAtcClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moleculeAtcClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for molecule_atc_classification")
	}

	if len(moleculeAtcClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MoleculeAtcClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoleculeAtcClassification(ctx, exec, o.MolAtcID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoleculeAtcClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoleculeAtcClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moleculeAtcClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"molecule_atc_classification\".* FROM \"molecule_atc_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, moleculeAtcClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MoleculeAtcClassificationSlice")
	}

	*o = slice

	return nil
}

// MoleculeAtcClassificationExists checks if the MoleculeAtcClassification row exists.
func MoleculeAtcClassificationExists(ctx context.Context, exec boil.ContextExecutor, molAtcID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"molecule_atc_classification\" where \"mol_atc_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, molAtcID)
	}
	row := exec.QueryRowContext(ctx, sql, molAtcID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if molecule_atc_classification exists")
	}

	return exists, nil
}
