// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reaction is an object representing the database table.
type Reaction struct {
	ID                   null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Directional          string      `boil:"directional" json:"directional" toml:"directional" yaml:"directional"`
	Accession            null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Status               null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Comment              null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Equation             null.String `boil:"equation" json:"equation,omitempty" toml:"equation" yaml:"equation,omitempty"`
	HTMLEquation         null.String `boil:"html_equation" json:"html_equation,omitempty" toml:"html_equation" yaml:"html_equation,omitempty"`
	IsChemicallyBalanced string      `boil:"is_chemically_balanced" json:"is_chemically_balanced" toml:"is_chemically_balanced" yaml:"is_chemically_balanced"`
	IsTransport          string      `boil:"is_transport" json:"is_transport" toml:"is_transport" yaml:"is_transport"`
	Ec                   null.String `boil:"ec" json:"ec,omitempty" toml:"ec" yaml:"ec,omitempty"`
	Location             null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`

	R *reactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionColumns = struct {
	ID                   string
	Directional          string
	Accession            string
	Status               string
	Comment              string
	Equation             string
	HTMLEquation         string
	IsChemicallyBalanced string
	IsTransport          string
	Ec                   string
	Location             string
}{
	ID:                   "id",
	Directional:          "directional",
	Accession:            "accession",
	Status:               "status",
	Comment:              "comment",
	Equation:             "equation",
	HTMLEquation:         "html_equation",
	IsChemicallyBalanced: "is_chemically_balanced",
	IsTransport:          "is_transport",
	Ec:                   "ec",
	Location:             "location",
}

var ReactionTableColumns = struct {
	ID                   string
	Directional          string
	Accession            string
	Status               string
	Comment              string
	Equation             string
	HTMLEquation         string
	IsChemicallyBalanced string
	IsTransport          string
	Ec                   string
	Location             string
}{
	ID:                   "reaction.id",
	Directional:          "reaction.directional",
	Accession:            "reaction.accession",
	Status:               "reaction.status",
	Comment:              "reaction.comment",
	Equation:             "reaction.equation",
	HTMLEquation:         "reaction.html_equation",
	IsChemicallyBalanced: "reaction.is_chemically_balanced",
	IsTransport:          "reaction.is_transport",
	Ec:                   "reaction.ec",
	Location:             "reaction.location",
}

// Generated where

var ReactionWhere = struct {
	ID                   whereHelpernull_Int64
	Directional          whereHelperstring
	Accession            whereHelpernull_String
	Status               whereHelpernull_String
	Comment              whereHelpernull_String
	Equation             whereHelpernull_String
	HTMLEquation         whereHelpernull_String
	IsChemicallyBalanced whereHelperstring
	IsTransport          whereHelperstring
	Ec                   whereHelpernull_String
	Location             whereHelpernull_String
}{
	ID:                   whereHelpernull_Int64{field: "\"reaction\".\"id\""},
	Directional:          whereHelperstring{field: "\"reaction\".\"directional\""},
	Accession:            whereHelpernull_String{field: "\"reaction\".\"accession\""},
	Status:               whereHelpernull_String{field: "\"reaction\".\"status\""},
	Comment:              whereHelpernull_String{field: "\"reaction\".\"comment\""},
	Equation:             whereHelpernull_String{field: "\"reaction\".\"equation\""},
	HTMLEquation:         whereHelpernull_String{field: "\"reaction\".\"html_equation\""},
	IsChemicallyBalanced: whereHelperstring{field: "\"reaction\".\"is_chemically_balanced\""},
	IsTransport:          whereHelperstring{field: "\"reaction\".\"is_transport\""},
	Ec:                   whereHelpernull_String{field: "\"reaction\".\"ec\""},
	Location:             whereHelpernull_String{field: "\"reaction\".\"location\""},
}

// ReactionRels is where relationship names are stored.
var ReactionRels = struct {
	ReactionsideReactions string
	Uniprots              string
}{
	ReactionsideReactions: "ReactionsideReactions",
	Uniprots:              "Uniprots",
}

// reactionR is where relationships are stored.
type reactionR struct {
	ReactionsideReactions ReactionsideReactionSlice `boil:"ReactionsideReactions" json:"ReactionsideReactions" toml:"ReactionsideReactions" yaml:"ReactionsideReactions"`
	Uniprots              UniprotSlice              `boil:"Uniprots" json:"Uniprots" toml:"Uniprots" yaml:"Uniprots"`
}

// NewStruct creates a new relationship struct
func (*reactionR) NewStruct() *reactionR {
	return &reactionR{}
}

func (r *reactionR) GetReactionsideReactions() ReactionsideReactionSlice {
	if r == nil {
		return nil
	}
	return r.ReactionsideReactions
}

func (r *reactionR) GetUniprots() UniprotSlice {
	if r == nil {
		return nil
	}
	return r.Uniprots
}

// reactionL is where Load methods for each relationship are stored.
type reactionL struct{}

var (
	reactionAllColumns            = []string{"id", "directional", "accession", "status", "comment", "equation", "html_equation", "is_chemically_balanced", "is_transport", "ec", "location"}
	reactionColumnsWithoutDefault = []string{}
	reactionColumnsWithDefault    = []string{"id", "directional", "accession", "status", "comment", "equation", "html_equation", "is_chemically_balanced", "is_transport", "ec", "location"}
	reactionPrimaryKeyColumns     = []string{"accession"}
	reactionGeneratedColumns      = []string{}
)

type (
	// ReactionSlice is an alias for a slice of pointers to Reaction.
	// This should almost always be used instead of []Reaction.
	ReactionSlice []*Reaction
	// ReactionHook is the signature for custom Reaction hook methods
	ReactionHook func(context.Context, boil.ContextExecutor, *Reaction) error

	reactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionType                 = reflect.TypeOf(&Reaction{})
	reactionMapping              = queries.MakeStructMapping(reactionType)
	reactionPrimaryKeyMapping, _ = queries.BindMapping(reactionType, reactionMapping, reactionPrimaryKeyColumns)
	reactionInsertCacheMut       sync.RWMutex
	reactionInsertCache          = make(map[string]insertCache)
	reactionUpdateCacheMut       sync.RWMutex
	reactionUpdateCache          = make(map[string]updateCache)
	reactionUpsertCacheMut       sync.RWMutex
	reactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionAfterSelectHooks []ReactionHook

var reactionBeforeInsertHooks []ReactionHook
var reactionAfterInsertHooks []ReactionHook

var reactionBeforeUpdateHooks []ReactionHook
var reactionAfterUpdateHooks []ReactionHook

var reactionBeforeDeleteHooks []ReactionHook
var reactionAfterDeleteHooks []ReactionHook

var reactionBeforeUpsertHooks []ReactionHook
var reactionAfterUpsertHooks []ReactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionHook registers your hook function for all future operations.
func AddReactionHook(hookPoint boil.HookPoint, reactionHook ReactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionAfterSelectHooks = append(reactionAfterSelectHooks, reactionHook)
	case boil.BeforeInsertHook:
		reactionBeforeInsertHooks = append(reactionBeforeInsertHooks, reactionHook)
	case boil.AfterInsertHook:
		reactionAfterInsertHooks = append(reactionAfterInsertHooks, reactionHook)
	case boil.BeforeUpdateHook:
		reactionBeforeUpdateHooks = append(reactionBeforeUpdateHooks, reactionHook)
	case boil.AfterUpdateHook:
		reactionAfterUpdateHooks = append(reactionAfterUpdateHooks, reactionHook)
	case boil.BeforeDeleteHook:
		reactionBeforeDeleteHooks = append(reactionBeforeDeleteHooks, reactionHook)
	case boil.AfterDeleteHook:
		reactionAfterDeleteHooks = append(reactionAfterDeleteHooks, reactionHook)
	case boil.BeforeUpsertHook:
		reactionBeforeUpsertHooks = append(reactionBeforeUpsertHooks, reactionHook)
	case boil.AfterUpsertHook:
		reactionAfterUpsertHooks = append(reactionAfterUpsertHooks, reactionHook)
	}
}

// One returns a single reaction record from the query.
func (q reactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reaction, error) {
	o := &Reaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reaction")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reaction records from the query.
func (q reactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionSlice, error) {
	var o []*Reaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reaction slice")
	}

	if len(reactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reaction records in the query.
func (q reactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reaction exists")
	}

	return count > 0, nil
}

// ReactionsideReactions retrieves all the reactionside_reaction's ReactionsideReactions with an executor.
func (o *Reaction) ReactionsideReactions(mods ...qm.QueryMod) reactionsideReactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactionside_reaction\".\"reaction\"=?", o.Accession),
	)

	return ReactionsideReactions(queryMods...)
}

// Uniprots retrieves all the uniprot's Uniprots with an executor.
func (o *Reaction) Uniprots(mods ...qm.QueryMod) uniprotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"uniprot_to_reaction\" on \"uniprot\".\"accession\" = \"uniprot_to_reaction\".\"uniprot\""),
		qm.Where("\"uniprot_to_reaction\".\"reaction\"=?", o.Accession),
	)

	return Uniprots(queryMods...)
}

// LoadReactionsideReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reactionL) LoadReactionsideReactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReaction interface{}, mods queries.Applicator) error {
	var slice []*Reaction
	var object *Reaction

	if singular {
		object = maybeReaction.(*Reaction)
	} else {
		slice = *maybeReaction.(*[]*Reaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionside_reaction`),
		qm.WhereIn(`reactionside_reaction.reaction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactionside_reaction")
	}

	var resultSlice []*ReactionsideReaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactionside_reaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactionside_reaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionside_reaction")
	}

	if len(reactionsideReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReactionsideReactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionsideReactionR{}
			}
			foreign.R.ReactionsideReactionReaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Reaction) {
				local.R.ReactionsideReactions = append(local.R.ReactionsideReactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionsideReactionR{}
				}
				foreign.R.ReactionsideReactionReaction = local
				break
			}
		}
	}

	return nil
}

// LoadUniprots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reactionL) LoadUniprots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReaction interface{}, mods queries.Applicator) error {
	var slice []*Reaction
	var object *Reaction

	if singular {
		object = maybeReaction.(*Reaction)
	} else {
		slice = *maybeReaction.(*[]*Reaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"uniprot\".\"accession\", \"uniprot\".\"database\", \"uniprot\".\"seqhash\", \"a\".\"reaction\""),
		qm.From("\"uniprot\""),
		qm.InnerJoin("\"uniprot_to_reaction\" as \"a\" on \"uniprot\".\"accession\" = \"a\".\"uniprot\""),
		qm.WhereIn("\"a\".\"reaction\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load uniprot")
	}

	var resultSlice []*Uniprot

	var localJoinCols []null.String
	for results.Next() {
		one := new(Uniprot)
		var localJoinCol null.String

		err = results.Scan(&one.Accession, &one.Database, &one.Seqhash, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for uniprot")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice uniprot")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on uniprot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uniprot")
	}

	if len(uniprotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Uniprots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uniprotR{}
			}
			foreign.R.Reactions = append(foreign.R.Reactions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.Accession, localJoinCol) {
				local.R.Uniprots = append(local.R.Uniprots, foreign)
				if foreign.R == nil {
					foreign.R = &uniprotR{}
				}
				foreign.R.Reactions = append(foreign.R.Reactions, local)
				break
			}
		}
	}

	return nil
}

// AddReactionsideReactions adds the given related objects to the existing relationships
// of the reaction, optionally inserting them as new records.
// Appends related to o.R.ReactionsideReactions.
// Sets related.R.ReactionsideReactionReaction appropriately.
func (o *Reaction) AddReactionsideReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReactionsideReaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Reaction, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactionside_reaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"reaction"}),
				strmangle.WhereClause("\"", "\"", 0, reactionsideReactionPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Reaction, rel.Reactionside}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Reaction, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &reactionR{
			ReactionsideReactions: related,
		}
	} else {
		o.R.ReactionsideReactions = append(o.R.ReactionsideReactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionsideReactionR{
				ReactionsideReactionReaction: o,
			}
		} else {
			rel.R.ReactionsideReactionReaction = o
		}
	}
	return nil
}

// AddUniprots adds the given related objects to the existing relationships
// of the reaction, optionally inserting them as new records.
// Appends related to o.R.Uniprots.
// Sets related.R.Reactions appropriately.
func (o *Reaction) AddUniprots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Uniprot) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"uniprot_to_reaction\" (\"reaction\", \"uniprot\") values (?, ?)"
		values := []interface{}{o.Accession, rel.Accession}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &reactionR{
			Uniprots: related,
		}
	} else {
		o.R.Uniprots = append(o.R.Uniprots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uniprotR{
				Reactions: ReactionSlice{o},
			}
		} else {
			rel.R.Reactions = append(rel.R.Reactions, o)
		}
	}
	return nil
}

// SetUniprots removes all previously related items of the
// reaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reactions's Uniprots accordingly.
// Replaces o.R.Uniprots with related.
// Sets related.R.Reactions's Uniprots accordingly.
func (o *Reaction) SetUniprots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Uniprot) error {
	query := "delete from \"uniprot_to_reaction\" where \"reaction\" = ?"
	values := []interface{}{o.Accession}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUniprotsFromReactionsSlice(o, related)
	if o.R != nil {
		o.R.Uniprots = nil
	}

	return o.AddUniprots(ctx, exec, insert, related...)
}

// RemoveUniprots relationships from objects passed in.
// Removes related items from R.Uniprots (uses pointer comparison, removal does not keep order)
// Sets related.R.Reactions.
func (o *Reaction) RemoveUniprots(ctx context.Context, exec boil.ContextExecutor, related ...*Uniprot) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"uniprot_to_reaction\" where \"reaction\" = ? and \"uniprot\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.Accession}
	for _, rel := range related {
		values = append(values, rel.Accession)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUniprotsFromReactionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Uniprots {
			if rel != ri {
				continue
			}

			ln := len(o.R.Uniprots)
			if ln > 1 && i < ln-1 {
				o.R.Uniprots[i] = o.R.Uniprots[ln-1]
			}
			o.R.Uniprots = o.R.Uniprots[:ln-1]
			break
		}
	}

	return nil
}

func removeUniprotsFromReactionsSlice(o *Reaction, related []*Uniprot) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Reactions {
			if !queries.Equal(o.Accession, ri.Accession) {
				continue
			}

			ln := len(rel.R.Reactions)
			if ln > 1 && i < ln-1 {
				rel.R.Reactions[i] = rel.R.Reactions[ln-1]
			}
			rel.R.Reactions = rel.R.Reactions[:ln-1]
			break
		}
	}
}

// Reactions retrieves all the records using an executor.
func Reactions(mods ...qm.QueryMod) reactionQuery {
	mods = append(mods, qm.From("\"reaction\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reaction\".*"})
	}

	return reactionQuery{q}
}

// FindReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReaction(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*Reaction, error) {
	reactionObj := &Reaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reaction\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, reactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reaction")
	}

	if err = reactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionObj, err
	}

	return reactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reaction provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionInsertCacheMut.RLock()
	cache, cached := reactionInsertCache[key]
	reactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionAllColumns,
			reactionColumnsWithDefault,
			reactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionType, reactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reaction")
	}

	if !cached {
		reactionInsertCacheMut.Lock()
		reactionInsertCache[key] = cache
		reactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionUpdateCacheMut.RLock()
	cache, cached := reactionUpdateCache[key]
	reactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionAllColumns,
			reactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, append(wl, reactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reaction")
	}

	if !cached {
		reactionUpdateCacheMut.Lock()
		reactionUpdateCache[key] = cache
		reactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reaction provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionUpsertCacheMut.RLock()
	cache, cached := reactionUpsertCache[key]
	reactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactionAllColumns,
			reactionColumnsWithDefault,
			reactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactionAllColumns,
			reactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactionPrimaryKeyColumns))
			copy(conflict, reactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionType, reactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reaction")
	}

	if !cached {
		reactionUpsertCacheMut.Lock()
		reactionUpsertCache[key] = cache
		reactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionPrimaryKeyMapping)
	sql := "DELETE FROM \"reaction\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reaction")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reaction")
	}

	if len(reactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReaction(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reaction\".* FROM \"reaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionSlice")
	}

	*o = slice

	return nil
}

// ReactionExists checks if the Reaction row exists.
func ReactionExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reaction\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reaction exists")
	}

	return exists, nil
}
