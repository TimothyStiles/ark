// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechanismRef is an object representing the database table.
type MechanismRef struct {
	MecrefID int64       `boil:"mecref_id" json:"mecref_id" toml:"mecref_id" yaml:"mecref_id"`
	MecID    int64       `boil:"mec_id" json:"mec_id" toml:"mec_id" yaml:"mec_id"`
	RefType  string      `boil:"ref_type" json:"ref_type" toml:"ref_type" yaml:"ref_type"`
	RefID    null.String `boil:"ref_id" json:"ref_id,omitempty" toml:"ref_id" yaml:"ref_id,omitempty"`
	RefURL   null.String `boil:"ref_url" json:"ref_url,omitempty" toml:"ref_url" yaml:"ref_url,omitempty"`

	R *mechanismRefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechanismRefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechanismRefColumns = struct {
	MecrefID string
	MecID    string
	RefType  string
	RefID    string
	RefURL   string
}{
	MecrefID: "mecref_id",
	MecID:    "mec_id",
	RefType:  "ref_type",
	RefID:    "ref_id",
	RefURL:   "ref_url",
}

var MechanismRefTableColumns = struct {
	MecrefID string
	MecID    string
	RefType  string
	RefID    string
	RefURL   string
}{
	MecrefID: "mechanism_refs.mecref_id",
	MecID:    "mechanism_refs.mec_id",
	RefType:  "mechanism_refs.ref_type",
	RefID:    "mechanism_refs.ref_id",
	RefURL:   "mechanism_refs.ref_url",
}

// Generated where

var MechanismRefWhere = struct {
	MecrefID whereHelperint64
	MecID    whereHelperint64
	RefType  whereHelperstring
	RefID    whereHelpernull_String
	RefURL   whereHelpernull_String
}{
	MecrefID: whereHelperint64{field: "\"mechanism_refs\".\"mecref_id\""},
	MecID:    whereHelperint64{field: "\"mechanism_refs\".\"mec_id\""},
	RefType:  whereHelperstring{field: "\"mechanism_refs\".\"ref_type\""},
	RefID:    whereHelpernull_String{field: "\"mechanism_refs\".\"ref_id\""},
	RefURL:   whereHelpernull_String{field: "\"mechanism_refs\".\"ref_url\""},
}

// MechanismRefRels is where relationship names are stored.
var MechanismRefRels = struct {
	Mec string
}{
	Mec: "Mec",
}

// mechanismRefR is where relationships are stored.
type mechanismRefR struct {
	Mec *DrugMechanism `boil:"Mec" json:"Mec" toml:"Mec" yaml:"Mec"`
}

// NewStruct creates a new relationship struct
func (*mechanismRefR) NewStruct() *mechanismRefR {
	return &mechanismRefR{}
}

func (r *mechanismRefR) GetMec() *DrugMechanism {
	if r == nil {
		return nil
	}
	return r.Mec
}

// mechanismRefL is where Load methods for each relationship are stored.
type mechanismRefL struct{}

var (
	mechanismRefAllColumns            = []string{"mecref_id", "mec_id", "ref_type", "ref_id", "ref_url"}
	mechanismRefColumnsWithoutDefault = []string{"mecref_id", "mec_id", "ref_type"}
	mechanismRefColumnsWithDefault    = []string{"ref_id", "ref_url"}
	mechanismRefPrimaryKeyColumns     = []string{"mecref_id"}
	mechanismRefGeneratedColumns      = []string{}
)

type (
	// MechanismRefSlice is an alias for a slice of pointers to MechanismRef.
	// This should almost always be used instead of []MechanismRef.
	MechanismRefSlice []*MechanismRef
	// MechanismRefHook is the signature for custom MechanismRef hook methods
	MechanismRefHook func(context.Context, boil.ContextExecutor, *MechanismRef) error

	mechanismRefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechanismRefType                 = reflect.TypeOf(&MechanismRef{})
	mechanismRefMapping              = queries.MakeStructMapping(mechanismRefType)
	mechanismRefPrimaryKeyMapping, _ = queries.BindMapping(mechanismRefType, mechanismRefMapping, mechanismRefPrimaryKeyColumns)
	mechanismRefInsertCacheMut       sync.RWMutex
	mechanismRefInsertCache          = make(map[string]insertCache)
	mechanismRefUpdateCacheMut       sync.RWMutex
	mechanismRefUpdateCache          = make(map[string]updateCache)
	mechanismRefUpsertCacheMut       sync.RWMutex
	mechanismRefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechanismRefAfterSelectHooks []MechanismRefHook

var mechanismRefBeforeInsertHooks []MechanismRefHook
var mechanismRefAfterInsertHooks []MechanismRefHook

var mechanismRefBeforeUpdateHooks []MechanismRefHook
var mechanismRefAfterUpdateHooks []MechanismRefHook

var mechanismRefBeforeDeleteHooks []MechanismRefHook
var mechanismRefAfterDeleteHooks []MechanismRefHook

var mechanismRefBeforeUpsertHooks []MechanismRefHook
var mechanismRefAfterUpsertHooks []MechanismRefHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechanismRef) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechanismRef) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechanismRef) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechanismRef) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechanismRef) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechanismRef) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechanismRef) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechanismRef) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechanismRef) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mechanismRefAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechanismRefHook registers your hook function for all future operations.
func AddMechanismRefHook(hookPoint boil.HookPoint, mechanismRefHook MechanismRefHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechanismRefAfterSelectHooks = append(mechanismRefAfterSelectHooks, mechanismRefHook)
	case boil.BeforeInsertHook:
		mechanismRefBeforeInsertHooks = append(mechanismRefBeforeInsertHooks, mechanismRefHook)
	case boil.AfterInsertHook:
		mechanismRefAfterInsertHooks = append(mechanismRefAfterInsertHooks, mechanismRefHook)
	case boil.BeforeUpdateHook:
		mechanismRefBeforeUpdateHooks = append(mechanismRefBeforeUpdateHooks, mechanismRefHook)
	case boil.AfterUpdateHook:
		mechanismRefAfterUpdateHooks = append(mechanismRefAfterUpdateHooks, mechanismRefHook)
	case boil.BeforeDeleteHook:
		mechanismRefBeforeDeleteHooks = append(mechanismRefBeforeDeleteHooks, mechanismRefHook)
	case boil.AfterDeleteHook:
		mechanismRefAfterDeleteHooks = append(mechanismRefAfterDeleteHooks, mechanismRefHook)
	case boil.BeforeUpsertHook:
		mechanismRefBeforeUpsertHooks = append(mechanismRefBeforeUpsertHooks, mechanismRefHook)
	case boil.AfterUpsertHook:
		mechanismRefAfterUpsertHooks = append(mechanismRefAfterUpsertHooks, mechanismRefHook)
	}
}

// One returns a single mechanismRef record from the query.
func (q mechanismRefQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MechanismRef, error) {
	o := &MechanismRef{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mechanism_refs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechanismRef records from the query.
func (q mechanismRefQuery) All(ctx context.Context, exec boil.ContextExecutor) (MechanismRefSlice, error) {
	var o []*MechanismRef

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MechanismRef slice")
	}

	if len(mechanismRefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechanismRef records in the query.
func (q mechanismRefQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mechanism_refs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechanismRefQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mechanism_refs exists")
	}

	return count > 0, nil
}

// Mec pointed to by the foreign key.
func (o *MechanismRef) Mec(mods ...qm.QueryMod) drugMechanismQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mec_id\" = ?", o.MecID),
	}

	queryMods = append(queryMods, mods...)

	return DrugMechanisms(queryMods...)
}

// LoadMec allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechanismRefL) LoadMec(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMechanismRef interface{}, mods queries.Applicator) error {
	var slice []*MechanismRef
	var object *MechanismRef

	if singular {
		object = maybeMechanismRef.(*MechanismRef)
	} else {
		slice = *maybeMechanismRef.(*[]*MechanismRef)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechanismRefR{}
		}
		args = append(args, object.MecID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechanismRefR{}
			}

			for _, a := range args {
				if a == obj.MecID {
					continue Outer
				}
			}

			args = append(args, obj.MecID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.mec_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DrugMechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DrugMechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(mechanismRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mec = foreign
		if foreign.R == nil {
			foreign.R = &drugMechanismR{}
		}
		foreign.R.MecMechanismRefs = append(foreign.R.MecMechanismRefs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MecID == foreign.MecID {
				local.R.Mec = foreign
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.MecMechanismRefs = append(foreign.R.MecMechanismRefs, local)
				break
			}
		}
	}

	return nil
}

// SetMec of the mechanismRef to the related item.
// Sets o.R.Mec to related.
// Adds o to related.R.MecMechanismRefs.
func (o *MechanismRef) SetMec(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DrugMechanism) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechanism_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"mec_id"}),
		strmangle.WhereClause("\"", "\"", 0, mechanismRefPrimaryKeyColumns),
	)
	values := []interface{}{related.MecID, o.MecrefID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MecID = related.MecID
	if o.R == nil {
		o.R = &mechanismRefR{
			Mec: related,
		}
	} else {
		o.R.Mec = related
	}

	if related.R == nil {
		related.R = &drugMechanismR{
			MecMechanismRefs: MechanismRefSlice{o},
		}
	} else {
		related.R.MecMechanismRefs = append(related.R.MecMechanismRefs, o)
	}

	return nil
}

// MechanismRefs retrieves all the records using an executor.
func MechanismRefs(mods ...qm.QueryMod) mechanismRefQuery {
	mods = append(mods, qm.From("\"mechanism_refs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"mechanism_refs\".*"})
	}

	return mechanismRefQuery{q}
}

// FindMechanismRef retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechanismRef(ctx context.Context, exec boil.ContextExecutor, mecrefID int64, selectCols ...string) (*MechanismRef, error) {
	mechanismRefObj := &MechanismRef{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechanism_refs\" where \"mecref_id\"=?", sel,
	)

	q := queries.Raw(query, mecrefID)

	err := q.Bind(ctx, exec, mechanismRefObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mechanism_refs")
	}

	if err = mechanismRefObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mechanismRefObj, err
	}

	return mechanismRefObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechanismRef) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mechanism_refs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechanismRefColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechanismRefInsertCacheMut.RLock()
	cache, cached := mechanismRefInsertCache[key]
	mechanismRefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechanismRefAllColumns,
			mechanismRefColumnsWithDefault,
			mechanismRefColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechanismRefType, mechanismRefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechanismRefType, mechanismRefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechanism_refs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechanism_refs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mechanism_refs")
	}

	if !cached {
		mechanismRefInsertCacheMut.Lock()
		mechanismRefInsertCache[key] = cache
		mechanismRefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MechanismRef.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechanismRef) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechanismRefUpdateCacheMut.RLock()
	cache, cached := mechanismRefUpdateCache[key]
	mechanismRefUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechanismRefAllColumns,
			mechanismRefPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mechanism_refs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechanism_refs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, mechanismRefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechanismRefType, mechanismRefMapping, append(wl, mechanismRefPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mechanism_refs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mechanism_refs")
	}

	if !cached {
		mechanismRefUpdateCacheMut.Lock()
		mechanismRefUpdateCache[key] = cache
		mechanismRefUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechanismRefQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mechanism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mechanism_refs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechanismRefSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechanismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechanism_refs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mechanismRefPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mechanismRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mechanismRef")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechanismRef) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mechanism_refs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechanismRefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechanismRefUpsertCacheMut.RLock()
	cache, cached := mechanismRefUpsertCache[key]
	mechanismRefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechanismRefAllColumns,
			mechanismRefColumnsWithDefault,
			mechanismRefColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mechanismRefAllColumns,
			mechanismRefPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mechanism_refs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechanismRefPrimaryKeyColumns))
			copy(conflict, mechanismRefPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"mechanism_refs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechanismRefType, mechanismRefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechanismRefType, mechanismRefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mechanism_refs")
	}

	if !cached {
		mechanismRefUpsertCacheMut.Lock()
		mechanismRefUpsertCache[key] = cache
		mechanismRefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MechanismRef record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechanismRef) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MechanismRef provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechanismRefPrimaryKeyMapping)
	sql := "DELETE FROM \"mechanism_refs\" WHERE \"mecref_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mechanism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mechanism_refs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechanismRefQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mechanismRefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mechanism_refs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mechanism_refs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechanismRefSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechanismRefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechanismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mechanism_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mechanismRefPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mechanismRef slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mechanism_refs")
	}

	if len(mechanismRefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechanismRef) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMechanismRef(ctx, exec, o.MecrefID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechanismRefSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechanismRefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechanismRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechanism_refs\".* FROM \"mechanism_refs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mechanismRefPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MechanismRefSlice")
	}

	*o = slice

	return nil
}

// MechanismRefExists checks if the MechanismRef row exists.
func MechanismRefExists(ctx context.Context, exec boil.ContextExecutor, mecrefID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechanism_refs\" where \"mecref_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mecrefID)
	}
	row := exec.QueryRowContext(ctx, sql, mecrefID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mechanism_refs exists")
	}

	return exists, nil
}
