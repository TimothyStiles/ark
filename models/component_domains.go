// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ComponentDomain is an object representing the database table.
type ComponentDomain struct {
	CompdID       int64      `boil:"compd_id" json:"compd_id" toml:"compd_id" yaml:"compd_id"`
	DomainID      null.Int64 `boil:"domain_id" json:"domain_id,omitempty" toml:"domain_id" yaml:"domain_id,omitempty"`
	ComponentID   int64      `boil:"component_id" json:"component_id" toml:"component_id" yaml:"component_id"`
	StartPosition null.Int64 `boil:"start_position" json:"start_position,omitempty" toml:"start_position" yaml:"start_position,omitempty"`
	EndPosition   null.Int64 `boil:"end_position" json:"end_position,omitempty" toml:"end_position" yaml:"end_position,omitempty"`

	R *componentDomainR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentDomainL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentDomainColumns = struct {
	CompdID       string
	DomainID      string
	ComponentID   string
	StartPosition string
	EndPosition   string
}{
	CompdID:       "compd_id",
	DomainID:      "domain_id",
	ComponentID:   "component_id",
	StartPosition: "start_position",
	EndPosition:   "end_position",
}

var ComponentDomainTableColumns = struct {
	CompdID       string
	DomainID      string
	ComponentID   string
	StartPosition string
	EndPosition   string
}{
	CompdID:       "component_domains.compd_id",
	DomainID:      "component_domains.domain_id",
	ComponentID:   "component_domains.component_id",
	StartPosition: "component_domains.start_position",
	EndPosition:   "component_domains.end_position",
}

// Generated where

var ComponentDomainWhere = struct {
	CompdID       whereHelperint64
	DomainID      whereHelpernull_Int64
	ComponentID   whereHelperint64
	StartPosition whereHelpernull_Int64
	EndPosition   whereHelpernull_Int64
}{
	CompdID:       whereHelperint64{field: "\"component_domains\".\"compd_id\""},
	DomainID:      whereHelpernull_Int64{field: "\"component_domains\".\"domain_id\""},
	ComponentID:   whereHelperint64{field: "\"component_domains\".\"component_id\""},
	StartPosition: whereHelpernull_Int64{field: "\"component_domains\".\"start_position\""},
	EndPosition:   whereHelpernull_Int64{field: "\"component_domains\".\"end_position\""},
}

// ComponentDomainRels is where relationship names are stored.
var ComponentDomainRels = struct {
	Domain    string
	Component string
}{
	Domain:    "Domain",
	Component: "Component",
}

// componentDomainR is where relationships are stored.
type componentDomainR struct {
	Domain    *Domain            `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
	Component *ComponentSequence `boil:"Component" json:"Component" toml:"Component" yaml:"Component"`
}

// NewStruct creates a new relationship struct
func (*componentDomainR) NewStruct() *componentDomainR {
	return &componentDomainR{}
}

func (r *componentDomainR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

func (r *componentDomainR) GetComponent() *ComponentSequence {
	if r == nil {
		return nil
	}
	return r.Component
}

// componentDomainL is where Load methods for each relationship are stored.
type componentDomainL struct{}

var (
	componentDomainAllColumns            = []string{"compd_id", "domain_id", "component_id", "start_position", "end_position"}
	componentDomainColumnsWithoutDefault = []string{"compd_id", "component_id"}
	componentDomainColumnsWithDefault    = []string{"domain_id", "start_position", "end_position"}
	componentDomainPrimaryKeyColumns     = []string{"compd_id"}
	componentDomainGeneratedColumns      = []string{}
)

type (
	// ComponentDomainSlice is an alias for a slice of pointers to ComponentDomain.
	// This should almost always be used instead of []ComponentDomain.
	ComponentDomainSlice []*ComponentDomain
	// ComponentDomainHook is the signature for custom ComponentDomain hook methods
	ComponentDomainHook func(context.Context, boil.ContextExecutor, *ComponentDomain) error

	componentDomainQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentDomainType                 = reflect.TypeOf(&ComponentDomain{})
	componentDomainMapping              = queries.MakeStructMapping(componentDomainType)
	componentDomainPrimaryKeyMapping, _ = queries.BindMapping(componentDomainType, componentDomainMapping, componentDomainPrimaryKeyColumns)
	componentDomainInsertCacheMut       sync.RWMutex
	componentDomainInsertCache          = make(map[string]insertCache)
	componentDomainUpdateCacheMut       sync.RWMutex
	componentDomainUpdateCache          = make(map[string]updateCache)
	componentDomainUpsertCacheMut       sync.RWMutex
	componentDomainUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentDomainAfterSelectHooks []ComponentDomainHook

var componentDomainBeforeInsertHooks []ComponentDomainHook
var componentDomainAfterInsertHooks []ComponentDomainHook

var componentDomainBeforeUpdateHooks []ComponentDomainHook
var componentDomainAfterUpdateHooks []ComponentDomainHook

var componentDomainBeforeDeleteHooks []ComponentDomainHook
var componentDomainAfterDeleteHooks []ComponentDomainHook

var componentDomainBeforeUpsertHooks []ComponentDomainHook
var componentDomainAfterUpsertHooks []ComponentDomainHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentDomain) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentDomain) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentDomain) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentDomain) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentDomain) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentDomain) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentDomain) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentDomain) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentDomain) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentDomainAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentDomainHook registers your hook function for all future operations.
func AddComponentDomainHook(hookPoint boil.HookPoint, componentDomainHook ComponentDomainHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentDomainAfterSelectHooks = append(componentDomainAfterSelectHooks, componentDomainHook)
	case boil.BeforeInsertHook:
		componentDomainBeforeInsertHooks = append(componentDomainBeforeInsertHooks, componentDomainHook)
	case boil.AfterInsertHook:
		componentDomainAfterInsertHooks = append(componentDomainAfterInsertHooks, componentDomainHook)
	case boil.BeforeUpdateHook:
		componentDomainBeforeUpdateHooks = append(componentDomainBeforeUpdateHooks, componentDomainHook)
	case boil.AfterUpdateHook:
		componentDomainAfterUpdateHooks = append(componentDomainAfterUpdateHooks, componentDomainHook)
	case boil.BeforeDeleteHook:
		componentDomainBeforeDeleteHooks = append(componentDomainBeforeDeleteHooks, componentDomainHook)
	case boil.AfterDeleteHook:
		componentDomainAfterDeleteHooks = append(componentDomainAfterDeleteHooks, componentDomainHook)
	case boil.BeforeUpsertHook:
		componentDomainBeforeUpsertHooks = append(componentDomainBeforeUpsertHooks, componentDomainHook)
	case boil.AfterUpsertHook:
		componentDomainAfterUpsertHooks = append(componentDomainAfterUpsertHooks, componentDomainHook)
	}
}

// One returns a single componentDomain record from the query.
func (q componentDomainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentDomain, error) {
	o := &ComponentDomain{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_domains")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentDomain records from the query.
func (q componentDomainQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentDomainSlice, error) {
	var o []*ComponentDomain

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentDomain slice")
	}

	if len(componentDomainAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentDomain records in the query.
func (q componentDomainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_domains rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentDomainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_domains exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *ComponentDomain) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"domain_id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// Component pointed to by the foreign key.
func (o *ComponentDomain) Component(mods ...qm.QueryMod) componentSequenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"component_id\" = ?", o.ComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentSequences(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentDomainL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentDomain interface{}, mods queries.Applicator) error {
	var slice []*ComponentDomain
	var object *ComponentDomain

	if singular {
		object = maybeComponentDomain.(*ComponentDomain)
	} else {
		slice = *maybeComponentDomain.(*[]*ComponentDomain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentDomainR{}
		}
		if !queries.IsNil(object.DomainID) {
			args = append(args, object.DomainID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentDomainR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DomainID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DomainID) {
				args = append(args, obj.DomainID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(componentDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.ComponentDomains = append(foreign.R.ComponentDomains, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DomainID, foreign.DomainID) {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.ComponentDomains = append(foreign.R.ComponentDomains, local)
				break
			}
		}
	}

	return nil
}

// LoadComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentDomainL) LoadComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentDomain interface{}, mods queries.Applicator) error {
	var slice []*ComponentDomain
	var object *ComponentDomain

	if singular {
		object = maybeComponentDomain.(*ComponentDomain)
	} else {
		slice = *maybeComponentDomain.(*[]*ComponentDomain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentDomainR{}
		}
		args = append(args, object.ComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentDomainR{}
			}

			for _, a := range args {
				if a == obj.ComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_sequences`),
		qm.WhereIn(`component_sequences.component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentSequence")
	}

	var resultSlice []*ComponentSequence
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentSequence")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_sequences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_sequences")
	}

	if len(componentDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Component = foreign
		if foreign.R == nil {
			foreign.R = &componentSequenceR{}
		}
		foreign.R.ComponentComponentDomains = append(foreign.R.ComponentComponentDomains, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentID == foreign.ComponentID {
				local.R.Component = foreign
				if foreign.R == nil {
					foreign.R = &componentSequenceR{}
				}
				foreign.R.ComponentComponentDomains = append(foreign.R.ComponentComponentDomains, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the componentDomain to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.ComponentDomains.
func (o *ComponentDomain) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 0, componentDomainPrimaryKeyColumns),
	)
	values := []interface{}{related.DomainID, o.CompdID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DomainID, related.DomainID)
	if o.R == nil {
		o.R = &componentDomainR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			ComponentDomains: ComponentDomainSlice{o},
		}
	} else {
		related.R.ComponentDomains = append(related.R.ComponentDomains, o)
	}

	return nil
}

// RemoveDomain relationship.
// Sets o.R.Domain to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ComponentDomain) RemoveDomain(ctx context.Context, exec boil.ContextExecutor, related *Domain) error {
	var err error

	queries.SetScanner(&o.DomainID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("domain_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Domain = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ComponentDomains {
		if queries.Equal(o.DomainID, ri.DomainID) {
			continue
		}

		ln := len(related.R.ComponentDomains)
		if ln > 1 && i < ln-1 {
			related.R.ComponentDomains[i] = related.R.ComponentDomains[ln-1]
		}
		related.R.ComponentDomains = related.R.ComponentDomains[:ln-1]
		break
	}
	return nil
}

// SetComponent of the componentDomain to the related item.
// Sets o.R.Component to related.
// Adds o to related.R.ComponentComponentDomains.
func (o *ComponentDomain) SetComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentSequence) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"component_id"}),
		strmangle.WhereClause("\"", "\"", 0, componentDomainPrimaryKeyColumns),
	)
	values := []interface{}{related.ComponentID, o.CompdID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentID = related.ComponentID
	if o.R == nil {
		o.R = &componentDomainR{
			Component: related,
		}
	} else {
		o.R.Component = related
	}

	if related.R == nil {
		related.R = &componentSequenceR{
			ComponentComponentDomains: ComponentDomainSlice{o},
		}
	} else {
		related.R.ComponentComponentDomains = append(related.R.ComponentComponentDomains, o)
	}

	return nil
}

// ComponentDomains retrieves all the records using an executor.
func ComponentDomains(mods ...qm.QueryMod) componentDomainQuery {
	mods = append(mods, qm.From("\"component_domains\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_domains\".*"})
	}

	return componentDomainQuery{q}
}

// FindComponentDomain retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentDomain(ctx context.Context, exec boil.ContextExecutor, compdID int64, selectCols ...string) (*ComponentDomain, error) {
	componentDomainObj := &ComponentDomain{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_domains\" where \"compd_id\"=?", sel,
	)

	q := queries.Raw(query, compdID)

	err := q.Bind(ctx, exec, componentDomainObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_domains")
	}

	if err = componentDomainObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentDomainObj, err
	}

	return componentDomainObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentDomain) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_domains provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentDomainColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentDomainInsertCacheMut.RLock()
	cache, cached := componentDomainInsertCache[key]
	componentDomainInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentDomainAllColumns,
			componentDomainColumnsWithDefault,
			componentDomainColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentDomainType, componentDomainMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentDomainType, componentDomainMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_domains\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_domains\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_domains")
	}

	if !cached {
		componentDomainInsertCacheMut.Lock()
		componentDomainInsertCache[key] = cache
		componentDomainInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentDomain.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentDomain) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentDomainUpdateCacheMut.RLock()
	cache, cached := componentDomainUpdateCache[key]
	componentDomainUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentDomainAllColumns,
			componentDomainPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_domains, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_domains\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, componentDomainPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentDomainType, componentDomainMapping, append(wl, componentDomainPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_domains row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_domains")
	}

	if !cached {
		componentDomainUpdateCacheMut.Lock()
		componentDomainUpdateCache[key] = cache
		componentDomainUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentDomainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_domains")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentDomainSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentDomainPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentDomain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentDomain")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentDomain) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_domains provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentDomainColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentDomainUpsertCacheMut.RLock()
	cache, cached := componentDomainUpsertCache[key]
	componentDomainUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentDomainAllColumns,
			componentDomainColumnsWithDefault,
			componentDomainColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			componentDomainAllColumns,
			componentDomainPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_domains, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentDomainPrimaryKeyColumns))
			copy(conflict, componentDomainPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"component_domains\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentDomainType, componentDomainMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentDomainType, componentDomainMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_domains")
	}

	if !cached {
		componentDomainUpsertCacheMut.Lock()
		componentDomainUpsertCache[key] = cache
		componentDomainUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ComponentDomain record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentDomain) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentDomain provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentDomainPrimaryKeyMapping)
	sql := "DELETE FROM \"component_domains\" WHERE \"compd_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_domains")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentDomainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentDomainQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_domains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentDomainSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentDomainBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentDomainPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentDomain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_domains")
	}

	if len(componentDomainAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentDomain) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentDomain(ctx, exec, o.CompdID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentDomainSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentDomainSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentDomainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_domains\".* FROM \"component_domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, componentDomainPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentDomainSlice")
	}

	*o = slice

	return nil
}

// ComponentDomainExists checks if the ComponentDomain row exists.
func ComponentDomainExists(ctx context.Context, exec boil.ContextExecutor, compdID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_domains\" where \"compd_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, compdID)
	}
	row := exec.QueryRowContext(ctx, sql, compdID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_domains exists")
	}

	return exists, nil
}
