// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ActivitySTDSLookup is an object representing the database table.
type ActivitySTDSLookup struct {
	STDActID       int64             `boil:"std_act_id" json:"std_act_id" toml:"std_act_id" yaml:"std_act_id"`
	StandardType   string            `boil:"standard_type" json:"standard_type" toml:"standard_type" yaml:"standard_type"`
	Definition     null.String       `boil:"definition" json:"definition,omitempty" toml:"definition" yaml:"definition,omitempty"`
	StandardUnits  string            `boil:"standard_units" json:"standard_units" toml:"standard_units" yaml:"standard_units"`
	NormalRangeMin types.NullDecimal `boil:"normal_range_min" json:"normal_range_min,omitempty" toml:"normal_range_min" yaml:"normal_range_min,omitempty"`
	NormalRangeMax types.NullDecimal `boil:"normal_range_max" json:"normal_range_max,omitempty" toml:"normal_range_max" yaml:"normal_range_max,omitempty"`

	R *activitySTDSLookupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activitySTDSLookupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActivitySTDSLookupColumns = struct {
	STDActID       string
	StandardType   string
	Definition     string
	StandardUnits  string
	NormalRangeMin string
	NormalRangeMax string
}{
	STDActID:       "std_act_id",
	StandardType:   "standard_type",
	Definition:     "definition",
	StandardUnits:  "standard_units",
	NormalRangeMin: "normal_range_min",
	NormalRangeMax: "normal_range_max",
}

var ActivitySTDSLookupTableColumns = struct {
	STDActID       string
	StandardType   string
	Definition     string
	StandardUnits  string
	NormalRangeMin string
	NormalRangeMax string
}{
	STDActID:       "activity_stds_lookup.std_act_id",
	StandardType:   "activity_stds_lookup.standard_type",
	Definition:     "activity_stds_lookup.definition",
	StandardUnits:  "activity_stds_lookup.standard_units",
	NormalRangeMin: "activity_stds_lookup.normal_range_min",
	NormalRangeMax: "activity_stds_lookup.normal_range_max",
}

// Generated where

var ActivitySTDSLookupWhere = struct {
	STDActID       whereHelperint64
	StandardType   whereHelperstring
	Definition     whereHelpernull_String
	StandardUnits  whereHelperstring
	NormalRangeMin whereHelpertypes_NullDecimal
	NormalRangeMax whereHelpertypes_NullDecimal
}{
	STDActID:       whereHelperint64{field: "\"activity_stds_lookup\".\"std_act_id\""},
	StandardType:   whereHelperstring{field: "\"activity_stds_lookup\".\"standard_type\""},
	Definition:     whereHelpernull_String{field: "\"activity_stds_lookup\".\"definition\""},
	StandardUnits:  whereHelperstring{field: "\"activity_stds_lookup\".\"standard_units\""},
	NormalRangeMin: whereHelpertypes_NullDecimal{field: "\"activity_stds_lookup\".\"normal_range_min\""},
	NormalRangeMax: whereHelpertypes_NullDecimal{field: "\"activity_stds_lookup\".\"normal_range_max\""},
}

// ActivitySTDSLookupRels is where relationship names are stored.
var ActivitySTDSLookupRels = struct {
}{}

// activitySTDSLookupR is where relationships are stored.
type activitySTDSLookupR struct {
}

// NewStruct creates a new relationship struct
func (*activitySTDSLookupR) NewStruct() *activitySTDSLookupR {
	return &activitySTDSLookupR{}
}

// activitySTDSLookupL is where Load methods for each relationship are stored.
type activitySTDSLookupL struct{}

var (
	activitySTDSLookupAllColumns            = []string{"std_act_id", "standard_type", "definition", "standard_units", "normal_range_min", "normal_range_max"}
	activitySTDSLookupColumnsWithoutDefault = []string{"std_act_id", "standard_type", "standard_units"}
	activitySTDSLookupColumnsWithDefault    = []string{"definition", "normal_range_min", "normal_range_max"}
	activitySTDSLookupPrimaryKeyColumns     = []string{"std_act_id"}
	activitySTDSLookupGeneratedColumns      = []string{}
)

type (
	// ActivitySTDSLookupSlice is an alias for a slice of pointers to ActivitySTDSLookup.
	// This should almost always be used instead of []ActivitySTDSLookup.
	ActivitySTDSLookupSlice []*ActivitySTDSLookup
	// ActivitySTDSLookupHook is the signature for custom ActivitySTDSLookup hook methods
	ActivitySTDSLookupHook func(context.Context, boil.ContextExecutor, *ActivitySTDSLookup) error

	activitySTDSLookupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activitySTDSLookupType                 = reflect.TypeOf(&ActivitySTDSLookup{})
	activitySTDSLookupMapping              = queries.MakeStructMapping(activitySTDSLookupType)
	activitySTDSLookupPrimaryKeyMapping, _ = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, activitySTDSLookupPrimaryKeyColumns)
	activitySTDSLookupInsertCacheMut       sync.RWMutex
	activitySTDSLookupInsertCache          = make(map[string]insertCache)
	activitySTDSLookupUpdateCacheMut       sync.RWMutex
	activitySTDSLookupUpdateCache          = make(map[string]updateCache)
	activitySTDSLookupUpsertCacheMut       sync.RWMutex
	activitySTDSLookupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activitySTDSLookupAfterSelectHooks []ActivitySTDSLookupHook

var activitySTDSLookupBeforeInsertHooks []ActivitySTDSLookupHook
var activitySTDSLookupAfterInsertHooks []ActivitySTDSLookupHook

var activitySTDSLookupBeforeUpdateHooks []ActivitySTDSLookupHook
var activitySTDSLookupAfterUpdateHooks []ActivitySTDSLookupHook

var activitySTDSLookupBeforeDeleteHooks []ActivitySTDSLookupHook
var activitySTDSLookupAfterDeleteHooks []ActivitySTDSLookupHook

var activitySTDSLookupBeforeUpsertHooks []ActivitySTDSLookupHook
var activitySTDSLookupAfterUpsertHooks []ActivitySTDSLookupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActivitySTDSLookup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActivitySTDSLookup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActivitySTDSLookup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActivitySTDSLookup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActivitySTDSLookup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActivitySTDSLookup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActivitySTDSLookup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActivitySTDSLookup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActivitySTDSLookup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activitySTDSLookupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActivitySTDSLookupHook registers your hook function for all future operations.
func AddActivitySTDSLookupHook(hookPoint boil.HookPoint, activitySTDSLookupHook ActivitySTDSLookupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activitySTDSLookupAfterSelectHooks = append(activitySTDSLookupAfterSelectHooks, activitySTDSLookupHook)
	case boil.BeforeInsertHook:
		activitySTDSLookupBeforeInsertHooks = append(activitySTDSLookupBeforeInsertHooks, activitySTDSLookupHook)
	case boil.AfterInsertHook:
		activitySTDSLookupAfterInsertHooks = append(activitySTDSLookupAfterInsertHooks, activitySTDSLookupHook)
	case boil.BeforeUpdateHook:
		activitySTDSLookupBeforeUpdateHooks = append(activitySTDSLookupBeforeUpdateHooks, activitySTDSLookupHook)
	case boil.AfterUpdateHook:
		activitySTDSLookupAfterUpdateHooks = append(activitySTDSLookupAfterUpdateHooks, activitySTDSLookupHook)
	case boil.BeforeDeleteHook:
		activitySTDSLookupBeforeDeleteHooks = append(activitySTDSLookupBeforeDeleteHooks, activitySTDSLookupHook)
	case boil.AfterDeleteHook:
		activitySTDSLookupAfterDeleteHooks = append(activitySTDSLookupAfterDeleteHooks, activitySTDSLookupHook)
	case boil.BeforeUpsertHook:
		activitySTDSLookupBeforeUpsertHooks = append(activitySTDSLookupBeforeUpsertHooks, activitySTDSLookupHook)
	case boil.AfterUpsertHook:
		activitySTDSLookupAfterUpsertHooks = append(activitySTDSLookupAfterUpsertHooks, activitySTDSLookupHook)
	}
}

// One returns a single activitySTDSLookup record from the query.
func (q activitySTDSLookupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActivitySTDSLookup, error) {
	o := &ActivitySTDSLookup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for activity_stds_lookup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActivitySTDSLookup records from the query.
func (q activitySTDSLookupQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActivitySTDSLookupSlice, error) {
	var o []*ActivitySTDSLookup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActivitySTDSLookup slice")
	}

	if len(activitySTDSLookupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActivitySTDSLookup records in the query.
func (q activitySTDSLookupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count activity_stds_lookup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q activitySTDSLookupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if activity_stds_lookup exists")
	}

	return count > 0, nil
}

// ActivitySTDSLookups retrieves all the records using an executor.
func ActivitySTDSLookups(mods ...qm.QueryMod) activitySTDSLookupQuery {
	mods = append(mods, qm.From("\"activity_stds_lookup\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"activity_stds_lookup\".*"})
	}

	return activitySTDSLookupQuery{q}
}

// FindActivitySTDSLookup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActivitySTDSLookup(ctx context.Context, exec boil.ContextExecutor, sTDActID int64, selectCols ...string) (*ActivitySTDSLookup, error) {
	activitySTDSLookupObj := &ActivitySTDSLookup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"activity_stds_lookup\" where \"std_act_id\"=?", sel,
	)

	q := queries.Raw(query, sTDActID)

	err := q.Bind(ctx, exec, activitySTDSLookupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from activity_stds_lookup")
	}

	if err = activitySTDSLookupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activitySTDSLookupObj, err
	}

	return activitySTDSLookupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActivitySTDSLookup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_stds_lookup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySTDSLookupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activitySTDSLookupInsertCacheMut.RLock()
	cache, cached := activitySTDSLookupInsertCache[key]
	activitySTDSLookupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activitySTDSLookupAllColumns,
			activitySTDSLookupColumnsWithDefault,
			activitySTDSLookupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"activity_stds_lookup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"activity_stds_lookup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into activity_stds_lookup")
	}

	if !cached {
		activitySTDSLookupInsertCacheMut.Lock()
		activitySTDSLookupInsertCache[key] = cache
		activitySTDSLookupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActivitySTDSLookup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActivitySTDSLookup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activitySTDSLookupUpdateCacheMut.RLock()
	cache, cached := activitySTDSLookupUpdateCache[key]
	activitySTDSLookupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activitySTDSLookupAllColumns,
			activitySTDSLookupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update activity_stds_lookup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"activity_stds_lookup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, activitySTDSLookupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, append(wl, activitySTDSLookupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update activity_stds_lookup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for activity_stds_lookup")
	}

	if !cached {
		activitySTDSLookupUpdateCacheMut.Lock()
		activitySTDSLookupUpdateCache[key] = cache
		activitySTDSLookupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q activitySTDSLookupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for activity_stds_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for activity_stds_lookup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActivitySTDSLookupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySTDSLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"activity_stds_lookup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySTDSLookupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activitySTDSLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activitySTDSLookup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActivitySTDSLookup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no activity_stds_lookup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activitySTDSLookupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activitySTDSLookupUpsertCacheMut.RLock()
	cache, cached := activitySTDSLookupUpsertCache[key]
	activitySTDSLookupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activitySTDSLookupAllColumns,
			activitySTDSLookupColumnsWithDefault,
			activitySTDSLookupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			activitySTDSLookupAllColumns,
			activitySTDSLookupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert activity_stds_lookup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(activitySTDSLookupPrimaryKeyColumns))
			copy(conflict, activitySTDSLookupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"activity_stds_lookup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activitySTDSLookupType, activitySTDSLookupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert activity_stds_lookup")
	}

	if !cached {
		activitySTDSLookupUpsertCacheMut.Lock()
		activitySTDSLookupUpsertCache[key] = cache
		activitySTDSLookupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ActivitySTDSLookup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActivitySTDSLookup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActivitySTDSLookup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activitySTDSLookupPrimaryKeyMapping)
	sql := "DELETE FROM \"activity_stds_lookup\" WHERE \"std_act_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from activity_stds_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for activity_stds_lookup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q activitySTDSLookupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activitySTDSLookupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activity_stds_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_stds_lookup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActivitySTDSLookupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activitySTDSLookupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySTDSLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"activity_stds_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySTDSLookupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activitySTDSLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for activity_stds_lookup")
	}

	if len(activitySTDSLookupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActivitySTDSLookup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActivitySTDSLookup(ctx, exec, o.STDActID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActivitySTDSLookupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActivitySTDSLookupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activitySTDSLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"activity_stds_lookup\".* FROM \"activity_stds_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activitySTDSLookupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActivitySTDSLookupSlice")
	}

	*o = slice

	return nil
}

// ActivitySTDSLookupExists checks if the ActivitySTDSLookup row exists.
func ActivitySTDSLookupExists(ctx context.Context, exec boil.ContextExecutor, sTDActID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"activity_stds_lookup\" where \"std_act_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sTDActID)
	}
	row := exec.QueryRowContext(ctx, sql, sTDActID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if activity_stds_lookup exists")
	}

	return exists, nil
}
