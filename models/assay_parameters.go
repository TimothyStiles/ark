// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AssayParameter is an object representing the database table.
type AssayParameter struct {
	AssayParamID      int64             `boil:"assay_param_id" json:"assay_param_id" toml:"assay_param_id" yaml:"assay_param_id"`
	AssayID           int64             `boil:"assay_id" json:"assay_id" toml:"assay_id" yaml:"assay_id"`
	Type              string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	Relation          null.String       `boil:"relation" json:"relation,omitempty" toml:"relation" yaml:"relation,omitempty"`
	Value             types.NullDecimal `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Units             null.String       `boil:"units" json:"units,omitempty" toml:"units" yaml:"units,omitempty"`
	TextValue         null.String       `boil:"text_value" json:"text_value,omitempty" toml:"text_value" yaml:"text_value,omitempty"`
	StandardType      null.String       `boil:"standard_type" json:"standard_type,omitempty" toml:"standard_type" yaml:"standard_type,omitempty"`
	StandardRelation  null.String       `boil:"standard_relation" json:"standard_relation,omitempty" toml:"standard_relation" yaml:"standard_relation,omitempty"`
	StandardValue     types.NullDecimal `boil:"standard_value" json:"standard_value,omitempty" toml:"standard_value" yaml:"standard_value,omitempty"`
	StandardUnits     null.String       `boil:"standard_units" json:"standard_units,omitempty" toml:"standard_units" yaml:"standard_units,omitempty"`
	StandardTextValue null.String       `boil:"standard_text_value" json:"standard_text_value,omitempty" toml:"standard_text_value" yaml:"standard_text_value,omitempty"`
	Comments          null.String       `boil:"comments" json:"comments,omitempty" toml:"comments" yaml:"comments,omitempty"`

	R *assayParameterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assayParameterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssayParameterColumns = struct {
	AssayParamID      string
	AssayID           string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
}{
	AssayParamID:      "assay_param_id",
	AssayID:           "assay_id",
	Type:              "type",
	Relation:          "relation",
	Value:             "value",
	Units:             "units",
	TextValue:         "text_value",
	StandardType:      "standard_type",
	StandardRelation:  "standard_relation",
	StandardValue:     "standard_value",
	StandardUnits:     "standard_units",
	StandardTextValue: "standard_text_value",
	Comments:          "comments",
}

var AssayParameterTableColumns = struct {
	AssayParamID      string
	AssayID           string
	Type              string
	Relation          string
	Value             string
	Units             string
	TextValue         string
	StandardType      string
	StandardRelation  string
	StandardValue     string
	StandardUnits     string
	StandardTextValue string
	Comments          string
}{
	AssayParamID:      "assay_parameters.assay_param_id",
	AssayID:           "assay_parameters.assay_id",
	Type:              "assay_parameters.type",
	Relation:          "assay_parameters.relation",
	Value:             "assay_parameters.value",
	Units:             "assay_parameters.units",
	TextValue:         "assay_parameters.text_value",
	StandardType:      "assay_parameters.standard_type",
	StandardRelation:  "assay_parameters.standard_relation",
	StandardValue:     "assay_parameters.standard_value",
	StandardUnits:     "assay_parameters.standard_units",
	StandardTextValue: "assay_parameters.standard_text_value",
	Comments:          "assay_parameters.comments",
}

// Generated where

var AssayParameterWhere = struct {
	AssayParamID      whereHelperint64
	AssayID           whereHelperint64
	Type              whereHelperstring
	Relation          whereHelpernull_String
	Value             whereHelpertypes_NullDecimal
	Units             whereHelpernull_String
	TextValue         whereHelpernull_String
	StandardType      whereHelpernull_String
	StandardRelation  whereHelpernull_String
	StandardValue     whereHelpertypes_NullDecimal
	StandardUnits     whereHelpernull_String
	StandardTextValue whereHelpernull_String
	Comments          whereHelpernull_String
}{
	AssayParamID:      whereHelperint64{field: "\"assay_parameters\".\"assay_param_id\""},
	AssayID:           whereHelperint64{field: "\"assay_parameters\".\"assay_id\""},
	Type:              whereHelperstring{field: "\"assay_parameters\".\"type\""},
	Relation:          whereHelpernull_String{field: "\"assay_parameters\".\"relation\""},
	Value:             whereHelpertypes_NullDecimal{field: "\"assay_parameters\".\"value\""},
	Units:             whereHelpernull_String{field: "\"assay_parameters\".\"units\""},
	TextValue:         whereHelpernull_String{field: "\"assay_parameters\".\"text_value\""},
	StandardType:      whereHelpernull_String{field: "\"assay_parameters\".\"standard_type\""},
	StandardRelation:  whereHelpernull_String{field: "\"assay_parameters\".\"standard_relation\""},
	StandardValue:     whereHelpertypes_NullDecimal{field: "\"assay_parameters\".\"standard_value\""},
	StandardUnits:     whereHelpernull_String{field: "\"assay_parameters\".\"standard_units\""},
	StandardTextValue: whereHelpernull_String{field: "\"assay_parameters\".\"standard_text_value\""},
	Comments:          whereHelpernull_String{field: "\"assay_parameters\".\"comments\""},
}

// AssayParameterRels is where relationship names are stored.
var AssayParameterRels = struct {
	Assay string
}{
	Assay: "Assay",
}

// assayParameterR is where relationships are stored.
type assayParameterR struct {
	Assay *Assay `boil:"Assay" json:"Assay" toml:"Assay" yaml:"Assay"`
}

// NewStruct creates a new relationship struct
func (*assayParameterR) NewStruct() *assayParameterR {
	return &assayParameterR{}
}

func (r *assayParameterR) GetAssay() *Assay {
	if r == nil {
		return nil
	}
	return r.Assay
}

// assayParameterL is where Load methods for each relationship are stored.
type assayParameterL struct{}

var (
	assayParameterAllColumns            = []string{"assay_param_id", "assay_id", "type", "relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments"}
	assayParameterColumnsWithoutDefault = []string{"assay_param_id", "assay_id", "type"}
	assayParameterColumnsWithDefault    = []string{"relation", "value", "units", "text_value", "standard_type", "standard_relation", "standard_value", "standard_units", "standard_text_value", "comments"}
	assayParameterPrimaryKeyColumns     = []string{"assay_param_id"}
	assayParameterGeneratedColumns      = []string{}
)

type (
	// AssayParameterSlice is an alias for a slice of pointers to AssayParameter.
	// This should almost always be used instead of []AssayParameter.
	AssayParameterSlice []*AssayParameter
	// AssayParameterHook is the signature for custom AssayParameter hook methods
	AssayParameterHook func(context.Context, boil.ContextExecutor, *AssayParameter) error

	assayParameterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assayParameterType                 = reflect.TypeOf(&AssayParameter{})
	assayParameterMapping              = queries.MakeStructMapping(assayParameterType)
	assayParameterPrimaryKeyMapping, _ = queries.BindMapping(assayParameterType, assayParameterMapping, assayParameterPrimaryKeyColumns)
	assayParameterInsertCacheMut       sync.RWMutex
	assayParameterInsertCache          = make(map[string]insertCache)
	assayParameterUpdateCacheMut       sync.RWMutex
	assayParameterUpdateCache          = make(map[string]updateCache)
	assayParameterUpsertCacheMut       sync.RWMutex
	assayParameterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assayParameterAfterSelectHooks []AssayParameterHook

var assayParameterBeforeInsertHooks []AssayParameterHook
var assayParameterAfterInsertHooks []AssayParameterHook

var assayParameterBeforeUpdateHooks []AssayParameterHook
var assayParameterAfterUpdateHooks []AssayParameterHook

var assayParameterBeforeDeleteHooks []AssayParameterHook
var assayParameterAfterDeleteHooks []AssayParameterHook

var assayParameterBeforeUpsertHooks []AssayParameterHook
var assayParameterAfterUpsertHooks []AssayParameterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssayParameter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssayParameter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssayParameter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssayParameter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssayParameter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssayParameter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssayParameter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssayParameter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssayParameter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assayParameterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssayParameterHook registers your hook function for all future operations.
func AddAssayParameterHook(hookPoint boil.HookPoint, assayParameterHook AssayParameterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assayParameterAfterSelectHooks = append(assayParameterAfterSelectHooks, assayParameterHook)
	case boil.BeforeInsertHook:
		assayParameterBeforeInsertHooks = append(assayParameterBeforeInsertHooks, assayParameterHook)
	case boil.AfterInsertHook:
		assayParameterAfterInsertHooks = append(assayParameterAfterInsertHooks, assayParameterHook)
	case boil.BeforeUpdateHook:
		assayParameterBeforeUpdateHooks = append(assayParameterBeforeUpdateHooks, assayParameterHook)
	case boil.AfterUpdateHook:
		assayParameterAfterUpdateHooks = append(assayParameterAfterUpdateHooks, assayParameterHook)
	case boil.BeforeDeleteHook:
		assayParameterBeforeDeleteHooks = append(assayParameterBeforeDeleteHooks, assayParameterHook)
	case boil.AfterDeleteHook:
		assayParameterAfterDeleteHooks = append(assayParameterAfterDeleteHooks, assayParameterHook)
	case boil.BeforeUpsertHook:
		assayParameterBeforeUpsertHooks = append(assayParameterBeforeUpsertHooks, assayParameterHook)
	case boil.AfterUpsertHook:
		assayParameterAfterUpsertHooks = append(assayParameterAfterUpsertHooks, assayParameterHook)
	}
}

// One returns a single assayParameter record from the query.
func (q assayParameterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssayParameter, error) {
	o := &AssayParameter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assay_parameters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssayParameter records from the query.
func (q assayParameterQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssayParameterSlice, error) {
	var o []*AssayParameter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssayParameter slice")
	}

	if len(assayParameterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssayParameter records in the query.
func (q assayParameterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assay_parameters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assayParameterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assay_parameters exists")
	}

	return count > 0, nil
}

// Assay pointed to by the foreign key.
func (o *AssayParameter) Assay(mods ...qm.QueryMod) assayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"assay_id\" = ?", o.AssayID),
	}

	queryMods = append(queryMods, mods...)

	return Assays(queryMods...)
}

// LoadAssay allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assayParameterL) LoadAssay(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssayParameter interface{}, mods queries.Applicator) error {
	var slice []*AssayParameter
	var object *AssayParameter

	if singular {
		object = maybeAssayParameter.(*AssayParameter)
	} else {
		slice = *maybeAssayParameter.(*[]*AssayParameter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assayParameterR{}
		}
		args = append(args, object.AssayID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assayParameterR{}
			}

			for _, a := range args {
				if a == obj.AssayID {
					continue Outer
				}
			}

			args = append(args, obj.AssayID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.assay_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assay")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assay")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayParameterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assay = foreign
		if foreign.R == nil {
			foreign.R = &assayR{}
		}
		foreign.R.AssayParameters = append(foreign.R.AssayParameters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssayID == foreign.AssayID {
				local.R.Assay = foreign
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.AssayParameters = append(foreign.R.AssayParameters, local)
				break
			}
		}
	}

	return nil
}

// SetAssay of the assayParameter to the related item.
// Sets o.R.Assay to related.
// Adds o to related.R.AssayParameters.
func (o *AssayParameter) SetAssay(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Assay) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assay_parameters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"assay_id"}),
		strmangle.WhereClause("\"", "\"", 0, assayParameterPrimaryKeyColumns),
	)
	values := []interface{}{related.AssayID, o.AssayParamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssayID = related.AssayID
	if o.R == nil {
		o.R = &assayParameterR{
			Assay: related,
		}
	} else {
		o.R.Assay = related
	}

	if related.R == nil {
		related.R = &assayR{
			AssayParameters: AssayParameterSlice{o},
		}
	} else {
		related.R.AssayParameters = append(related.R.AssayParameters, o)
	}

	return nil
}

// AssayParameters retrieves all the records using an executor.
func AssayParameters(mods ...qm.QueryMod) assayParameterQuery {
	mods = append(mods, qm.From("\"assay_parameters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assay_parameters\".*"})
	}

	return assayParameterQuery{q}
}

// FindAssayParameter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssayParameter(ctx context.Context, exec boil.ContextExecutor, assayParamID int64, selectCols ...string) (*AssayParameter, error) {
	assayParameterObj := &AssayParameter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assay_parameters\" where \"assay_param_id\"=?", sel,
	)

	q := queries.Raw(query, assayParamID)

	err := q.Bind(ctx, exec, assayParameterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assay_parameters")
	}

	if err = assayParameterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assayParameterObj, err
	}

	return assayParameterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssayParameter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_parameters provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayParameterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assayParameterInsertCacheMut.RLock()
	cache, cached := assayParameterInsertCache[key]
	assayParameterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assayParameterAllColumns,
			assayParameterColumnsWithDefault,
			assayParameterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assayParameterType, assayParameterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assayParameterType, assayParameterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assay_parameters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assay_parameters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assay_parameters")
	}

	if !cached {
		assayParameterInsertCacheMut.Lock()
		assayParameterInsertCache[key] = cache
		assayParameterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssayParameter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssayParameter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assayParameterUpdateCacheMut.RLock()
	cache, cached := assayParameterUpdateCache[key]
	assayParameterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assayParameterAllColumns,
			assayParameterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assay_parameters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assay_parameters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, assayParameterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assayParameterType, assayParameterMapping, append(wl, assayParameterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assay_parameters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assay_parameters")
	}

	if !cached {
		assayParameterUpdateCacheMut.Lock()
		assayParameterUpdateCache[key] = cache
		assayParameterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assayParameterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assay_parameters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assay_parameters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssayParameterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayParameterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assay_parameters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayParameterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assayParameter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assayParameter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssayParameter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assay_parameters provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assayParameterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assayParameterUpsertCacheMut.RLock()
	cache, cached := assayParameterUpsertCache[key]
	assayParameterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assayParameterAllColumns,
			assayParameterColumnsWithDefault,
			assayParameterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assayParameterAllColumns,
			assayParameterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assay_parameters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assayParameterPrimaryKeyColumns))
			copy(conflict, assayParameterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"assay_parameters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assayParameterType, assayParameterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assayParameterType, assayParameterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assay_parameters")
	}

	if !cached {
		assayParameterUpsertCacheMut.Lock()
		assayParameterUpsertCache[key] = cache
		assayParameterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssayParameter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssayParameter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssayParameter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assayParameterPrimaryKeyMapping)
	sql := "DELETE FROM \"assay_parameters\" WHERE \"assay_param_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assay_parameters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assay_parameters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assayParameterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assayParameterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assay_parameters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_parameters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssayParameterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assayParameterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayParameterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assay_parameters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayParameterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assayParameter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assay_parameters")
	}

	if len(assayParameterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssayParameter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssayParameter(ctx, exec, o.AssayParamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssayParameterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssayParameterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assayParameterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assay_parameters\".* FROM \"assay_parameters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assayParameterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssayParameterSlice")
	}

	*o = slice

	return nil
}

// AssayParameterExists checks if the AssayParameter row exists.
func AssayParameterExists(ctx context.Context, exec boil.ContextExecutor, assayParamID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assay_parameters\" where \"assay_param_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assayParamID)
	}
	row := exec.QueryRowContext(ctx, sql, assayParamID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assay_parameters exists")
	}

	return exists, nil
}
