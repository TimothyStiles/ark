// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Doc is an object representing the database table.
type Doc struct {
	DocID     int64       `boil:"doc_id" json:"doc_id" toml:"doc_id" yaml:"doc_id"`
	Journal   null.String `boil:"journal" json:"journal,omitempty" toml:"journal" yaml:"journal,omitempty"`
	Year      null.Int64  `boil:"year" json:"year,omitempty" toml:"year" yaml:"year,omitempty"`
	Volume    null.String `boil:"volume" json:"volume,omitempty" toml:"volume" yaml:"volume,omitempty"`
	Issue     null.String `boil:"issue" json:"issue,omitempty" toml:"issue" yaml:"issue,omitempty"`
	FirstPage null.String `boil:"first_page" json:"first_page,omitempty" toml:"first_page" yaml:"first_page,omitempty"`
	LastPage  null.String `boil:"last_page" json:"last_page,omitempty" toml:"last_page" yaml:"last_page,omitempty"`
	PubmedID  null.Int64  `boil:"pubmed_id" json:"pubmed_id,omitempty" toml:"pubmed_id" yaml:"pubmed_id,omitempty"`
	Doi       null.String `boil:"doi" json:"doi,omitempty" toml:"doi" yaml:"doi,omitempty"`
	ChemblID  string      `boil:"chembl_id" json:"chembl_id" toml:"chembl_id" yaml:"chembl_id"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	DocType   string      `boil:"doc_type" json:"doc_type" toml:"doc_type" yaml:"doc_type"`
	Authors   null.String `boil:"authors" json:"authors,omitempty" toml:"authors" yaml:"authors,omitempty"`
	Abstract  null.String `boil:"abstract" json:"abstract,omitempty" toml:"abstract" yaml:"abstract,omitempty"`
	PatentID  null.String `boil:"patent_id" json:"patent_id,omitempty" toml:"patent_id" yaml:"patent_id,omitempty"`
	Ridx      string      `boil:"ridx" json:"ridx" toml:"ridx" yaml:"ridx"`
	SRCID     int64       `boil:"src_id" json:"src_id" toml:"src_id" yaml:"src_id"`

	R *docR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L docL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DocColumns = struct {
	DocID     string
	Journal   string
	Year      string
	Volume    string
	Issue     string
	FirstPage string
	LastPage  string
	PubmedID  string
	Doi       string
	ChemblID  string
	Title     string
	DocType   string
	Authors   string
	Abstract  string
	PatentID  string
	Ridx      string
	SRCID     string
}{
	DocID:     "doc_id",
	Journal:   "journal",
	Year:      "year",
	Volume:    "volume",
	Issue:     "issue",
	FirstPage: "first_page",
	LastPage:  "last_page",
	PubmedID:  "pubmed_id",
	Doi:       "doi",
	ChemblID:  "chembl_id",
	Title:     "title",
	DocType:   "doc_type",
	Authors:   "authors",
	Abstract:  "abstract",
	PatentID:  "patent_id",
	Ridx:      "ridx",
	SRCID:     "src_id",
}

var DocTableColumns = struct {
	DocID     string
	Journal   string
	Year      string
	Volume    string
	Issue     string
	FirstPage string
	LastPage  string
	PubmedID  string
	Doi       string
	ChemblID  string
	Title     string
	DocType   string
	Authors   string
	Abstract  string
	PatentID  string
	Ridx      string
	SRCID     string
}{
	DocID:     "docs.doc_id",
	Journal:   "docs.journal",
	Year:      "docs.year",
	Volume:    "docs.volume",
	Issue:     "docs.issue",
	FirstPage: "docs.first_page",
	LastPage:  "docs.last_page",
	PubmedID:  "docs.pubmed_id",
	Doi:       "docs.doi",
	ChemblID:  "docs.chembl_id",
	Title:     "docs.title",
	DocType:   "docs.doc_type",
	Authors:   "docs.authors",
	Abstract:  "docs.abstract",
	PatentID:  "docs.patent_id",
	Ridx:      "docs.ridx",
	SRCID:     "docs.src_id",
}

// Generated where

var DocWhere = struct {
	DocID     whereHelperint64
	Journal   whereHelpernull_String
	Year      whereHelpernull_Int64
	Volume    whereHelpernull_String
	Issue     whereHelpernull_String
	FirstPage whereHelpernull_String
	LastPage  whereHelpernull_String
	PubmedID  whereHelpernull_Int64
	Doi       whereHelpernull_String
	ChemblID  whereHelperstring
	Title     whereHelpernull_String
	DocType   whereHelperstring
	Authors   whereHelpernull_String
	Abstract  whereHelpernull_String
	PatentID  whereHelpernull_String
	Ridx      whereHelperstring
	SRCID     whereHelperint64
}{
	DocID:     whereHelperint64{field: "\"docs\".\"doc_id\""},
	Journal:   whereHelpernull_String{field: "\"docs\".\"journal\""},
	Year:      whereHelpernull_Int64{field: "\"docs\".\"year\""},
	Volume:    whereHelpernull_String{field: "\"docs\".\"volume\""},
	Issue:     whereHelpernull_String{field: "\"docs\".\"issue\""},
	FirstPage: whereHelpernull_String{field: "\"docs\".\"first_page\""},
	LastPage:  whereHelpernull_String{field: "\"docs\".\"last_page\""},
	PubmedID:  whereHelpernull_Int64{field: "\"docs\".\"pubmed_id\""},
	Doi:       whereHelpernull_String{field: "\"docs\".\"doi\""},
	ChemblID:  whereHelperstring{field: "\"docs\".\"chembl_id\""},
	Title:     whereHelpernull_String{field: "\"docs\".\"title\""},
	DocType:   whereHelperstring{field: "\"docs\".\"doc_type\""},
	Authors:   whereHelpernull_String{field: "\"docs\".\"authors\""},
	Abstract:  whereHelpernull_String{field: "\"docs\".\"abstract\""},
	PatentID:  whereHelpernull_String{field: "\"docs\".\"patent_id\""},
	Ridx:      whereHelperstring{field: "\"docs\".\"ridx\""},
	SRCID:     whereHelperint64{field: "\"docs\".\"src_id\""},
}

// DocRels is where relationship names are stored.
var DocRels = struct {
	SRC             string
	Chembl          string
	Activities      string
	Assays          string
	CompoundRecords string
}{
	SRC:             "SRC",
	Chembl:          "Chembl",
	Activities:      "Activities",
	Assays:          "Assays",
	CompoundRecords: "CompoundRecords",
}

// docR is where relationships are stored.
type docR struct {
	SRC             *Source             `boil:"SRC" json:"SRC" toml:"SRC" yaml:"SRC"`
	Chembl          *ChemblIDLookup     `boil:"Chembl" json:"Chembl" toml:"Chembl" yaml:"Chembl"`
	Activities      ActivitySlice       `boil:"Activities" json:"Activities" toml:"Activities" yaml:"Activities"`
	Assays          AssaySlice          `boil:"Assays" json:"Assays" toml:"Assays" yaml:"Assays"`
	CompoundRecords CompoundRecordSlice `boil:"CompoundRecords" json:"CompoundRecords" toml:"CompoundRecords" yaml:"CompoundRecords"`
}

// NewStruct creates a new relationship struct
func (*docR) NewStruct() *docR {
	return &docR{}
}

func (r *docR) GetSRC() *Source {
	if r == nil {
		return nil
	}
	return r.SRC
}

func (r *docR) GetChembl() *ChemblIDLookup {
	if r == nil {
		return nil
	}
	return r.Chembl
}

func (r *docR) GetActivities() ActivitySlice {
	if r == nil {
		return nil
	}
	return r.Activities
}

func (r *docR) GetAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.Assays
}

func (r *docR) GetCompoundRecords() CompoundRecordSlice {
	if r == nil {
		return nil
	}
	return r.CompoundRecords
}

// docL is where Load methods for each relationship are stored.
type docL struct{}

var (
	docAllColumns            = []string{"doc_id", "journal", "year", "volume", "issue", "first_page", "last_page", "pubmed_id", "doi", "chembl_id", "title", "doc_type", "authors", "abstract", "patent_id", "ridx", "src_id"}
	docColumnsWithoutDefault = []string{"doc_id", "chembl_id", "doc_type", "ridx", "src_id"}
	docColumnsWithDefault    = []string{"journal", "year", "volume", "issue", "first_page", "last_page", "pubmed_id", "doi", "title", "authors", "abstract", "patent_id"}
	docPrimaryKeyColumns     = []string{"doc_id"}
	docGeneratedColumns      = []string{}
)

type (
	// DocSlice is an alias for a slice of pointers to Doc.
	// This should almost always be used instead of []Doc.
	DocSlice []*Doc
	// DocHook is the signature for custom Doc hook methods
	DocHook func(context.Context, boil.ContextExecutor, *Doc) error

	docQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	docType                 = reflect.TypeOf(&Doc{})
	docMapping              = queries.MakeStructMapping(docType)
	docPrimaryKeyMapping, _ = queries.BindMapping(docType, docMapping, docPrimaryKeyColumns)
	docInsertCacheMut       sync.RWMutex
	docInsertCache          = make(map[string]insertCache)
	docUpdateCacheMut       sync.RWMutex
	docUpdateCache          = make(map[string]updateCache)
	docUpsertCacheMut       sync.RWMutex
	docUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var docAfterSelectHooks []DocHook

var docBeforeInsertHooks []DocHook
var docAfterInsertHooks []DocHook

var docBeforeUpdateHooks []DocHook
var docAfterUpdateHooks []DocHook

var docBeforeDeleteHooks []DocHook
var docAfterDeleteHooks []DocHook

var docBeforeUpsertHooks []DocHook
var docAfterUpsertHooks []DocHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Doc) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Doc) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Doc) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Doc) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Doc) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Doc) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Doc) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Doc) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Doc) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range docAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocHook registers your hook function for all future operations.
func AddDocHook(hookPoint boil.HookPoint, docHook DocHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		docAfterSelectHooks = append(docAfterSelectHooks, docHook)
	case boil.BeforeInsertHook:
		docBeforeInsertHooks = append(docBeforeInsertHooks, docHook)
	case boil.AfterInsertHook:
		docAfterInsertHooks = append(docAfterInsertHooks, docHook)
	case boil.BeforeUpdateHook:
		docBeforeUpdateHooks = append(docBeforeUpdateHooks, docHook)
	case boil.AfterUpdateHook:
		docAfterUpdateHooks = append(docAfterUpdateHooks, docHook)
	case boil.BeforeDeleteHook:
		docBeforeDeleteHooks = append(docBeforeDeleteHooks, docHook)
	case boil.AfterDeleteHook:
		docAfterDeleteHooks = append(docAfterDeleteHooks, docHook)
	case boil.BeforeUpsertHook:
		docBeforeUpsertHooks = append(docBeforeUpsertHooks, docHook)
	case boil.AfterUpsertHook:
		docAfterUpsertHooks = append(docAfterUpsertHooks, docHook)
	}
}

// One returns a single doc record from the query.
func (q docQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Doc, error) {
	o := &Doc{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for docs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Doc records from the query.
func (q docQuery) All(ctx context.Context, exec boil.ContextExecutor) (DocSlice, error) {
	var o []*Doc

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Doc slice")
	}

	if len(docAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Doc records in the query.
func (q docQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count docs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q docQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if docs exists")
	}

	return count > 0, nil
}

// SRC pointed to by the foreign key.
func (o *Doc) SRC(mods ...qm.QueryMod) sourceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"src_id\" = ?", o.SRCID),
	}

	queryMods = append(queryMods, mods...)

	return Sources(queryMods...)
}

// Chembl pointed to by the foreign key.
func (o *Doc) Chembl(mods ...qm.QueryMod) chemblIDLookupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return ChemblIDLookups(queryMods...)
}

// Activities retrieves all the activity's Activities with an executor.
func (o *Doc) Activities(mods ...qm.QueryMod) activityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"activities\".\"doc_id\"=?", o.DocID),
	)

	return Activities(queryMods...)
}

// Assays retrieves all the assay's Assays with an executor.
func (o *Doc) Assays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"doc_id\"=?", o.DocID),
	)

	return Assays(queryMods...)
}

// CompoundRecords retrieves all the compound_record's CompoundRecords with an executor.
func (o *Doc) CompoundRecords(mods ...qm.QueryMod) compoundRecordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"compound_records\".\"doc_id\"=?", o.DocID),
	)

	return CompoundRecords(queryMods...)
}

// LoadSRC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (docL) LoadSRC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoc interface{}, mods queries.Applicator) error {
	var slice []*Doc
	var object *Doc

	if singular {
		object = maybeDoc.(*Doc)
	} else {
		slice = *maybeDoc.(*[]*Doc)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &docR{}
		}
		args = append(args, object.SRCID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &docR{}
			}

			for _, a := range args {
				if a == obj.SRCID {
					continue Outer
				}
			}

			args = append(args, obj.SRCID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`source`),
		qm.WhereIn(`source.src_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Source")
	}

	var resultSlice []*Source
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Source")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for source")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for source")
	}

	if len(docAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SRC = foreign
		if foreign.R == nil {
			foreign.R = &sourceR{}
		}
		foreign.R.SRCDocs = append(foreign.R.SRCDocs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRCID == foreign.SRCID {
				local.R.SRC = foreign
				if foreign.R == nil {
					foreign.R = &sourceR{}
				}
				foreign.R.SRCDocs = append(foreign.R.SRCDocs, local)
				break
			}
		}
	}

	return nil
}

// LoadChembl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (docL) LoadChembl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoc interface{}, mods queries.Applicator) error {
	var slice []*Doc
	var object *Doc

	if singular {
		object = maybeDoc.(*Doc)
	} else {
		slice = *maybeDoc.(*[]*Doc)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &docR{}
		}
		args = append(args, object.ChemblID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &docR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chembl_id_lookup`),
		qm.WhereIn(`chembl_id_lookup.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChemblIDLookup")
	}

	var resultSlice []*ChemblIDLookup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChemblIDLookup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chembl_id_lookup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chembl_id_lookup")
	}

	if len(docAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chembl = foreign
		if foreign.R == nil {
			foreign.R = &chemblIDLookupR{}
		}
		foreign.R.ChemblDoc = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.Chembl = foreign
				if foreign.R == nil {
					foreign.R = &chemblIDLookupR{}
				}
				foreign.R.ChemblDoc = local
				break
			}
		}
	}

	return nil
}

// LoadActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (docL) LoadActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoc interface{}, mods queries.Applicator) error {
	var slice []*Doc
	var object *Doc

	if singular {
		object = maybeDoc.(*Doc)
	} else {
		slice = *maybeDoc.(*[]*Doc)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &docR{}
		}
		args = append(args, object.DocID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &docR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocID) {
					continue Outer
				}
			}

			args = append(args, obj.DocID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.doc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load activities")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(activityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Activities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activityR{}
			}
			foreign.R.Doc = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DocID, foreign.DocID) {
				local.R.Activities = append(local.R.Activities, foreign)
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.Doc = local
				break
			}
		}
	}

	return nil
}

// LoadAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (docL) LoadAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoc interface{}, mods queries.Applicator) error {
	var slice []*Doc
	var object *Doc

	if singular {
		object = maybeDoc.(*Doc)
	} else {
		slice = *maybeDoc.(*[]*Doc)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &docR{}
		}
		args = append(args, object.DocID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &docR{}
			}

			for _, a := range args {
				if a == obj.DocID {
					continue Outer
				}
			}

			args = append(args, obj.DocID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.doc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.Doc = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocID == foreign.DocID {
				local.R.Assays = append(local.R.Assays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.Doc = local
				break
			}
		}
	}

	return nil
}

// LoadCompoundRecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (docL) LoadCompoundRecords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoc interface{}, mods queries.Applicator) error {
	var slice []*Doc
	var object *Doc

	if singular {
		object = maybeDoc.(*Doc)
	} else {
		slice = *maybeDoc.(*[]*Doc)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &docR{}
		}
		args = append(args, object.DocID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &docR{}
			}

			for _, a := range args {
				if a == obj.DocID {
					continue Outer
				}
			}

			args = append(args, obj.DocID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.doc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load compound_records")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice compound_records")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(compoundRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompoundRecords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &compoundRecordR{}
			}
			foreign.R.Doc = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocID == foreign.DocID {
				local.R.CompoundRecords = append(local.R.CompoundRecords, foreign)
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.Doc = local
				break
			}
		}
	}

	return nil
}

// SetSRC of the doc to the related item.
// Sets o.R.SRC to related.
// Adds o to related.R.SRCDocs.
func (o *Doc) SetSRC(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Source) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"docs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"src_id"}),
		strmangle.WhereClause("\"", "\"", 0, docPrimaryKeyColumns),
	)
	values := []interface{}{related.SRCID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRCID = related.SRCID
	if o.R == nil {
		o.R = &docR{
			SRC: related,
		}
	} else {
		o.R.SRC = related
	}

	if related.R == nil {
		related.R = &sourceR{
			SRCDocs: DocSlice{o},
		}
	} else {
		related.R.SRCDocs = append(related.R.SRCDocs, o)
	}

	return nil
}

// SetChembl of the doc to the related item.
// Sets o.R.Chembl to related.
// Adds o to related.R.ChemblDoc.
func (o *Doc) SetChembl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChemblIDLookup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"docs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
		strmangle.WhereClause("\"", "\"", 0, docPrimaryKeyColumns),
	)
	values := []interface{}{related.ChemblID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChemblID = related.ChemblID
	if o.R == nil {
		o.R = &docR{
			Chembl: related,
		}
	} else {
		o.R.Chembl = related
	}

	if related.R == nil {
		related.R = &chemblIDLookupR{
			ChemblDoc: o,
		}
	} else {
		related.R.ChemblDoc = o
	}

	return nil
}

// AddActivities adds the given related objects to the existing relationships
// of the doc, optionally inserting them as new records.
// Appends related to o.R.Activities.
// Sets related.R.Doc appropriately.
func (o *Doc) AddActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocID, o.DocID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"doc_id"}),
				strmangle.WhereClause("\"", "\"", 0, activityPrimaryKeyColumns),
			)
			values := []interface{}{o.DocID, rel.ActivityID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocID, o.DocID)
		}
	}

	if o.R == nil {
		o.R = &docR{
			Activities: related,
		}
	} else {
		o.R.Activities = append(o.R.Activities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activityR{
				Doc: o,
			}
		} else {
			rel.R.Doc = o
		}
	}
	return nil
}

// SetActivities removes all previously related items of the
// doc replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Doc's Activities accordingly.
// Replaces o.R.Activities with related.
// Sets related.R.Doc's Activities accordingly.
func (o *Doc) SetActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Activity) error {
	query := "update \"activities\" set \"doc_id\" = null where \"doc_id\" = ?"
	values := []interface{}{o.DocID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Activities {
			queries.SetScanner(&rel.DocID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Doc = nil
		}
		o.R.Activities = nil
	}

	return o.AddActivities(ctx, exec, insert, related...)
}

// RemoveActivities relationships from objects passed in.
// Removes related items from R.Activities (uses pointer comparison, removal does not keep order)
// Sets related.R.Doc.
func (o *Doc) RemoveActivities(ctx context.Context, exec boil.ContextExecutor, related ...*Activity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocID, nil)
		if rel.R != nil {
			rel.R.Doc = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("doc_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Activities {
			if rel != ri {
				continue
			}

			ln := len(o.R.Activities)
			if ln > 1 && i < ln-1 {
				o.R.Activities[i] = o.R.Activities[ln-1]
			}
			o.R.Activities = o.R.Activities[:ln-1]
			break
		}
	}

	return nil
}

// AddAssays adds the given related objects to the existing relationships
// of the doc, optionally inserting them as new records.
// Appends related to o.R.Assays.
// Sets related.R.Doc appropriately.
func (o *Doc) AddAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DocID = o.DocID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"doc_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.DocID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DocID = o.DocID
		}
	}

	if o.R == nil {
		o.R = &docR{
			Assays: related,
		}
	} else {
		o.R.Assays = append(o.R.Assays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				Doc: o,
			}
		} else {
			rel.R.Doc = o
		}
	}
	return nil
}

// AddCompoundRecords adds the given related objects to the existing relationships
// of the doc, optionally inserting them as new records.
// Appends related to o.R.CompoundRecords.
// Sets related.R.Doc appropriately.
func (o *Doc) AddCompoundRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompoundRecord) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DocID = o.DocID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"compound_records\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"doc_id"}),
				strmangle.WhereClause("\"", "\"", 0, compoundRecordPrimaryKeyColumns),
			)
			values := []interface{}{o.DocID, rel.RecordID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DocID = o.DocID
		}
	}

	if o.R == nil {
		o.R = &docR{
			CompoundRecords: related,
		}
	} else {
		o.R.CompoundRecords = append(o.R.CompoundRecords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &compoundRecordR{
				Doc: o,
			}
		} else {
			rel.R.Doc = o
		}
	}
	return nil
}

// Docs retrieves all the records using an executor.
func Docs(mods ...qm.QueryMod) docQuery {
	mods = append(mods, qm.From("\"docs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"docs\".*"})
	}

	return docQuery{q}
}

// FindDoc retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoc(ctx context.Context, exec boil.ContextExecutor, docID int64, selectCols ...string) (*Doc, error) {
	docObj := &Doc{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"docs\" where \"doc_id\"=?", sel,
	)

	q := queries.Raw(query, docID)

	err := q.Bind(ctx, exec, docObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from docs")
	}

	if err = docObj.doAfterSelectHooks(ctx, exec); err != nil {
		return docObj, err
	}

	return docObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Doc) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no docs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(docColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	docInsertCacheMut.RLock()
	cache, cached := docInsertCache[key]
	docInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			docAllColumns,
			docColumnsWithDefault,
			docColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(docType, docMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(docType, docMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"docs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"docs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into docs")
	}

	if !cached {
		docInsertCacheMut.Lock()
		docInsertCache[key] = cache
		docInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Doc.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Doc) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	docUpdateCacheMut.RLock()
	cache, cached := docUpdateCache[key]
	docUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			docAllColumns,
			docPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update docs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"docs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, docPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(docType, docMapping, append(wl, docPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update docs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for docs")
	}

	if !cached {
		docUpdateCacheMut.Lock()
		docUpdateCache[key] = cache
		docUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q docQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for docs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for docs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), docPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"docs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, docPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doc")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Doc) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no docs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(docColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	docUpsertCacheMut.RLock()
	cache, cached := docUpsertCache[key]
	docUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			docAllColumns,
			docColumnsWithDefault,
			docColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			docAllColumns,
			docPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert docs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(docPrimaryKeyColumns))
			copy(conflict, docPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"docs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(docType, docMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(docType, docMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert docs")
	}

	if !cached {
		docUpsertCacheMut.Lock()
		docUpsertCache[key] = cache
		docUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Doc record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Doc) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Doc provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), docPrimaryKeyMapping)
	sql := "DELETE FROM \"docs\" WHERE \"doc_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from docs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for docs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q docQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no docQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from docs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for docs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(docBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), docPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"docs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, docPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for docs")
	}

	if len(docAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Doc) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoc(ctx, exec, o.DocID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DocSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), docPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"docs\".* FROM \"docs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, docPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DocSlice")
	}

	*o = slice

	return nil
}

// DocExists checks if the Doc row exists.
func DocExists(ctx context.Context, exec boil.ContextExecutor, docID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"docs\" where \"doc_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, docID)
	}
	row := exec.QueryRowContext(ctx, sql, docID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if docs exists")
	}

	return exists, nil
}
