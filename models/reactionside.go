// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reactionside is an object representing the database table.
type Reactionside struct {
	Accession null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`

	R *reactionsideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionsideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionsideColumns = struct {
	Accession string
}{
	Accession: "accession",
}

var ReactionsideTableColumns = struct {
	Accession string
}{
	Accession: "reactionside.accession",
}

// Generated where

var ReactionsideWhere = struct {
	Accession whereHelpernull_String
}{
	Accession: whereHelpernull_String{field: "\"reactionside\".\"accession\""},
}

// ReactionsideRels is where relationship names are stored.
var ReactionsideRels = struct {
	ReactionParticipants  string
	ReactionsideReactions string
}{
	ReactionParticipants:  "ReactionParticipants",
	ReactionsideReactions: "ReactionsideReactions",
}

// reactionsideR is where relationships are stored.
type reactionsideR struct {
	ReactionParticipants  ReactionParticipantSlice  `boil:"ReactionParticipants" json:"ReactionParticipants" toml:"ReactionParticipants" yaml:"ReactionParticipants"`
	ReactionsideReactions ReactionsideReactionSlice `boil:"ReactionsideReactions" json:"ReactionsideReactions" toml:"ReactionsideReactions" yaml:"ReactionsideReactions"`
}

// NewStruct creates a new relationship struct
func (*reactionsideR) NewStruct() *reactionsideR {
	return &reactionsideR{}
}

func (r *reactionsideR) GetReactionParticipants() ReactionParticipantSlice {
	if r == nil {
		return nil
	}
	return r.ReactionParticipants
}

func (r *reactionsideR) GetReactionsideReactions() ReactionsideReactionSlice {
	if r == nil {
		return nil
	}
	return r.ReactionsideReactions
}

// reactionsideL is where Load methods for each relationship are stored.
type reactionsideL struct{}

var (
	reactionsideAllColumns            = []string{"accession"}
	reactionsideColumnsWithoutDefault = []string{}
	reactionsideColumnsWithDefault    = []string{"accession"}
	reactionsidePrimaryKeyColumns     = []string{"accession"}
	reactionsideGeneratedColumns      = []string{}
)

type (
	// ReactionsideSlice is an alias for a slice of pointers to Reactionside.
	// This should almost always be used instead of []Reactionside.
	ReactionsideSlice []*Reactionside
	// ReactionsideHook is the signature for custom Reactionside hook methods
	ReactionsideHook func(context.Context, boil.ContextExecutor, *Reactionside) error

	reactionsideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionsideType                 = reflect.TypeOf(&Reactionside{})
	reactionsideMapping              = queries.MakeStructMapping(reactionsideType)
	reactionsidePrimaryKeyMapping, _ = queries.BindMapping(reactionsideType, reactionsideMapping, reactionsidePrimaryKeyColumns)
	reactionsideInsertCacheMut       sync.RWMutex
	reactionsideInsertCache          = make(map[string]insertCache)
	reactionsideUpdateCacheMut       sync.RWMutex
	reactionsideUpdateCache          = make(map[string]updateCache)
	reactionsideUpsertCacheMut       sync.RWMutex
	reactionsideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionsideAfterSelectHooks []ReactionsideHook

var reactionsideBeforeInsertHooks []ReactionsideHook
var reactionsideAfterInsertHooks []ReactionsideHook

var reactionsideBeforeUpdateHooks []ReactionsideHook
var reactionsideAfterUpdateHooks []ReactionsideHook

var reactionsideBeforeDeleteHooks []ReactionsideHook
var reactionsideAfterDeleteHooks []ReactionsideHook

var reactionsideBeforeUpsertHooks []ReactionsideHook
var reactionsideAfterUpsertHooks []ReactionsideHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reactionside) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reactionside) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reactionside) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reactionside) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reactionside) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reactionside) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reactionside) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reactionside) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reactionside) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionsideAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionsideHook registers your hook function for all future operations.
func AddReactionsideHook(hookPoint boil.HookPoint, reactionsideHook ReactionsideHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionsideAfterSelectHooks = append(reactionsideAfterSelectHooks, reactionsideHook)
	case boil.BeforeInsertHook:
		reactionsideBeforeInsertHooks = append(reactionsideBeforeInsertHooks, reactionsideHook)
	case boil.AfterInsertHook:
		reactionsideAfterInsertHooks = append(reactionsideAfterInsertHooks, reactionsideHook)
	case boil.BeforeUpdateHook:
		reactionsideBeforeUpdateHooks = append(reactionsideBeforeUpdateHooks, reactionsideHook)
	case boil.AfterUpdateHook:
		reactionsideAfterUpdateHooks = append(reactionsideAfterUpdateHooks, reactionsideHook)
	case boil.BeforeDeleteHook:
		reactionsideBeforeDeleteHooks = append(reactionsideBeforeDeleteHooks, reactionsideHook)
	case boil.AfterDeleteHook:
		reactionsideAfterDeleteHooks = append(reactionsideAfterDeleteHooks, reactionsideHook)
	case boil.BeforeUpsertHook:
		reactionsideBeforeUpsertHooks = append(reactionsideBeforeUpsertHooks, reactionsideHook)
	case boil.AfterUpsertHook:
		reactionsideAfterUpsertHooks = append(reactionsideAfterUpsertHooks, reactionsideHook)
	}
}

// One returns a single reactionside record from the query.
func (q reactionsideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reactionside, error) {
	o := &Reactionside{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reactionside")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reactionside records from the query.
func (q reactionsideQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionsideSlice, error) {
	var o []*Reactionside

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reactionside slice")
	}

	if len(reactionsideAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reactionside records in the query.
func (q reactionsideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reactionside rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactionsideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reactionside exists")
	}

	return count > 0, nil
}

// ReactionParticipants retrieves all the reaction_participant's ReactionParticipants with an executor.
func (o *Reactionside) ReactionParticipants(mods ...qm.QueryMod) reactionParticipantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reaction_participant\".\"reactionside\"=?", o.Accession),
	)

	return ReactionParticipants(queryMods...)
}

// ReactionsideReactions retrieves all the reactionside_reaction's ReactionsideReactions with an executor.
func (o *Reactionside) ReactionsideReactions(mods ...qm.QueryMod) reactionsideReactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactionside_reaction\".\"reactionside\"=?", o.Accession),
	)

	return ReactionsideReactions(queryMods...)
}

// LoadReactionParticipants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reactionsideL) LoadReactionParticipants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionside interface{}, mods queries.Applicator) error {
	var slice []*Reactionside
	var object *Reactionside

	if singular {
		object = maybeReactionside.(*Reactionside)
	} else {
		slice = *maybeReactionside.(*[]*Reactionside)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionsideR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionsideR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reaction_participant`),
		qm.WhereIn(`reaction_participant.reactionside in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reaction_participant")
	}

	var resultSlice []*ReactionParticipant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reaction_participant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reaction_participant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reaction_participant")
	}

	if len(reactionParticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReactionParticipants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionParticipantR{}
			}
			foreign.R.ReactionParticipantReactionside = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Reactionside) {
				local.R.ReactionParticipants = append(local.R.ReactionParticipants, foreign)
				if foreign.R == nil {
					foreign.R = &reactionParticipantR{}
				}
				foreign.R.ReactionParticipantReactionside = local
				break
			}
		}
	}

	return nil
}

// LoadReactionsideReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reactionsideL) LoadReactionsideReactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactionside interface{}, mods queries.Applicator) error {
	var slice []*Reactionside
	var object *Reactionside

	if singular {
		object = maybeReactionside.(*Reactionside)
	} else {
		slice = *maybeReactionside.(*[]*Reactionside)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactionsideR{}
		}
		args = append(args, object.Accession)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionsideR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Accession) {
					continue Outer
				}
			}

			args = append(args, obj.Accession)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reactionside_reaction`),
		qm.WhereIn(`reactionside_reaction.reactionside in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactionside_reaction")
	}

	var resultSlice []*ReactionsideReaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactionside_reaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactionside_reaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactionside_reaction")
	}

	if len(reactionsideReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReactionsideReactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionsideReactionR{}
			}
			foreign.R.ReactionsideReactionReactionside = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Accession, foreign.Reactionside) {
				local.R.ReactionsideReactions = append(local.R.ReactionsideReactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionsideReactionR{}
				}
				foreign.R.ReactionsideReactionReactionside = local
				break
			}
		}
	}

	return nil
}

// AddReactionParticipants adds the given related objects to the existing relationships
// of the reactionside, optionally inserting them as new records.
// Appends related to o.R.ReactionParticipants.
// Sets related.R.ReactionParticipantReactionside appropriately.
func (o *Reactionside) AddReactionParticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReactionParticipant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Reactionside, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reaction_participant\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"reactionside"}),
				strmangle.WhereClause("\"", "\"", 0, reactionParticipantPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Compound, rel.Reactionside}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Reactionside, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &reactionsideR{
			ReactionParticipants: related,
		}
	} else {
		o.R.ReactionParticipants = append(o.R.ReactionParticipants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionParticipantR{
				ReactionParticipantReactionside: o,
			}
		} else {
			rel.R.ReactionParticipantReactionside = o
		}
	}
	return nil
}

// AddReactionsideReactions adds the given related objects to the existing relationships
// of the reactionside, optionally inserting them as new records.
// Appends related to o.R.ReactionsideReactions.
// Sets related.R.ReactionsideReactionReactionside appropriately.
func (o *Reactionside) AddReactionsideReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReactionsideReaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Reactionside, o.Accession)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactionside_reaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"reactionside"}),
				strmangle.WhereClause("\"", "\"", 0, reactionsideReactionPrimaryKeyColumns),
			)
			values := []interface{}{o.Accession, rel.Reaction, rel.Reactionside}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Reactionside, o.Accession)
		}
	}

	if o.R == nil {
		o.R = &reactionsideR{
			ReactionsideReactions: related,
		}
	} else {
		o.R.ReactionsideReactions = append(o.R.ReactionsideReactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionsideReactionR{
				ReactionsideReactionReactionside: o,
			}
		} else {
			rel.R.ReactionsideReactionReactionside = o
		}
	}
	return nil
}

// Reactionsides retrieves all the records using an executor.
func Reactionsides(mods ...qm.QueryMod) reactionsideQuery {
	mods = append(mods, qm.From("\"reactionside\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reactionside\".*"})
	}

	return reactionsideQuery{q}
}

// FindReactionside retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReactionside(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*Reactionside, error) {
	reactionsideObj := &Reactionside{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reactionside\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, reactionsideObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reactionside")
	}

	if err = reactionsideObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionsideObj, err
	}

	return reactionsideObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reactionside) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionside provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionsideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionsideInsertCacheMut.RLock()
	cache, cached := reactionsideInsertCache[key]
	reactionsideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionsideAllColumns,
			reactionsideColumnsWithDefault,
			reactionsideColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionsideType, reactionsideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionsideType, reactionsideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reactionside\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reactionside\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reactionside")
	}

	if !cached {
		reactionsideInsertCacheMut.Lock()
		reactionsideInsertCache[key] = cache
		reactionsideInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reactionside.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reactionside) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionsideUpdateCacheMut.RLock()
	cache, cached := reactionsideUpdateCache[key]
	reactionsideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionsideAllColumns,
			reactionsidePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reactionside, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reactionside\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactionsidePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionsideType, reactionsideMapping, append(wl, reactionsidePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reactionside row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reactionside")
	}

	if !cached {
		reactionsideUpdateCacheMut.Lock()
		reactionsideUpdateCache[key] = cache
		reactionsideUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionsideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reactionside")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reactionside")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionsideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reactionside\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reactionside slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reactionside")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reactionside) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactionside provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionsideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionsideUpsertCacheMut.RLock()
	cache, cached := reactionsideUpsertCache[key]
	reactionsideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactionsideAllColumns,
			reactionsideColumnsWithDefault,
			reactionsideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactionsideAllColumns,
			reactionsidePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reactionside, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactionsidePrimaryKeyColumns))
			copy(conflict, reactionsidePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reactionside\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactionsideType, reactionsideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionsideType, reactionsideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reactionside")
	}

	if !cached {
		reactionsideUpsertCacheMut.Lock()
		reactionsideUpsertCache[key] = cache
		reactionsideUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reactionside record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reactionside) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reactionside provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionsidePrimaryKeyMapping)
	sql := "DELETE FROM \"reactionside\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reactionside")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reactionside")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactionsideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionsideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionside")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionside")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionsideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionsideBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reactionside\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactionside slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactionside")
	}

	if len(reactionsideAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reactionside) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReactionside(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionsideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionsideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionsidePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reactionside\".* FROM \"reactionside\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactionsidePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionsideSlice")
	}

	*o = slice

	return nil
}

// ReactionsideExists checks if the Reactionside row exists.
func ReactionsideExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reactionside\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reactionside exists")
	}

	return exists, nil
}
