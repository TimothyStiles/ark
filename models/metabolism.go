// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Metabolism is an object representing the database table.
type Metabolism struct {
	MetID              int64       `boil:"met_id" json:"met_id" toml:"met_id" yaml:"met_id"`
	DrugRecordID       null.Int64  `boil:"drug_record_id" json:"drug_record_id,omitempty" toml:"drug_record_id" yaml:"drug_record_id,omitempty"`
	SubstrateRecordID  null.Int64  `boil:"substrate_record_id" json:"substrate_record_id,omitempty" toml:"substrate_record_id" yaml:"substrate_record_id,omitempty"`
	MetaboliteRecordID null.Int64  `boil:"metabolite_record_id" json:"metabolite_record_id,omitempty" toml:"metabolite_record_id" yaml:"metabolite_record_id,omitempty"`
	PathwayID          null.Int64  `boil:"pathway_id" json:"pathway_id,omitempty" toml:"pathway_id" yaml:"pathway_id,omitempty"`
	PathwayKey         null.String `boil:"pathway_key" json:"pathway_key,omitempty" toml:"pathway_key" yaml:"pathway_key,omitempty"`
	EnzymeName         null.String `boil:"enzyme_name" json:"enzyme_name,omitempty" toml:"enzyme_name" yaml:"enzyme_name,omitempty"`
	EnzymeTid          null.Int64  `boil:"enzyme_tid" json:"enzyme_tid,omitempty" toml:"enzyme_tid" yaml:"enzyme_tid,omitempty"`
	MetConversion      null.String `boil:"met_conversion" json:"met_conversion,omitempty" toml:"met_conversion" yaml:"met_conversion,omitempty"`
	Organism           null.String `boil:"organism" json:"organism,omitempty" toml:"organism" yaml:"organism,omitempty"`
	TaxID              null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	MetComment         null.String `boil:"met_comment" json:"met_comment,omitempty" toml:"met_comment" yaml:"met_comment,omitempty"`

	R *metabolismR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metabolismL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetabolismColumns = struct {
	MetID              string
	DrugRecordID       string
	SubstrateRecordID  string
	MetaboliteRecordID string
	PathwayID          string
	PathwayKey         string
	EnzymeName         string
	EnzymeTid          string
	MetConversion      string
	Organism           string
	TaxID              string
	MetComment         string
}{
	MetID:              "met_id",
	DrugRecordID:       "drug_record_id",
	SubstrateRecordID:  "substrate_record_id",
	MetaboliteRecordID: "metabolite_record_id",
	PathwayID:          "pathway_id",
	PathwayKey:         "pathway_key",
	EnzymeName:         "enzyme_name",
	EnzymeTid:          "enzyme_tid",
	MetConversion:      "met_conversion",
	Organism:           "organism",
	TaxID:              "tax_id",
	MetComment:         "met_comment",
}

var MetabolismTableColumns = struct {
	MetID              string
	DrugRecordID       string
	SubstrateRecordID  string
	MetaboliteRecordID string
	PathwayID          string
	PathwayKey         string
	EnzymeName         string
	EnzymeTid          string
	MetConversion      string
	Organism           string
	TaxID              string
	MetComment         string
}{
	MetID:              "metabolism.met_id",
	DrugRecordID:       "metabolism.drug_record_id",
	SubstrateRecordID:  "metabolism.substrate_record_id",
	MetaboliteRecordID: "metabolism.metabolite_record_id",
	PathwayID:          "metabolism.pathway_id",
	PathwayKey:         "metabolism.pathway_key",
	EnzymeName:         "metabolism.enzyme_name",
	EnzymeTid:          "metabolism.enzyme_tid",
	MetConversion:      "metabolism.met_conversion",
	Organism:           "metabolism.organism",
	TaxID:              "metabolism.tax_id",
	MetComment:         "metabolism.met_comment",
}

// Generated where

var MetabolismWhere = struct {
	MetID              whereHelperint64
	DrugRecordID       whereHelpernull_Int64
	SubstrateRecordID  whereHelpernull_Int64
	MetaboliteRecordID whereHelpernull_Int64
	PathwayID          whereHelpernull_Int64
	PathwayKey         whereHelpernull_String
	EnzymeName         whereHelpernull_String
	EnzymeTid          whereHelpernull_Int64
	MetConversion      whereHelpernull_String
	Organism           whereHelpernull_String
	TaxID              whereHelpernull_Int64
	MetComment         whereHelpernull_String
}{
	MetID:              whereHelperint64{field: "\"metabolism\".\"met_id\""},
	DrugRecordID:       whereHelpernull_Int64{field: "\"metabolism\".\"drug_record_id\""},
	SubstrateRecordID:  whereHelpernull_Int64{field: "\"metabolism\".\"substrate_record_id\""},
	MetaboliteRecordID: whereHelpernull_Int64{field: "\"metabolism\".\"metabolite_record_id\""},
	PathwayID:          whereHelpernull_Int64{field: "\"metabolism\".\"pathway_id\""},
	PathwayKey:         whereHelpernull_String{field: "\"metabolism\".\"pathway_key\""},
	EnzymeName:         whereHelpernull_String{field: "\"metabolism\".\"enzyme_name\""},
	EnzymeTid:          whereHelpernull_Int64{field: "\"metabolism\".\"enzyme_tid\""},
	MetConversion:      whereHelpernull_String{field: "\"metabolism\".\"met_conversion\""},
	Organism:           whereHelpernull_String{field: "\"metabolism\".\"organism\""},
	TaxID:              whereHelpernull_Int64{field: "\"metabolism\".\"tax_id\""},
	MetComment:         whereHelpernull_String{field: "\"metabolism\".\"met_comment\""},
}

// MetabolismRels is where relationship names are stored.
var MetabolismRels = struct {
	EnzymeTidTargetDictionary string
	SubstrateRecord           string
	MetaboliteRecord          string
	DrugRecord                string
	MetMetabolismRefs         string
}{
	EnzymeTidTargetDictionary: "EnzymeTidTargetDictionary",
	SubstrateRecord:           "SubstrateRecord",
	MetaboliteRecord:          "MetaboliteRecord",
	DrugRecord:                "DrugRecord",
	MetMetabolismRefs:         "MetMetabolismRefs",
}

// metabolismR is where relationships are stored.
type metabolismR struct {
	EnzymeTidTargetDictionary *TargetDictionary  `boil:"EnzymeTidTargetDictionary" json:"EnzymeTidTargetDictionary" toml:"EnzymeTidTargetDictionary" yaml:"EnzymeTidTargetDictionary"`
	SubstrateRecord           *CompoundRecord    `boil:"SubstrateRecord" json:"SubstrateRecord" toml:"SubstrateRecord" yaml:"SubstrateRecord"`
	MetaboliteRecord          *CompoundRecord    `boil:"MetaboliteRecord" json:"MetaboliteRecord" toml:"MetaboliteRecord" yaml:"MetaboliteRecord"`
	DrugRecord                *CompoundRecord    `boil:"DrugRecord" json:"DrugRecord" toml:"DrugRecord" yaml:"DrugRecord"`
	MetMetabolismRefs         MetabolismRefSlice `boil:"MetMetabolismRefs" json:"MetMetabolismRefs" toml:"MetMetabolismRefs" yaml:"MetMetabolismRefs"`
}

// NewStruct creates a new relationship struct
func (*metabolismR) NewStruct() *metabolismR {
	return &metabolismR{}
}

func (r *metabolismR) GetEnzymeTidTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.EnzymeTidTargetDictionary
}

func (r *metabolismR) GetSubstrateRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.SubstrateRecord
}

func (r *metabolismR) GetMetaboliteRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.MetaboliteRecord
}

func (r *metabolismR) GetDrugRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.DrugRecord
}

func (r *metabolismR) GetMetMetabolismRefs() MetabolismRefSlice {
	if r == nil {
		return nil
	}
	return r.MetMetabolismRefs
}

// metabolismL is where Load methods for each relationship are stored.
type metabolismL struct{}

var (
	metabolismAllColumns            = []string{"met_id", "drug_record_id", "substrate_record_id", "metabolite_record_id", "pathway_id", "pathway_key", "enzyme_name", "enzyme_tid", "met_conversion", "organism", "tax_id", "met_comment"}
	metabolismColumnsWithoutDefault = []string{"met_id"}
	metabolismColumnsWithDefault    = []string{"drug_record_id", "substrate_record_id", "metabolite_record_id", "pathway_id", "pathway_key", "enzyme_name", "enzyme_tid", "met_conversion", "organism", "tax_id", "met_comment"}
	metabolismPrimaryKeyColumns     = []string{"met_id"}
	metabolismGeneratedColumns      = []string{}
)

type (
	// MetabolismSlice is an alias for a slice of pointers to Metabolism.
	// This should almost always be used instead of []Metabolism.
	MetabolismSlice []*Metabolism
	// MetabolismHook is the signature for custom Metabolism hook methods
	MetabolismHook func(context.Context, boil.ContextExecutor, *Metabolism) error

	metabolismQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metabolismType                 = reflect.TypeOf(&Metabolism{})
	metabolismMapping              = queries.MakeStructMapping(metabolismType)
	metabolismPrimaryKeyMapping, _ = queries.BindMapping(metabolismType, metabolismMapping, metabolismPrimaryKeyColumns)
	metabolismInsertCacheMut       sync.RWMutex
	metabolismInsertCache          = make(map[string]insertCache)
	metabolismUpdateCacheMut       sync.RWMutex
	metabolismUpdateCache          = make(map[string]updateCache)
	metabolismUpsertCacheMut       sync.RWMutex
	metabolismUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metabolismAfterSelectHooks []MetabolismHook

var metabolismBeforeInsertHooks []MetabolismHook
var metabolismAfterInsertHooks []MetabolismHook

var metabolismBeforeUpdateHooks []MetabolismHook
var metabolismAfterUpdateHooks []MetabolismHook

var metabolismBeforeDeleteHooks []MetabolismHook
var metabolismAfterDeleteHooks []MetabolismHook

var metabolismBeforeUpsertHooks []MetabolismHook
var metabolismAfterUpsertHooks []MetabolismHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Metabolism) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Metabolism) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Metabolism) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Metabolism) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Metabolism) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Metabolism) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Metabolism) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Metabolism) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Metabolism) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metabolismAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetabolismHook registers your hook function for all future operations.
func AddMetabolismHook(hookPoint boil.HookPoint, metabolismHook MetabolismHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metabolismAfterSelectHooks = append(metabolismAfterSelectHooks, metabolismHook)
	case boil.BeforeInsertHook:
		metabolismBeforeInsertHooks = append(metabolismBeforeInsertHooks, metabolismHook)
	case boil.AfterInsertHook:
		metabolismAfterInsertHooks = append(metabolismAfterInsertHooks, metabolismHook)
	case boil.BeforeUpdateHook:
		metabolismBeforeUpdateHooks = append(metabolismBeforeUpdateHooks, metabolismHook)
	case boil.AfterUpdateHook:
		metabolismAfterUpdateHooks = append(metabolismAfterUpdateHooks, metabolismHook)
	case boil.BeforeDeleteHook:
		metabolismBeforeDeleteHooks = append(metabolismBeforeDeleteHooks, metabolismHook)
	case boil.AfterDeleteHook:
		metabolismAfterDeleteHooks = append(metabolismAfterDeleteHooks, metabolismHook)
	case boil.BeforeUpsertHook:
		metabolismBeforeUpsertHooks = append(metabolismBeforeUpsertHooks, metabolismHook)
	case boil.AfterUpsertHook:
		metabolismAfterUpsertHooks = append(metabolismAfterUpsertHooks, metabolismHook)
	}
}

// One returns a single metabolism record from the query.
func (q metabolismQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Metabolism, error) {
	o := &Metabolism{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for metabolism")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Metabolism records from the query.
func (q metabolismQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetabolismSlice, error) {
	var o []*Metabolism

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Metabolism slice")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Metabolism records in the query.
func (q metabolismQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count metabolism rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metabolismQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if metabolism exists")
	}

	return count > 0, nil
}

// EnzymeTidTargetDictionary pointed to by the foreign key.
func (o *Metabolism) EnzymeTidTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tid\" = ?", o.EnzymeTid),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// SubstrateRecord pointed to by the foreign key.
func (o *Metabolism) SubstrateRecord(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.SubstrateRecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// MetaboliteRecord pointed to by the foreign key.
func (o *Metabolism) MetaboliteRecord(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.MetaboliteRecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// DrugRecord pointed to by the foreign key.
func (o *Metabolism) DrugRecord(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.DrugRecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// MetMetabolismRefs retrieves all the metabolism_ref's MetabolismRefs with an executor via met_id column.
func (o *Metabolism) MetMetabolismRefs(mods ...qm.QueryMod) metabolismRefQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"metabolism_refs\".\"met_id\"=?", o.MetID),
	)

	return MetabolismRefs(queryMods...)
}

// LoadEnzymeTidTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (metabolismL) LoadEnzymeTidTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolism interface{}, mods queries.Applicator) error {
	var slice []*Metabolism
	var object *Metabolism

	if singular {
		object = maybeMetabolism.(*Metabolism)
	} else {
		slice = *maybeMetabolism.(*[]*Metabolism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismR{}
		}
		if !queries.IsNil(object.EnzymeTid) {
			args = append(args, object.EnzymeTid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EnzymeTid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EnzymeTid) {
				args = append(args, obj.EnzymeTid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.tid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnzymeTidTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.EnzymeTidMetabolisms = append(foreign.R.EnzymeTidMetabolisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EnzymeTid, foreign.Tid) {
				local.R.EnzymeTidTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.EnzymeTidMetabolisms = append(foreign.R.EnzymeTidMetabolisms, local)
				break
			}
		}
	}

	return nil
}

// LoadSubstrateRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (metabolismL) LoadSubstrateRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolism interface{}, mods queries.Applicator) error {
	var slice []*Metabolism
	var object *Metabolism

	if singular {
		object = maybeMetabolism.(*Metabolism)
	} else {
		slice = *maybeMetabolism.(*[]*Metabolism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismR{}
		}
		if !queries.IsNil(object.SubstrateRecordID) {
			args = append(args, object.SubstrateRecordID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubstrateRecordID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubstrateRecordID) {
				args = append(args, obj.SubstrateRecordID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubstrateRecord = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.SubstrateRecordMetabolisms = append(foreign.R.SubstrateRecordMetabolisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubstrateRecordID, foreign.RecordID) {
				local.R.SubstrateRecord = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.SubstrateRecordMetabolisms = append(foreign.R.SubstrateRecordMetabolisms, local)
				break
			}
		}
	}

	return nil
}

// LoadMetaboliteRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (metabolismL) LoadMetaboliteRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolism interface{}, mods queries.Applicator) error {
	var slice []*Metabolism
	var object *Metabolism

	if singular {
		object = maybeMetabolism.(*Metabolism)
	} else {
		slice = *maybeMetabolism.(*[]*Metabolism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismR{}
		}
		if !queries.IsNil(object.MetaboliteRecordID) {
			args = append(args, object.MetaboliteRecordID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MetaboliteRecordID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MetaboliteRecordID) {
				args = append(args, obj.MetaboliteRecordID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MetaboliteRecord = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.MetaboliteRecordMetabolisms = append(foreign.R.MetaboliteRecordMetabolisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MetaboliteRecordID, foreign.RecordID) {
				local.R.MetaboliteRecord = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.MetaboliteRecordMetabolisms = append(foreign.R.MetaboliteRecordMetabolisms, local)
				break
			}
		}
	}

	return nil
}

// LoadDrugRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (metabolismL) LoadDrugRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolism interface{}, mods queries.Applicator) error {
	var slice []*Metabolism
	var object *Metabolism

	if singular {
		object = maybeMetabolism.(*Metabolism)
	} else {
		slice = *maybeMetabolism.(*[]*Metabolism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismR{}
		}
		if !queries.IsNil(object.DrugRecordID) {
			args = append(args, object.DrugRecordID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DrugRecordID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DrugRecordID) {
				args = append(args, obj.DrugRecordID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(metabolismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DrugRecord = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.DrugRecordMetabolisms = append(foreign.R.DrugRecordMetabolisms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DrugRecordID, foreign.RecordID) {
				local.R.DrugRecord = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.DrugRecordMetabolisms = append(foreign.R.DrugRecordMetabolisms, local)
				break
			}
		}
	}

	return nil
}

// LoadMetMetabolismRefs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metabolismL) LoadMetMetabolismRefs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetabolism interface{}, mods queries.Applicator) error {
	var slice []*Metabolism
	var object *Metabolism

	if singular {
		object = maybeMetabolism.(*Metabolism)
	} else {
		slice = *maybeMetabolism.(*[]*Metabolism)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metabolismR{}
		}
		args = append(args, object.MetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metabolismR{}
			}

			for _, a := range args {
				if a == obj.MetID {
					continue Outer
				}
			}

			args = append(args, obj.MetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`metabolism_refs`),
		qm.WhereIn(`metabolism_refs.met_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metabolism_refs")
	}

	var resultSlice []*MetabolismRef
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice metabolism_refs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on metabolism_refs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for metabolism_refs")
	}

	if len(metabolismRefAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MetMetabolismRefs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metabolismRefR{}
			}
			foreign.R.Met = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MetID == foreign.MetID {
				local.R.MetMetabolismRefs = append(local.R.MetMetabolismRefs, foreign)
				if foreign.R == nil {
					foreign.R = &metabolismRefR{}
				}
				foreign.R.Met = local
				break
			}
		}
	}

	return nil
}

// SetEnzymeTidTargetDictionary of the metabolism to the related item.
// Sets o.R.EnzymeTidTargetDictionary to related.
// Adds o to related.R.EnzymeTidMetabolisms.
func (o *Metabolism) SetEnzymeTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metabolism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"enzyme_tid"}),
		strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
	)
	values := []interface{}{related.Tid, o.MetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EnzymeTid, related.Tid)
	if o.R == nil {
		o.R = &metabolismR{
			EnzymeTidTargetDictionary: related,
		}
	} else {
		o.R.EnzymeTidTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			EnzymeTidMetabolisms: MetabolismSlice{o},
		}
	} else {
		related.R.EnzymeTidMetabolisms = append(related.R.EnzymeTidMetabolisms, o)
	}

	return nil
}

// RemoveEnzymeTidTargetDictionary relationship.
// Sets o.R.EnzymeTidTargetDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Metabolism) RemoveEnzymeTidTargetDictionary(ctx context.Context, exec boil.ContextExecutor, related *TargetDictionary) error {
	var err error

	queries.SetScanner(&o.EnzymeTid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("enzyme_tid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EnzymeTidTargetDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EnzymeTidMetabolisms {
		if queries.Equal(o.EnzymeTid, ri.EnzymeTid) {
			continue
		}

		ln := len(related.R.EnzymeTidMetabolisms)
		if ln > 1 && i < ln-1 {
			related.R.EnzymeTidMetabolisms[i] = related.R.EnzymeTidMetabolisms[ln-1]
		}
		related.R.EnzymeTidMetabolisms = related.R.EnzymeTidMetabolisms[:ln-1]
		break
	}
	return nil
}

// SetSubstrateRecord of the metabolism to the related item.
// Sets o.R.SubstrateRecord to related.
// Adds o to related.R.SubstrateRecordMetabolisms.
func (o *Metabolism) SetSubstrateRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metabolism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"substrate_record_id"}),
		strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.MetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubstrateRecordID, related.RecordID)
	if o.R == nil {
		o.R = &metabolismR{
			SubstrateRecord: related,
		}
	} else {
		o.R.SubstrateRecord = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			SubstrateRecordMetabolisms: MetabolismSlice{o},
		}
	} else {
		related.R.SubstrateRecordMetabolisms = append(related.R.SubstrateRecordMetabolisms, o)
	}

	return nil
}

// RemoveSubstrateRecord relationship.
// Sets o.R.SubstrateRecord to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Metabolism) RemoveSubstrateRecord(ctx context.Context, exec boil.ContextExecutor, related *CompoundRecord) error {
	var err error

	queries.SetScanner(&o.SubstrateRecordID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("substrate_record_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubstrateRecord = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubstrateRecordMetabolisms {
		if queries.Equal(o.SubstrateRecordID, ri.SubstrateRecordID) {
			continue
		}

		ln := len(related.R.SubstrateRecordMetabolisms)
		if ln > 1 && i < ln-1 {
			related.R.SubstrateRecordMetabolisms[i] = related.R.SubstrateRecordMetabolisms[ln-1]
		}
		related.R.SubstrateRecordMetabolisms = related.R.SubstrateRecordMetabolisms[:ln-1]
		break
	}
	return nil
}

// SetMetaboliteRecord of the metabolism to the related item.
// Sets o.R.MetaboliteRecord to related.
// Adds o to related.R.MetaboliteRecordMetabolisms.
func (o *Metabolism) SetMetaboliteRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metabolism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"metabolite_record_id"}),
		strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.MetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MetaboliteRecordID, related.RecordID)
	if o.R == nil {
		o.R = &metabolismR{
			MetaboliteRecord: related,
		}
	} else {
		o.R.MetaboliteRecord = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			MetaboliteRecordMetabolisms: MetabolismSlice{o},
		}
	} else {
		related.R.MetaboliteRecordMetabolisms = append(related.R.MetaboliteRecordMetabolisms, o)
	}

	return nil
}

// RemoveMetaboliteRecord relationship.
// Sets o.R.MetaboliteRecord to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Metabolism) RemoveMetaboliteRecord(ctx context.Context, exec boil.ContextExecutor, related *CompoundRecord) error {
	var err error

	queries.SetScanner(&o.MetaboliteRecordID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("metabolite_record_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MetaboliteRecord = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MetaboliteRecordMetabolisms {
		if queries.Equal(o.MetaboliteRecordID, ri.MetaboliteRecordID) {
			continue
		}

		ln := len(related.R.MetaboliteRecordMetabolisms)
		if ln > 1 && i < ln-1 {
			related.R.MetaboliteRecordMetabolisms[i] = related.R.MetaboliteRecordMetabolisms[ln-1]
		}
		related.R.MetaboliteRecordMetabolisms = related.R.MetaboliteRecordMetabolisms[:ln-1]
		break
	}
	return nil
}

// SetDrugRecord of the metabolism to the related item.
// Sets o.R.DrugRecord to related.
// Adds o to related.R.DrugRecordMetabolisms.
func (o *Metabolism) SetDrugRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metabolism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"drug_record_id"}),
		strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.MetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DrugRecordID, related.RecordID)
	if o.R == nil {
		o.R = &metabolismR{
			DrugRecord: related,
		}
	} else {
		o.R.DrugRecord = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			DrugRecordMetabolisms: MetabolismSlice{o},
		}
	} else {
		related.R.DrugRecordMetabolisms = append(related.R.DrugRecordMetabolisms, o)
	}

	return nil
}

// RemoveDrugRecord relationship.
// Sets o.R.DrugRecord to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Metabolism) RemoveDrugRecord(ctx context.Context, exec boil.ContextExecutor, related *CompoundRecord) error {
	var err error

	queries.SetScanner(&o.DrugRecordID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("drug_record_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DrugRecord = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DrugRecordMetabolisms {
		if queries.Equal(o.DrugRecordID, ri.DrugRecordID) {
			continue
		}

		ln := len(related.R.DrugRecordMetabolisms)
		if ln > 1 && i < ln-1 {
			related.R.DrugRecordMetabolisms[i] = related.R.DrugRecordMetabolisms[ln-1]
		}
		related.R.DrugRecordMetabolisms = related.R.DrugRecordMetabolisms[:ln-1]
		break
	}
	return nil
}

// AddMetMetabolismRefs adds the given related objects to the existing relationships
// of the metabolism, optionally inserting them as new records.
// Appends related to o.R.MetMetabolismRefs.
// Sets related.R.Met appropriately.
func (o *Metabolism) AddMetMetabolismRefs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MetabolismRef) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MetID = o.MetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"metabolism_refs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"met_id"}),
				strmangle.WhereClause("\"", "\"", 0, metabolismRefPrimaryKeyColumns),
			)
			values := []interface{}{o.MetID, rel.MetrefID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MetID = o.MetID
		}
	}

	if o.R == nil {
		o.R = &metabolismR{
			MetMetabolismRefs: related,
		}
	} else {
		o.R.MetMetabolismRefs = append(o.R.MetMetabolismRefs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metabolismRefR{
				Met: o,
			}
		} else {
			rel.R.Met = o
		}
	}
	return nil
}

// Metabolisms retrieves all the records using an executor.
func Metabolisms(mods ...qm.QueryMod) metabolismQuery {
	mods = append(mods, qm.From("\"metabolism\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"metabolism\".*"})
	}

	return metabolismQuery{q}
}

// FindMetabolism retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetabolism(ctx context.Context, exec boil.ContextExecutor, metID int64, selectCols ...string) (*Metabolism, error) {
	metabolismObj := &Metabolism{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metabolism\" where \"met_id\"=?", sel,
	)

	q := queries.Raw(query, metID)

	err := q.Bind(ctx, exec, metabolismObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from metabolism")
	}

	if err = metabolismObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metabolismObj, err
	}

	return metabolismObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Metabolism) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metabolism provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metabolismColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metabolismInsertCacheMut.RLock()
	cache, cached := metabolismInsertCache[key]
	metabolismInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metabolismAllColumns,
			metabolismColumnsWithDefault,
			metabolismColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metabolismType, metabolismMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metabolismType, metabolismMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metabolism\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metabolism\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into metabolism")
	}

	if !cached {
		metabolismInsertCacheMut.Lock()
		metabolismInsertCache[key] = cache
		metabolismInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Metabolism.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Metabolism) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metabolismUpdateCacheMut.RLock()
	cache, cached := metabolismUpdateCache[key]
	metabolismUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metabolismAllColumns,
			metabolismPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update metabolism, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metabolism\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, metabolismPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metabolismType, metabolismMapping, append(wl, metabolismPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update metabolism row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for metabolism")
	}

	if !cached {
		metabolismUpdateCacheMut.Lock()
		metabolismUpdateCache[key] = cache
		metabolismUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metabolismQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for metabolism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for metabolism")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetabolismSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"metabolism\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metabolism slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metabolism")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Metabolism) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metabolism provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metabolismColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metabolismUpsertCacheMut.RLock()
	cache, cached := metabolismUpsertCache[key]
	metabolismUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			metabolismAllColumns,
			metabolismColumnsWithDefault,
			metabolismColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			metabolismAllColumns,
			metabolismPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert metabolism, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metabolismPrimaryKeyColumns))
			copy(conflict, metabolismPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"metabolism\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(metabolismType, metabolismMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metabolismType, metabolismMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert metabolism")
	}

	if !cached {
		metabolismUpsertCacheMut.Lock()
		metabolismUpsertCache[key] = cache
		metabolismUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Metabolism record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Metabolism) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Metabolism provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metabolismPrimaryKeyMapping)
	sql := "DELETE FROM \"metabolism\" WHERE \"met_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from metabolism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for metabolism")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metabolismQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metabolismQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metabolism")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metabolism")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetabolismSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metabolismBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"metabolism\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metabolism slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metabolism")
	}

	if len(metabolismAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Metabolism) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetabolism(ctx, exec, o.MetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetabolismSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetabolismSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metabolismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"metabolism\".* FROM \"metabolism\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metabolismPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetabolismSlice")
	}

	*o = slice

	return nil
}

// MetabolismExists checks if the Metabolism row exists.
func MetabolismExists(ctx context.Context, exec boil.ContextExecutor, metID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"metabolism\" where \"met_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, metID)
	}
	row := exec.QueryRowContext(ctx, sql, metID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if metabolism exists")
	}

	return exists, nil
}
