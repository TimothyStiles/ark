// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ResearchStem is an object representing the database table.
type ResearchStem struct {
	ResStemID    int64       `boil:"res_stem_id" json:"res_stem_id" toml:"res_stem_id" yaml:"res_stem_id"`
	ResearchStem null.String `boil:"research_stem" json:"research_stem,omitempty" toml:"research_stem" yaml:"research_stem,omitempty"`

	R *researchStemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L researchStemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ResearchStemColumns = struct {
	ResStemID    string
	ResearchStem string
}{
	ResStemID:    "res_stem_id",
	ResearchStem: "research_stem",
}

var ResearchStemTableColumns = struct {
	ResStemID    string
	ResearchStem string
}{
	ResStemID:    "research_stem.res_stem_id",
	ResearchStem: "research_stem.research_stem",
}

// Generated where

var ResearchStemWhere = struct {
	ResStemID    whereHelperint64
	ResearchStem whereHelpernull_String
}{
	ResStemID:    whereHelperint64{field: "\"research_stem\".\"res_stem_id\""},
	ResearchStem: whereHelpernull_String{field: "\"research_stem\".\"research_stem\""},
}

// ResearchStemRels is where relationship names are stored.
var ResearchStemRels = struct {
	ResStemMoleculeSynonyms  string
	ResStemResearchCompanies string
}{
	ResStemMoleculeSynonyms:  "ResStemMoleculeSynonyms",
	ResStemResearchCompanies: "ResStemResearchCompanies",
}

// researchStemR is where relationships are stored.
type researchStemR struct {
	ResStemMoleculeSynonyms  MoleculeSynonymSlice `boil:"ResStemMoleculeSynonyms" json:"ResStemMoleculeSynonyms" toml:"ResStemMoleculeSynonyms" yaml:"ResStemMoleculeSynonyms"`
	ResStemResearchCompanies ResearchCompanySlice `boil:"ResStemResearchCompanies" json:"ResStemResearchCompanies" toml:"ResStemResearchCompanies" yaml:"ResStemResearchCompanies"`
}

// NewStruct creates a new relationship struct
func (*researchStemR) NewStruct() *researchStemR {
	return &researchStemR{}
}

func (r *researchStemR) GetResStemMoleculeSynonyms() MoleculeSynonymSlice {
	if r == nil {
		return nil
	}
	return r.ResStemMoleculeSynonyms
}

func (r *researchStemR) GetResStemResearchCompanies() ResearchCompanySlice {
	if r == nil {
		return nil
	}
	return r.ResStemResearchCompanies
}

// researchStemL is where Load methods for each relationship are stored.
type researchStemL struct{}

var (
	researchStemAllColumns            = []string{"res_stem_id", "research_stem"}
	researchStemColumnsWithoutDefault = []string{"res_stem_id"}
	researchStemColumnsWithDefault    = []string{"research_stem"}
	researchStemPrimaryKeyColumns     = []string{"res_stem_id"}
	researchStemGeneratedColumns      = []string{}
)

type (
	// ResearchStemSlice is an alias for a slice of pointers to ResearchStem.
	// This should almost always be used instead of []ResearchStem.
	ResearchStemSlice []*ResearchStem
	// ResearchStemHook is the signature for custom ResearchStem hook methods
	ResearchStemHook func(context.Context, boil.ContextExecutor, *ResearchStem) error

	researchStemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	researchStemType                 = reflect.TypeOf(&ResearchStem{})
	researchStemMapping              = queries.MakeStructMapping(researchStemType)
	researchStemPrimaryKeyMapping, _ = queries.BindMapping(researchStemType, researchStemMapping, researchStemPrimaryKeyColumns)
	researchStemInsertCacheMut       sync.RWMutex
	researchStemInsertCache          = make(map[string]insertCache)
	researchStemUpdateCacheMut       sync.RWMutex
	researchStemUpdateCache          = make(map[string]updateCache)
	researchStemUpsertCacheMut       sync.RWMutex
	researchStemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var researchStemAfterSelectHooks []ResearchStemHook

var researchStemBeforeInsertHooks []ResearchStemHook
var researchStemAfterInsertHooks []ResearchStemHook

var researchStemBeforeUpdateHooks []ResearchStemHook
var researchStemAfterUpdateHooks []ResearchStemHook

var researchStemBeforeDeleteHooks []ResearchStemHook
var researchStemAfterDeleteHooks []ResearchStemHook

var researchStemBeforeUpsertHooks []ResearchStemHook
var researchStemAfterUpsertHooks []ResearchStemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ResearchStem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ResearchStem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ResearchStem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ResearchStem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ResearchStem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ResearchStem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ResearchStem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ResearchStem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ResearchStem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range researchStemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResearchStemHook registers your hook function for all future operations.
func AddResearchStemHook(hookPoint boil.HookPoint, researchStemHook ResearchStemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		researchStemAfterSelectHooks = append(researchStemAfterSelectHooks, researchStemHook)
	case boil.BeforeInsertHook:
		researchStemBeforeInsertHooks = append(researchStemBeforeInsertHooks, researchStemHook)
	case boil.AfterInsertHook:
		researchStemAfterInsertHooks = append(researchStemAfterInsertHooks, researchStemHook)
	case boil.BeforeUpdateHook:
		researchStemBeforeUpdateHooks = append(researchStemBeforeUpdateHooks, researchStemHook)
	case boil.AfterUpdateHook:
		researchStemAfterUpdateHooks = append(researchStemAfterUpdateHooks, researchStemHook)
	case boil.BeforeDeleteHook:
		researchStemBeforeDeleteHooks = append(researchStemBeforeDeleteHooks, researchStemHook)
	case boil.AfterDeleteHook:
		researchStemAfterDeleteHooks = append(researchStemAfterDeleteHooks, researchStemHook)
	case boil.BeforeUpsertHook:
		researchStemBeforeUpsertHooks = append(researchStemBeforeUpsertHooks, researchStemHook)
	case boil.AfterUpsertHook:
		researchStemAfterUpsertHooks = append(researchStemAfterUpsertHooks, researchStemHook)
	}
}

// One returns a single researchStem record from the query.
func (q researchStemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ResearchStem, error) {
	o := &ResearchStem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for research_stem")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ResearchStem records from the query.
func (q researchStemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ResearchStemSlice, error) {
	var o []*ResearchStem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ResearchStem slice")
	}

	if len(researchStemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ResearchStem records in the query.
func (q researchStemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count research_stem rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q researchStemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if research_stem exists")
	}

	return count > 0, nil
}

// ResStemMoleculeSynonyms retrieves all the molecule_synonym's MoleculeSynonyms with an executor via res_stem_id column.
func (o *ResearchStem) ResStemMoleculeSynonyms(mods ...qm.QueryMod) moleculeSynonymQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"molecule_synonyms\".\"res_stem_id\"=?", o.ResStemID),
	)

	return MoleculeSynonyms(queryMods...)
}

// ResStemResearchCompanies retrieves all the research_company's ResearchCompanies with an executor via res_stem_id column.
func (o *ResearchStem) ResStemResearchCompanies(mods ...qm.QueryMod) researchCompanyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"research_companies\".\"res_stem_id\"=?", o.ResStemID),
	)

	return ResearchCompanies(queryMods...)
}

// LoadResStemMoleculeSynonyms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (researchStemL) LoadResStemMoleculeSynonyms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResearchStem interface{}, mods queries.Applicator) error {
	var slice []*ResearchStem
	var object *ResearchStem

	if singular {
		object = maybeResearchStem.(*ResearchStem)
	} else {
		slice = *maybeResearchStem.(*[]*ResearchStem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &researchStemR{}
		}
		args = append(args, object.ResStemID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &researchStemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ResStemID) {
					continue Outer
				}
			}

			args = append(args, obj.ResStemID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_synonyms`),
		qm.WhereIn(`molecule_synonyms.res_stem_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load molecule_synonyms")
	}

	var resultSlice []*MoleculeSynonym
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice molecule_synonyms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on molecule_synonyms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_synonyms")
	}

	if len(moleculeSynonymAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResStemMoleculeSynonyms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moleculeSynonymR{}
			}
			foreign.R.ResStem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ResStemID, foreign.ResStemID) {
				local.R.ResStemMoleculeSynonyms = append(local.R.ResStemMoleculeSynonyms, foreign)
				if foreign.R == nil {
					foreign.R = &moleculeSynonymR{}
				}
				foreign.R.ResStem = local
				break
			}
		}
	}

	return nil
}

// LoadResStemResearchCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (researchStemL) LoadResStemResearchCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResearchStem interface{}, mods queries.Applicator) error {
	var slice []*ResearchStem
	var object *ResearchStem

	if singular {
		object = maybeResearchStem.(*ResearchStem)
	} else {
		slice = *maybeResearchStem.(*[]*ResearchStem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &researchStemR{}
		}
		args = append(args, object.ResStemID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &researchStemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ResStemID) {
					continue Outer
				}
			}

			args = append(args, obj.ResStemID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`research_companies`),
		qm.WhereIn(`research_companies.res_stem_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load research_companies")
	}

	var resultSlice []*ResearchCompany
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice research_companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on research_companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for research_companies")
	}

	if len(researchCompanyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResStemResearchCompanies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &researchCompanyR{}
			}
			foreign.R.ResStem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ResStemID, foreign.ResStemID) {
				local.R.ResStemResearchCompanies = append(local.R.ResStemResearchCompanies, foreign)
				if foreign.R == nil {
					foreign.R = &researchCompanyR{}
				}
				foreign.R.ResStem = local
				break
			}
		}
	}

	return nil
}

// AddResStemMoleculeSynonyms adds the given related objects to the existing relationships
// of the research_stem, optionally inserting them as new records.
// Appends related to o.R.ResStemMoleculeSynonyms.
// Sets related.R.ResStem appropriately.
func (o *ResearchStem) AddResStemMoleculeSynonyms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MoleculeSynonym) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResStemID, o.ResStemID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"molecule_synonyms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"res_stem_id"}),
				strmangle.WhereClause("\"", "\"", 0, moleculeSynonymPrimaryKeyColumns),
			)
			values := []interface{}{o.ResStemID, rel.MolsynID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResStemID, o.ResStemID)
		}
	}

	if o.R == nil {
		o.R = &researchStemR{
			ResStemMoleculeSynonyms: related,
		}
	} else {
		o.R.ResStemMoleculeSynonyms = append(o.R.ResStemMoleculeSynonyms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moleculeSynonymR{
				ResStem: o,
			}
		} else {
			rel.R.ResStem = o
		}
	}
	return nil
}

// SetResStemMoleculeSynonyms removes all previously related items of the
// research_stem replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ResStem's ResStemMoleculeSynonyms accordingly.
// Replaces o.R.ResStemMoleculeSynonyms with related.
// Sets related.R.ResStem's ResStemMoleculeSynonyms accordingly.
func (o *ResearchStem) SetResStemMoleculeSynonyms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MoleculeSynonym) error {
	query := "update \"molecule_synonyms\" set \"res_stem_id\" = null where \"res_stem_id\" = ?"
	values := []interface{}{o.ResStemID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResStemMoleculeSynonyms {
			queries.SetScanner(&rel.ResStemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ResStem = nil
		}
		o.R.ResStemMoleculeSynonyms = nil
	}

	return o.AddResStemMoleculeSynonyms(ctx, exec, insert, related...)
}

// RemoveResStemMoleculeSynonyms relationships from objects passed in.
// Removes related items from R.ResStemMoleculeSynonyms (uses pointer comparison, removal does not keep order)
// Sets related.R.ResStem.
func (o *ResearchStem) RemoveResStemMoleculeSynonyms(ctx context.Context, exec boil.ContextExecutor, related ...*MoleculeSynonym) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResStemID, nil)
		if rel.R != nil {
			rel.R.ResStem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("res_stem_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResStemMoleculeSynonyms {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResStemMoleculeSynonyms)
			if ln > 1 && i < ln-1 {
				o.R.ResStemMoleculeSynonyms[i] = o.R.ResStemMoleculeSynonyms[ln-1]
			}
			o.R.ResStemMoleculeSynonyms = o.R.ResStemMoleculeSynonyms[:ln-1]
			break
		}
	}

	return nil
}

// AddResStemResearchCompanies adds the given related objects to the existing relationships
// of the research_stem, optionally inserting them as new records.
// Appends related to o.R.ResStemResearchCompanies.
// Sets related.R.ResStem appropriately.
func (o *ResearchStem) AddResStemResearchCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResearchCompany) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResStemID, o.ResStemID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"research_companies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"res_stem_id"}),
				strmangle.WhereClause("\"", "\"", 0, researchCompanyPrimaryKeyColumns),
			)
			values := []interface{}{o.ResStemID, rel.CoStemID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResStemID, o.ResStemID)
		}
	}

	if o.R == nil {
		o.R = &researchStemR{
			ResStemResearchCompanies: related,
		}
	} else {
		o.R.ResStemResearchCompanies = append(o.R.ResStemResearchCompanies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &researchCompanyR{
				ResStem: o,
			}
		} else {
			rel.R.ResStem = o
		}
	}
	return nil
}

// SetResStemResearchCompanies removes all previously related items of the
// research_stem replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ResStem's ResStemResearchCompanies accordingly.
// Replaces o.R.ResStemResearchCompanies with related.
// Sets related.R.ResStem's ResStemResearchCompanies accordingly.
func (o *ResearchStem) SetResStemResearchCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResearchCompany) error {
	query := "update \"research_companies\" set \"res_stem_id\" = null where \"res_stem_id\" = ?"
	values := []interface{}{o.ResStemID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResStemResearchCompanies {
			queries.SetScanner(&rel.ResStemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ResStem = nil
		}
		o.R.ResStemResearchCompanies = nil
	}

	return o.AddResStemResearchCompanies(ctx, exec, insert, related...)
}

// RemoveResStemResearchCompanies relationships from objects passed in.
// Removes related items from R.ResStemResearchCompanies (uses pointer comparison, removal does not keep order)
// Sets related.R.ResStem.
func (o *ResearchStem) RemoveResStemResearchCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*ResearchCompany) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResStemID, nil)
		if rel.R != nil {
			rel.R.ResStem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("res_stem_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResStemResearchCompanies {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResStemResearchCompanies)
			if ln > 1 && i < ln-1 {
				o.R.ResStemResearchCompanies[i] = o.R.ResStemResearchCompanies[ln-1]
			}
			o.R.ResStemResearchCompanies = o.R.ResStemResearchCompanies[:ln-1]
			break
		}
	}

	return nil
}

// ResearchStems retrieves all the records using an executor.
func ResearchStems(mods ...qm.QueryMod) researchStemQuery {
	mods = append(mods, qm.From("\"research_stem\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"research_stem\".*"})
	}

	return researchStemQuery{q}
}

// FindResearchStem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResearchStem(ctx context.Context, exec boil.ContextExecutor, resStemID int64, selectCols ...string) (*ResearchStem, error) {
	researchStemObj := &ResearchStem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"research_stem\" where \"res_stem_id\"=?", sel,
	)

	q := queries.Raw(query, resStemID)

	err := q.Bind(ctx, exec, researchStemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from research_stem")
	}

	if err = researchStemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return researchStemObj, err
	}

	return researchStemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ResearchStem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no research_stem provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(researchStemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	researchStemInsertCacheMut.RLock()
	cache, cached := researchStemInsertCache[key]
	researchStemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			researchStemAllColumns,
			researchStemColumnsWithDefault,
			researchStemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(researchStemType, researchStemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(researchStemType, researchStemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"research_stem\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"research_stem\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into research_stem")
	}

	if !cached {
		researchStemInsertCacheMut.Lock()
		researchStemInsertCache[key] = cache
		researchStemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ResearchStem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ResearchStem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	researchStemUpdateCacheMut.RLock()
	cache, cached := researchStemUpdateCache[key]
	researchStemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			researchStemAllColumns,
			researchStemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update research_stem, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"research_stem\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, researchStemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(researchStemType, researchStemMapping, append(wl, researchStemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update research_stem row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for research_stem")
	}

	if !cached {
		researchStemUpdateCacheMut.Lock()
		researchStemUpdateCache[key] = cache
		researchStemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q researchStemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for research_stem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for research_stem")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResearchStemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), researchStemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"research_stem\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, researchStemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in researchStem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all researchStem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ResearchStem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no research_stem provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(researchStemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	researchStemUpsertCacheMut.RLock()
	cache, cached := researchStemUpsertCache[key]
	researchStemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			researchStemAllColumns,
			researchStemColumnsWithDefault,
			researchStemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			researchStemAllColumns,
			researchStemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert research_stem, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(researchStemPrimaryKeyColumns))
			copy(conflict, researchStemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"research_stem\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(researchStemType, researchStemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(researchStemType, researchStemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert research_stem")
	}

	if !cached {
		researchStemUpsertCacheMut.Lock()
		researchStemUpsertCache[key] = cache
		researchStemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ResearchStem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ResearchStem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ResearchStem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), researchStemPrimaryKeyMapping)
	sql := "DELETE FROM \"research_stem\" WHERE \"res_stem_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from research_stem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for research_stem")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q researchStemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no researchStemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from research_stem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for research_stem")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResearchStemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(researchStemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), researchStemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"research_stem\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, researchStemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from researchStem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for research_stem")
	}

	if len(researchStemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ResearchStem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindResearchStem(ctx, exec, o.ResStemID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResearchStemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ResearchStemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), researchStemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"research_stem\".* FROM \"research_stem\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, researchStemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResearchStemSlice")
	}

	*o = slice

	return nil
}

// ResearchStemExists checks if the ResearchStem row exists.
func ResearchStemExists(ctx context.Context, exec boil.ContextExecutor, resStemID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"research_stem\" where \"res_stem_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, resStemID)
	}
	row := exec.QueryRowContext(ctx, sql, resStemID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if research_stem exists")
	}

	return exists, nil
}
