// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrganismClass is an object representing the database table.
type OrganismClass struct {
	OcID  int64       `boil:"oc_id" json:"oc_id" toml:"oc_id" yaml:"oc_id"`
	TaxID null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	L1    null.String `boil:"l1" json:"l1,omitempty" toml:"l1" yaml:"l1,omitempty"`
	L2    null.String `boil:"l2" json:"l2,omitempty" toml:"l2" yaml:"l2,omitempty"`
	L3    null.String `boil:"l3" json:"l3,omitempty" toml:"l3" yaml:"l3,omitempty"`

	R *organismClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organismClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganismClassColumns = struct {
	OcID  string
	TaxID string
	L1    string
	L2    string
	L3    string
}{
	OcID:  "oc_id",
	TaxID: "tax_id",
	L1:    "l1",
	L2:    "l2",
	L3:    "l3",
}

var OrganismClassTableColumns = struct {
	OcID  string
	TaxID string
	L1    string
	L2    string
	L3    string
}{
	OcID:  "organism_class.oc_id",
	TaxID: "organism_class.tax_id",
	L1:    "organism_class.l1",
	L2:    "organism_class.l2",
	L3:    "organism_class.l3",
}

// Generated where

var OrganismClassWhere = struct {
	OcID  whereHelperint64
	TaxID whereHelpernull_Int64
	L1    whereHelpernull_String
	L2    whereHelpernull_String
	L3    whereHelpernull_String
}{
	OcID:  whereHelperint64{field: "\"organism_class\".\"oc_id\""},
	TaxID: whereHelpernull_Int64{field: "\"organism_class\".\"tax_id\""},
	L1:    whereHelpernull_String{field: "\"organism_class\".\"l1\""},
	L2:    whereHelpernull_String{field: "\"organism_class\".\"l2\""},
	L3:    whereHelpernull_String{field: "\"organism_class\".\"l3\""},
}

// OrganismClassRels is where relationship names are stored.
var OrganismClassRels = struct {
}{}

// organismClassR is where relationships are stored.
type organismClassR struct {
}

// NewStruct creates a new relationship struct
func (*organismClassR) NewStruct() *organismClassR {
	return &organismClassR{}
}

// organismClassL is where Load methods for each relationship are stored.
type organismClassL struct{}

var (
	organismClassAllColumns            = []string{"oc_id", "tax_id", "l1", "l2", "l3"}
	organismClassColumnsWithoutDefault = []string{"oc_id"}
	organismClassColumnsWithDefault    = []string{"tax_id", "l1", "l2", "l3"}
	organismClassPrimaryKeyColumns     = []string{"oc_id"}
	organismClassGeneratedColumns      = []string{}
)

type (
	// OrganismClassSlice is an alias for a slice of pointers to OrganismClass.
	// This should almost always be used instead of []OrganismClass.
	OrganismClassSlice []*OrganismClass
	// OrganismClassHook is the signature for custom OrganismClass hook methods
	OrganismClassHook func(context.Context, boil.ContextExecutor, *OrganismClass) error

	organismClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organismClassType                 = reflect.TypeOf(&OrganismClass{})
	organismClassMapping              = queries.MakeStructMapping(organismClassType)
	organismClassPrimaryKeyMapping, _ = queries.BindMapping(organismClassType, organismClassMapping, organismClassPrimaryKeyColumns)
	organismClassInsertCacheMut       sync.RWMutex
	organismClassInsertCache          = make(map[string]insertCache)
	organismClassUpdateCacheMut       sync.RWMutex
	organismClassUpdateCache          = make(map[string]updateCache)
	organismClassUpsertCacheMut       sync.RWMutex
	organismClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organismClassAfterSelectHooks []OrganismClassHook

var organismClassBeforeInsertHooks []OrganismClassHook
var organismClassAfterInsertHooks []OrganismClassHook

var organismClassBeforeUpdateHooks []OrganismClassHook
var organismClassAfterUpdateHooks []OrganismClassHook

var organismClassBeforeDeleteHooks []OrganismClassHook
var organismClassAfterDeleteHooks []OrganismClassHook

var organismClassBeforeUpsertHooks []OrganismClassHook
var organismClassAfterUpsertHooks []OrganismClassHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganismClass) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganismClass) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganismClass) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganismClass) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganismClass) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganismClass) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganismClass) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganismClass) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganismClass) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organismClassAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganismClassHook registers your hook function for all future operations.
func AddOrganismClassHook(hookPoint boil.HookPoint, organismClassHook OrganismClassHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organismClassAfterSelectHooks = append(organismClassAfterSelectHooks, organismClassHook)
	case boil.BeforeInsertHook:
		organismClassBeforeInsertHooks = append(organismClassBeforeInsertHooks, organismClassHook)
	case boil.AfterInsertHook:
		organismClassAfterInsertHooks = append(organismClassAfterInsertHooks, organismClassHook)
	case boil.BeforeUpdateHook:
		organismClassBeforeUpdateHooks = append(organismClassBeforeUpdateHooks, organismClassHook)
	case boil.AfterUpdateHook:
		organismClassAfterUpdateHooks = append(organismClassAfterUpdateHooks, organismClassHook)
	case boil.BeforeDeleteHook:
		organismClassBeforeDeleteHooks = append(organismClassBeforeDeleteHooks, organismClassHook)
	case boil.AfterDeleteHook:
		organismClassAfterDeleteHooks = append(organismClassAfterDeleteHooks, organismClassHook)
	case boil.BeforeUpsertHook:
		organismClassBeforeUpsertHooks = append(organismClassBeforeUpsertHooks, organismClassHook)
	case boil.AfterUpsertHook:
		organismClassAfterUpsertHooks = append(organismClassAfterUpsertHooks, organismClassHook)
	}
}

// One returns a single organismClass record from the query.
func (q organismClassQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganismClass, error) {
	o := &OrganismClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organism_class")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganismClass records from the query.
func (q organismClassQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganismClassSlice, error) {
	var o []*OrganismClass

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganismClass slice")
	}

	if len(organismClassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganismClass records in the query.
func (q organismClassQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organism_class rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organismClassQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organism_class exists")
	}

	return count > 0, nil
}

// OrganismClasses retrieves all the records using an executor.
func OrganismClasses(mods ...qm.QueryMod) organismClassQuery {
	mods = append(mods, qm.From("\"organism_class\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"organism_class\".*"})
	}

	return organismClassQuery{q}
}

// FindOrganismClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganismClass(ctx context.Context, exec boil.ContextExecutor, ocID int64, selectCols ...string) (*OrganismClass, error) {
	organismClassObj := &OrganismClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organism_class\" where \"oc_id\"=?", sel,
	)

	q := queries.Raw(query, ocID)

	err := q.Bind(ctx, exec, organismClassObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organism_class")
	}

	if err = organismClassObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organismClassObj, err
	}

	return organismClassObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganismClass) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organism_class provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organismClassColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organismClassInsertCacheMut.RLock()
	cache, cached := organismClassInsertCache[key]
	organismClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organismClassAllColumns,
			organismClassColumnsWithDefault,
			organismClassColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organismClassType, organismClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organismClassType, organismClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organism_class\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organism_class\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organism_class")
	}

	if !cached {
		organismClassInsertCacheMut.Lock()
		organismClassInsertCache[key] = cache
		organismClassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganismClass.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganismClass) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organismClassUpdateCacheMut.RLock()
	cache, cached := organismClassUpdateCache[key]
	organismClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organismClassAllColumns,
			organismClassPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organism_class, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organism_class\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, organismClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organismClassType, organismClassMapping, append(wl, organismClassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organism_class row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organism_class")
	}

	if !cached {
		organismClassUpdateCacheMut.Lock()
		organismClassUpdateCache[key] = cache
		organismClassUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organismClassQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organism_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organism_class")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganismClassSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organismClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organism_class\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organismClassPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organismClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organismClass")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganismClass) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organism_class provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organismClassColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organismClassUpsertCacheMut.RLock()
	cache, cached := organismClassUpsertCache[key]
	organismClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organismClassAllColumns,
			organismClassColumnsWithDefault,
			organismClassColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organismClassAllColumns,
			organismClassPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organism_class, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organismClassPrimaryKeyColumns))
			copy(conflict, organismClassPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"organism_class\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organismClassType, organismClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organismClassType, organismClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organism_class")
	}

	if !cached {
		organismClassUpsertCacheMut.Lock()
		organismClassUpsertCache[key] = cache
		organismClassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganismClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganismClass) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganismClass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organismClassPrimaryKeyMapping)
	sql := "DELETE FROM \"organism_class\" WHERE \"oc_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organism_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organism_class")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organismClassQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organismClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organism_class")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organism_class")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganismClassSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organismClassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organismClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organism_class\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organismClassPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organismClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organism_class")
	}

	if len(organismClassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganismClass) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganismClass(ctx, exec, o.OcID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganismClassSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganismClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organismClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organism_class\".* FROM \"organism_class\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organismClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganismClassSlice")
	}

	*o = slice

	return nil
}

// OrganismClassExists checks if the OrganismClass row exists.
func OrganismClassExists(ctx context.Context, exec boil.ContextExecutor, ocID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organism_class\" where \"oc_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ocID)
	}
	row := exec.QueryRowContext(ctx, sql, ocID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organism_class exists")
	}

	return exists, nil
}
