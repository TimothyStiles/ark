// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReactivePart is an object representing the database table.
type ReactivePart struct {
	ID        null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Accession null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	HTMLName  null.String `boil:"html_name" json:"html_name,omitempty" toml:"html_name" yaml:"html_name,omitempty"`
	Compound  string      `boil:"compound" json:"compound" toml:"compound" yaml:"compound"`

	R *reactivePartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactivePartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactivePartColumns = struct {
	ID        string
	Accession string
	Name      string
	HTMLName  string
	Compound  string
}{
	ID:        "id",
	Accession: "accession",
	Name:      "name",
	HTMLName:  "html_name",
	Compound:  "compound",
}

var ReactivePartTableColumns = struct {
	ID        string
	Accession string
	Name      string
	HTMLName  string
	Compound  string
}{
	ID:        "reactive_part.id",
	Accession: "reactive_part.accession",
	Name:      "reactive_part.name",
	HTMLName:  "reactive_part.html_name",
	Compound:  "reactive_part.compound",
}

// Generated where

var ReactivePartWhere = struct {
	ID        whereHelpernull_Int64
	Accession whereHelpernull_String
	Name      whereHelpernull_String
	HTMLName  whereHelpernull_String
	Compound  whereHelperstring
}{
	ID:        whereHelpernull_Int64{field: "\"reactive_part\".\"id\""},
	Accession: whereHelpernull_String{field: "\"reactive_part\".\"accession\""},
	Name:      whereHelpernull_String{field: "\"reactive_part\".\"name\""},
	HTMLName:  whereHelpernull_String{field: "\"reactive_part\".\"html_name\""},
	Compound:  whereHelperstring{field: "\"reactive_part\".\"compound\""},
}

// ReactivePartRels is where relationship names are stored.
var ReactivePartRels = struct {
	ReactivePartCompound string
}{
	ReactivePartCompound: "ReactivePartCompound",
}

// reactivePartR is where relationships are stored.
type reactivePartR struct {
	ReactivePartCompound *Compound `boil:"ReactivePartCompound" json:"ReactivePartCompound" toml:"ReactivePartCompound" yaml:"ReactivePartCompound"`
}

// NewStruct creates a new relationship struct
func (*reactivePartR) NewStruct() *reactivePartR {
	return &reactivePartR{}
}

func (r *reactivePartR) GetReactivePartCompound() *Compound {
	if r == nil {
		return nil
	}
	return r.ReactivePartCompound
}

// reactivePartL is where Load methods for each relationship are stored.
type reactivePartL struct{}

var (
	reactivePartAllColumns            = []string{"id", "accession", "name", "html_name", "compound"}
	reactivePartColumnsWithoutDefault = []string{"compound"}
	reactivePartColumnsWithDefault    = []string{"id", "accession", "name", "html_name"}
	reactivePartPrimaryKeyColumns     = []string{"accession"}
	reactivePartGeneratedColumns      = []string{}
)

type (
	// ReactivePartSlice is an alias for a slice of pointers to ReactivePart.
	// This should almost always be used instead of []ReactivePart.
	ReactivePartSlice []*ReactivePart
	// ReactivePartHook is the signature for custom ReactivePart hook methods
	ReactivePartHook func(context.Context, boil.ContextExecutor, *ReactivePart) error

	reactivePartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactivePartType                 = reflect.TypeOf(&ReactivePart{})
	reactivePartMapping              = queries.MakeStructMapping(reactivePartType)
	reactivePartPrimaryKeyMapping, _ = queries.BindMapping(reactivePartType, reactivePartMapping, reactivePartPrimaryKeyColumns)
	reactivePartInsertCacheMut       sync.RWMutex
	reactivePartInsertCache          = make(map[string]insertCache)
	reactivePartUpdateCacheMut       sync.RWMutex
	reactivePartUpdateCache          = make(map[string]updateCache)
	reactivePartUpsertCacheMut       sync.RWMutex
	reactivePartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactivePartAfterSelectHooks []ReactivePartHook

var reactivePartBeforeInsertHooks []ReactivePartHook
var reactivePartAfterInsertHooks []ReactivePartHook

var reactivePartBeforeUpdateHooks []ReactivePartHook
var reactivePartAfterUpdateHooks []ReactivePartHook

var reactivePartBeforeDeleteHooks []ReactivePartHook
var reactivePartAfterDeleteHooks []ReactivePartHook

var reactivePartBeforeUpsertHooks []ReactivePartHook
var reactivePartAfterUpsertHooks []ReactivePartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReactivePart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReactivePart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReactivePart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReactivePart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReactivePart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReactivePart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReactivePart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReactivePart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReactivePart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactivePartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactivePartHook registers your hook function for all future operations.
func AddReactivePartHook(hookPoint boil.HookPoint, reactivePartHook ReactivePartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactivePartAfterSelectHooks = append(reactivePartAfterSelectHooks, reactivePartHook)
	case boil.BeforeInsertHook:
		reactivePartBeforeInsertHooks = append(reactivePartBeforeInsertHooks, reactivePartHook)
	case boil.AfterInsertHook:
		reactivePartAfterInsertHooks = append(reactivePartAfterInsertHooks, reactivePartHook)
	case boil.BeforeUpdateHook:
		reactivePartBeforeUpdateHooks = append(reactivePartBeforeUpdateHooks, reactivePartHook)
	case boil.AfterUpdateHook:
		reactivePartAfterUpdateHooks = append(reactivePartAfterUpdateHooks, reactivePartHook)
	case boil.BeforeDeleteHook:
		reactivePartBeforeDeleteHooks = append(reactivePartBeforeDeleteHooks, reactivePartHook)
	case boil.AfterDeleteHook:
		reactivePartAfterDeleteHooks = append(reactivePartAfterDeleteHooks, reactivePartHook)
	case boil.BeforeUpsertHook:
		reactivePartBeforeUpsertHooks = append(reactivePartBeforeUpsertHooks, reactivePartHook)
	case boil.AfterUpsertHook:
		reactivePartAfterUpsertHooks = append(reactivePartAfterUpsertHooks, reactivePartHook)
	}
}

// One returns a single reactivePart record from the query.
func (q reactivePartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReactivePart, error) {
	o := &ReactivePart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reactive_part")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReactivePart records from the query.
func (q reactivePartQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactivePartSlice, error) {
	var o []*ReactivePart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReactivePart slice")
	}

	if len(reactivePartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReactivePart records in the query.
func (q reactivePartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reactive_part rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reactivePartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reactive_part exists")
	}

	return count > 0, nil
}

// ReactivePartCompound pointed to by the foreign key.
func (o *ReactivePart) ReactivePartCompound(mods ...qm.QueryMod) compoundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accession\" = ?", o.Compound),
	}

	queryMods = append(queryMods, mods...)

	return Compounds(queryMods...)
}

// LoadReactivePartCompound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactivePartL) LoadReactivePartCompound(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReactivePart interface{}, mods queries.Applicator) error {
	var slice []*ReactivePart
	var object *ReactivePart

	if singular {
		object = maybeReactivePart.(*ReactivePart)
	} else {
		slice = *maybeReactivePart.(*[]*ReactivePart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reactivePartR{}
		}
		if !queries.IsNil(object.Compound) {
			args = append(args, object.Compound)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactivePartR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Compound) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Compound) {
				args = append(args, obj.Compound)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound`),
		qm.WhereIn(`compound.accession in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Compound")
	}

	var resultSlice []*Compound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Compound")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound")
	}

	if len(reactivePartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReactivePartCompound = foreign
		if foreign.R == nil {
			foreign.R = &compoundR{}
		}
		foreign.R.ReactiveParts = append(foreign.R.ReactiveParts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Compound, foreign.Accession) {
				local.R.ReactivePartCompound = foreign
				if foreign.R == nil {
					foreign.R = &compoundR{}
				}
				foreign.R.ReactiveParts = append(foreign.R.ReactiveParts, local)
				break
			}
		}
	}

	return nil
}

// SetReactivePartCompound of the reactivePart to the related item.
// Sets o.R.ReactivePartCompound to related.
// Adds o to related.R.ReactiveParts.
func (o *ReactivePart) SetReactivePartCompound(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Compound) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactive_part\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"compound"}),
		strmangle.WhereClause("\"", "\"", 0, reactivePartPrimaryKeyColumns),
	)
	values := []interface{}{related.Accession, o.Accession}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Compound, related.Accession)
	if o.R == nil {
		o.R = &reactivePartR{
			ReactivePartCompound: related,
		}
	} else {
		o.R.ReactivePartCompound = related
	}

	if related.R == nil {
		related.R = &compoundR{
			ReactiveParts: ReactivePartSlice{o},
		}
	} else {
		related.R.ReactiveParts = append(related.R.ReactiveParts, o)
	}

	return nil
}

// ReactiveParts retrieves all the records using an executor.
func ReactiveParts(mods ...qm.QueryMod) reactivePartQuery {
	mods = append(mods, qm.From("\"reactive_part\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reactive_part\".*"})
	}

	return reactivePartQuery{q}
}

// FindReactivePart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReactivePart(ctx context.Context, exec boil.ContextExecutor, accession null.String, selectCols ...string) (*ReactivePart, error) {
	reactivePartObj := &ReactivePart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reactive_part\" where \"accession\"=?", sel,
	)

	q := queries.Raw(query, accession)

	err := q.Bind(ctx, exec, reactivePartObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reactive_part")
	}

	if err = reactivePartObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactivePartObj, err
	}

	return reactivePartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReactivePart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactive_part provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactivePartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactivePartInsertCacheMut.RLock()
	cache, cached := reactivePartInsertCache[key]
	reactivePartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactivePartAllColumns,
			reactivePartColumnsWithDefault,
			reactivePartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactivePartType, reactivePartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactivePartType, reactivePartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reactive_part\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reactive_part\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reactive_part")
	}

	if !cached {
		reactivePartInsertCacheMut.Lock()
		reactivePartInsertCache[key] = cache
		reactivePartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReactivePart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReactivePart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactivePartUpdateCacheMut.RLock()
	cache, cached := reactivePartUpdateCache[key]
	reactivePartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactivePartAllColumns,
			reactivePartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reactive_part, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reactive_part\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, reactivePartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactivePartType, reactivePartMapping, append(wl, reactivePartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reactive_part row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reactive_part")
	}

	if !cached {
		reactivePartUpdateCacheMut.Lock()
		reactivePartUpdateCache[key] = cache
		reactivePartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reactivePartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reactive_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reactive_part")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactivePartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactivePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reactive_part\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactivePartPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reactivePart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reactivePart")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReactivePart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactive_part provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactivePartColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactivePartUpsertCacheMut.RLock()
	cache, cached := reactivePartUpsertCache[key]
	reactivePartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reactivePartAllColumns,
			reactivePartColumnsWithDefault,
			reactivePartColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reactivePartAllColumns,
			reactivePartPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reactive_part, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reactivePartPrimaryKeyColumns))
			copy(conflict, reactivePartPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"reactive_part\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reactivePartType, reactivePartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactivePartType, reactivePartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reactive_part")
	}

	if !cached {
		reactivePartUpsertCacheMut.Lock()
		reactivePartUpsertCache[key] = cache
		reactivePartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReactivePart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReactivePart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReactivePart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactivePartPrimaryKeyMapping)
	sql := "DELETE FROM \"reactive_part\" WHERE \"accession\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reactive_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reactive_part")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reactivePartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactivePartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactive_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactive_part")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactivePartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactivePartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactivePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reactive_part\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactivePartPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactivePart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactive_part")
	}

	if len(reactivePartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReactivePart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReactivePart(ctx, exec, o.Accession)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactivePartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactivePartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactivePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reactive_part\".* FROM \"reactive_part\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reactivePartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactivePartSlice")
	}

	*o = slice

	return nil
}

// ReactivePartExists checks if the ReactivePart row exists.
func ReactivePartExists(ctx context.Context, exec boil.ContextExecutor, accession null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reactive_part\" where \"accession\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accession)
	}
	row := exec.QueryRowContext(ctx, sql, accession)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reactive_part exists")
	}

	return exists, nil
}
