// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Formulation is an object representing the database table.
type Formulation struct {
	ProductID     string      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Ingredient    null.String `boil:"ingredient" json:"ingredient,omitempty" toml:"ingredient" yaml:"ingredient,omitempty"`
	Strength      null.String `boil:"strength" json:"strength,omitempty" toml:"strength" yaml:"strength,omitempty"`
	RecordID      int64       `boil:"record_id" json:"record_id" toml:"record_id" yaml:"record_id"`
	Molregno      null.Int64  `boil:"molregno" json:"molregno,omitempty" toml:"molregno" yaml:"molregno,omitempty"`
	FormulationID int64       `boil:"formulation_id" json:"formulation_id" toml:"formulation_id" yaml:"formulation_id"`

	R *formulationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L formulationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FormulationColumns = struct {
	ProductID     string
	Ingredient    string
	Strength      string
	RecordID      string
	Molregno      string
	FormulationID string
}{
	ProductID:     "product_id",
	Ingredient:    "ingredient",
	Strength:      "strength",
	RecordID:      "record_id",
	Molregno:      "molregno",
	FormulationID: "formulation_id",
}

var FormulationTableColumns = struct {
	ProductID     string
	Ingredient    string
	Strength      string
	RecordID      string
	Molregno      string
	FormulationID string
}{
	ProductID:     "formulations.product_id",
	Ingredient:    "formulations.ingredient",
	Strength:      "formulations.strength",
	RecordID:      "formulations.record_id",
	Molregno:      "formulations.molregno",
	FormulationID: "formulations.formulation_id",
}

// Generated where

var FormulationWhere = struct {
	ProductID     whereHelperstring
	Ingredient    whereHelpernull_String
	Strength      whereHelpernull_String
	RecordID      whereHelperint64
	Molregno      whereHelpernull_Int64
	FormulationID whereHelperint64
}{
	ProductID:     whereHelperstring{field: "\"formulations\".\"product_id\""},
	Ingredient:    whereHelpernull_String{field: "\"formulations\".\"ingredient\""},
	Strength:      whereHelpernull_String{field: "\"formulations\".\"strength\""},
	RecordID:      whereHelperint64{field: "\"formulations\".\"record_id\""},
	Molregno:      whereHelpernull_Int64{field: "\"formulations\".\"molregno\""},
	FormulationID: whereHelperint64{field: "\"formulations\".\"formulation_id\""},
}

// FormulationRels is where relationship names are stored.
var FormulationRels = struct {
	Record                     string
	Product                    string
	MolregnoMoleculeDictionary string
}{
	Record:                     "Record",
	Product:                    "Product",
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
}

// formulationR is where relationships are stored.
type formulationR struct {
	Record                     *CompoundRecord     `boil:"Record" json:"Record" toml:"Record" yaml:"Record"`
	Product                    *Product            `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
}

// NewStruct creates a new relationship struct
func (*formulationR) NewStruct() *formulationR {
	return &formulationR{}
}

func (r *formulationR) GetRecord() *CompoundRecord {
	if r == nil {
		return nil
	}
	return r.Record
}

func (r *formulationR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *formulationR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

// formulationL is where Load methods for each relationship are stored.
type formulationL struct{}

var (
	formulationAllColumns            = []string{"product_id", "ingredient", "strength", "record_id", "molregno", "formulation_id"}
	formulationColumnsWithoutDefault = []string{"product_id", "record_id", "formulation_id"}
	formulationColumnsWithDefault    = []string{"ingredient", "strength", "molregno"}
	formulationPrimaryKeyColumns     = []string{"formulation_id"}
	formulationGeneratedColumns      = []string{}
)

type (
	// FormulationSlice is an alias for a slice of pointers to Formulation.
	// This should almost always be used instead of []Formulation.
	FormulationSlice []*Formulation
	// FormulationHook is the signature for custom Formulation hook methods
	FormulationHook func(context.Context, boil.ContextExecutor, *Formulation) error

	formulationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	formulationType                 = reflect.TypeOf(&Formulation{})
	formulationMapping              = queries.MakeStructMapping(formulationType)
	formulationPrimaryKeyMapping, _ = queries.BindMapping(formulationType, formulationMapping, formulationPrimaryKeyColumns)
	formulationInsertCacheMut       sync.RWMutex
	formulationInsertCache          = make(map[string]insertCache)
	formulationUpdateCacheMut       sync.RWMutex
	formulationUpdateCache          = make(map[string]updateCache)
	formulationUpsertCacheMut       sync.RWMutex
	formulationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var formulationAfterSelectHooks []FormulationHook

var formulationBeforeInsertHooks []FormulationHook
var formulationAfterInsertHooks []FormulationHook

var formulationBeforeUpdateHooks []FormulationHook
var formulationAfterUpdateHooks []FormulationHook

var formulationBeforeDeleteHooks []FormulationHook
var formulationAfterDeleteHooks []FormulationHook

var formulationBeforeUpsertHooks []FormulationHook
var formulationAfterUpsertHooks []FormulationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Formulation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Formulation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Formulation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Formulation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Formulation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Formulation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Formulation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Formulation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Formulation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formulationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFormulationHook registers your hook function for all future operations.
func AddFormulationHook(hookPoint boil.HookPoint, formulationHook FormulationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		formulationAfterSelectHooks = append(formulationAfterSelectHooks, formulationHook)
	case boil.BeforeInsertHook:
		formulationBeforeInsertHooks = append(formulationBeforeInsertHooks, formulationHook)
	case boil.AfterInsertHook:
		formulationAfterInsertHooks = append(formulationAfterInsertHooks, formulationHook)
	case boil.BeforeUpdateHook:
		formulationBeforeUpdateHooks = append(formulationBeforeUpdateHooks, formulationHook)
	case boil.AfterUpdateHook:
		formulationAfterUpdateHooks = append(formulationAfterUpdateHooks, formulationHook)
	case boil.BeforeDeleteHook:
		formulationBeforeDeleteHooks = append(formulationBeforeDeleteHooks, formulationHook)
	case boil.AfterDeleteHook:
		formulationAfterDeleteHooks = append(formulationAfterDeleteHooks, formulationHook)
	case boil.BeforeUpsertHook:
		formulationBeforeUpsertHooks = append(formulationBeforeUpsertHooks, formulationHook)
	case boil.AfterUpsertHook:
		formulationAfterUpsertHooks = append(formulationAfterUpsertHooks, formulationHook)
	}
}

// One returns a single formulation record from the query.
func (q formulationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Formulation, error) {
	o := &Formulation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for formulations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Formulation records from the query.
func (q formulationQuery) All(ctx context.Context, exec boil.ContextExecutor) (FormulationSlice, error) {
	var o []*Formulation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Formulation slice")
	}

	if len(formulationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Formulation records in the query.
func (q formulationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count formulations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q formulationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if formulations exists")
	}

	return count > 0, nil
}

// Record pointed to by the foreign key.
func (o *Formulation) Record(mods ...qm.QueryMod) compoundRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"record_id\" = ?", o.RecordID),
	}

	queryMods = append(queryMods, mods...)

	return CompoundRecords(queryMods...)
}

// Product pointed to by the foreign key.
func (o *Formulation) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *Formulation) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (formulationL) LoadRecord(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFormulation interface{}, mods queries.Applicator) error {
	var slice []*Formulation
	var object *Formulation

	if singular {
		object = maybeFormulation.(*Formulation)
	} else {
		slice = *maybeFormulation.(*[]*Formulation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &formulationR{}
		}
		args = append(args, object.RecordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &formulationR{}
			}

			for _, a := range args {
				if a == obj.RecordID {
					continue Outer
				}
			}

			args = append(args, obj.RecordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`compound_records`),
		qm.WhereIn(`compound_records.record_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompoundRecord")
	}

	var resultSlice []*CompoundRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompoundRecord")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for compound_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for compound_records")
	}

	if len(formulationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Record = foreign
		if foreign.R == nil {
			foreign.R = &compoundRecordR{}
		}
		foreign.R.RecordFormulations = append(foreign.R.RecordFormulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecordID == foreign.RecordID {
				local.R.Record = foreign
				if foreign.R == nil {
					foreign.R = &compoundRecordR{}
				}
				foreign.R.RecordFormulations = append(foreign.R.RecordFormulations, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (formulationL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFormulation interface{}, mods queries.Applicator) error {
	var slice []*Formulation
	var object *Formulation

	if singular {
		object = maybeFormulation.(*Formulation)
	} else {
		slice = *maybeFormulation.(*[]*Formulation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &formulationR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &formulationR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(formulationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.Formulations = append(foreign.R.Formulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Formulations = append(foreign.R.Formulations, local)
				break
			}
		}
	}

	return nil
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (formulationL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFormulation interface{}, mods queries.Applicator) error {
	var slice []*Formulation
	var object *Formulation

	if singular {
		object = maybeFormulation.(*Formulation)
	} else {
		slice = *maybeFormulation.(*[]*Formulation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &formulationR{}
		}
		if !queries.IsNil(object.Molregno) {
			args = append(args, object.Molregno)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &formulationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Molregno) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Molregno) {
				args = append(args, obj.Molregno)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(formulationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoFormulations = append(foreign.R.MolregnoFormulations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Molregno, foreign.Molregno) {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoFormulations = append(foreign.R.MolregnoFormulations, local)
				break
			}
		}
	}

	return nil
}

// SetRecord of the formulation to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.RecordFormulations.
func (o *Formulation) SetRecord(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompoundRecord) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"formulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"record_id"}),
		strmangle.WhereClause("\"", "\"", 0, formulationPrimaryKeyColumns),
	)
	values := []interface{}{related.RecordID, o.FormulationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecordID = related.RecordID
	if o.R == nil {
		o.R = &formulationR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &compoundRecordR{
			RecordFormulations: FormulationSlice{o},
		}
	} else {
		related.R.RecordFormulations = append(related.R.RecordFormulations, o)
	}

	return nil
}

// SetProduct of the formulation to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.Formulations.
func (o *Formulation) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"formulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 0, formulationPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.FormulationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &formulationR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			Formulations: FormulationSlice{o},
		}
	} else {
		related.R.Formulations = append(related.R.Formulations, o)
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the formulation to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoFormulations.
func (o *Formulation) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"formulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, formulationPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.FormulationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Molregno, related.Molregno)
	if o.R == nil {
		o.R = &formulationR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoFormulations: FormulationSlice{o},
		}
	} else {
		related.R.MolregnoFormulations = append(related.R.MolregnoFormulations, o)
	}

	return nil
}

// RemoveMolregnoMoleculeDictionary relationship.
// Sets o.R.MolregnoMoleculeDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Formulation) RemoveMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, related *MoleculeDictionary) error {
	var err error

	queries.SetScanner(&o.Molregno, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("molregno")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MolregnoMoleculeDictionary = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MolregnoFormulations {
		if queries.Equal(o.Molregno, ri.Molregno) {
			continue
		}

		ln := len(related.R.MolregnoFormulations)
		if ln > 1 && i < ln-1 {
			related.R.MolregnoFormulations[i] = related.R.MolregnoFormulations[ln-1]
		}
		related.R.MolregnoFormulations = related.R.MolregnoFormulations[:ln-1]
		break
	}
	return nil
}

// Formulations retrieves all the records using an executor.
func Formulations(mods ...qm.QueryMod) formulationQuery {
	mods = append(mods, qm.From("\"formulations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"formulations\".*"})
	}

	return formulationQuery{q}
}

// FindFormulation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFormulation(ctx context.Context, exec boil.ContextExecutor, formulationID int64, selectCols ...string) (*Formulation, error) {
	formulationObj := &Formulation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"formulations\" where \"formulation_id\"=?", sel,
	)

	q := queries.Raw(query, formulationID)

	err := q.Bind(ctx, exec, formulationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from formulations")
	}

	if err = formulationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return formulationObj, err
	}

	return formulationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Formulation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no formulations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formulationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	formulationInsertCacheMut.RLock()
	cache, cached := formulationInsertCache[key]
	formulationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			formulationAllColumns,
			formulationColumnsWithDefault,
			formulationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(formulationType, formulationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(formulationType, formulationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"formulations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"formulations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into formulations")
	}

	if !cached {
		formulationInsertCacheMut.Lock()
		formulationInsertCache[key] = cache
		formulationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Formulation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Formulation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	formulationUpdateCacheMut.RLock()
	cache, cached := formulationUpdateCache[key]
	formulationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			formulationAllColumns,
			formulationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update formulations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"formulations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, formulationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(formulationType, formulationMapping, append(wl, formulationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update formulations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for formulations")
	}

	if !cached {
		formulationUpdateCacheMut.Lock()
		formulationUpdateCache[key] = cache
		formulationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q formulationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for formulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for formulations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FormulationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"formulations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formulationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in formulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all formulation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Formulation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no formulations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formulationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	formulationUpsertCacheMut.RLock()
	cache, cached := formulationUpsertCache[key]
	formulationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			formulationAllColumns,
			formulationColumnsWithDefault,
			formulationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			formulationAllColumns,
			formulationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert formulations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(formulationPrimaryKeyColumns))
			copy(conflict, formulationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"formulations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(formulationType, formulationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(formulationType, formulationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert formulations")
	}

	if !cached {
		formulationUpsertCacheMut.Lock()
		formulationUpsertCache[key] = cache
		formulationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Formulation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Formulation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Formulation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), formulationPrimaryKeyMapping)
	sql := "DELETE FROM \"formulations\" WHERE \"formulation_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from formulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for formulations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q formulationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no formulationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from formulations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for formulations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FormulationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(formulationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"formulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formulationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from formulation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for formulations")
	}

	if len(formulationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Formulation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFormulation(ctx, exec, o.FormulationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FormulationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FormulationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formulationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"formulations\".* FROM \"formulations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, formulationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FormulationSlice")
	}

	*o = slice

	return nil
}

// FormulationExists checks if the Formulation row exists.
func FormulationExists(ctx context.Context, exec boil.ContextExecutor, formulationID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"formulations\" where \"formulation_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, formulationID)
	}
	row := exec.QueryRowContext(ctx, sql, formulationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if formulations exists")
	}

	return exists, nil
}
