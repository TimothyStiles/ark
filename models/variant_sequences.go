// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VariantSequence is an object representing the database table.
type VariantSequence struct {
	VariantID int64       `boil:"variant_id" json:"variant_id" toml:"variant_id" yaml:"variant_id"`
	Mutation  null.String `boil:"mutation" json:"mutation,omitempty" toml:"mutation" yaml:"mutation,omitempty"`
	Accession null.String `boil:"accession" json:"accession,omitempty" toml:"accession" yaml:"accession,omitempty"`
	Version   null.Int64  `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Isoform   null.Int64  `boil:"isoform" json:"isoform,omitempty" toml:"isoform" yaml:"isoform,omitempty"`
	Sequence  null.String `boil:"sequence" json:"sequence,omitempty" toml:"sequence" yaml:"sequence,omitempty"`
	Organism  null.String `boil:"organism" json:"organism,omitempty" toml:"organism" yaml:"organism,omitempty"`
	TaxID     null.Int64  `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`

	R *variantSequenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L variantSequenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VariantSequenceColumns = struct {
	VariantID string
	Mutation  string
	Accession string
	Version   string
	Isoform   string
	Sequence  string
	Organism  string
	TaxID     string
}{
	VariantID: "variant_id",
	Mutation:  "mutation",
	Accession: "accession",
	Version:   "version",
	Isoform:   "isoform",
	Sequence:  "sequence",
	Organism:  "organism",
	TaxID:     "tax_id",
}

var VariantSequenceTableColumns = struct {
	VariantID string
	Mutation  string
	Accession string
	Version   string
	Isoform   string
	Sequence  string
	Organism  string
	TaxID     string
}{
	VariantID: "variant_sequences.variant_id",
	Mutation:  "variant_sequences.mutation",
	Accession: "variant_sequences.accession",
	Version:   "variant_sequences.version",
	Isoform:   "variant_sequences.isoform",
	Sequence:  "variant_sequences.sequence",
	Organism:  "variant_sequences.organism",
	TaxID:     "variant_sequences.tax_id",
}

// Generated where

var VariantSequenceWhere = struct {
	VariantID whereHelperint64
	Mutation  whereHelpernull_String
	Accession whereHelpernull_String
	Version   whereHelpernull_Int64
	Isoform   whereHelpernull_Int64
	Sequence  whereHelpernull_String
	Organism  whereHelpernull_String
	TaxID     whereHelpernull_Int64
}{
	VariantID: whereHelperint64{field: "\"variant_sequences\".\"variant_id\""},
	Mutation:  whereHelpernull_String{field: "\"variant_sequences\".\"mutation\""},
	Accession: whereHelpernull_String{field: "\"variant_sequences\".\"accession\""},
	Version:   whereHelpernull_Int64{field: "\"variant_sequences\".\"version\""},
	Isoform:   whereHelpernull_Int64{field: "\"variant_sequences\".\"isoform\""},
	Sequence:  whereHelpernull_String{field: "\"variant_sequences\".\"sequence\""},
	Organism:  whereHelpernull_String{field: "\"variant_sequences\".\"organism\""},
	TaxID:     whereHelpernull_Int64{field: "\"variant_sequences\".\"tax_id\""},
}

// VariantSequenceRels is where relationship names are stored.
var VariantSequenceRels = struct {
	VariantAssays         string
	VariantDrugMechanisms string
}{
	VariantAssays:         "VariantAssays",
	VariantDrugMechanisms: "VariantDrugMechanisms",
}

// variantSequenceR is where relationships are stored.
type variantSequenceR struct {
	VariantAssays         AssaySlice         `boil:"VariantAssays" json:"VariantAssays" toml:"VariantAssays" yaml:"VariantAssays"`
	VariantDrugMechanisms DrugMechanismSlice `boil:"VariantDrugMechanisms" json:"VariantDrugMechanisms" toml:"VariantDrugMechanisms" yaml:"VariantDrugMechanisms"`
}

// NewStruct creates a new relationship struct
func (*variantSequenceR) NewStruct() *variantSequenceR {
	return &variantSequenceR{}
}

func (r *variantSequenceR) GetVariantAssays() AssaySlice {
	if r == nil {
		return nil
	}
	return r.VariantAssays
}

func (r *variantSequenceR) GetVariantDrugMechanisms() DrugMechanismSlice {
	if r == nil {
		return nil
	}
	return r.VariantDrugMechanisms
}

// variantSequenceL is where Load methods for each relationship are stored.
type variantSequenceL struct{}

var (
	variantSequenceAllColumns            = []string{"variant_id", "mutation", "accession", "version", "isoform", "sequence", "organism", "tax_id"}
	variantSequenceColumnsWithoutDefault = []string{"variant_id"}
	variantSequenceColumnsWithDefault    = []string{"mutation", "accession", "version", "isoform", "sequence", "organism", "tax_id"}
	variantSequencePrimaryKeyColumns     = []string{"variant_id"}
	variantSequenceGeneratedColumns      = []string{}
)

type (
	// VariantSequenceSlice is an alias for a slice of pointers to VariantSequence.
	// This should almost always be used instead of []VariantSequence.
	VariantSequenceSlice []*VariantSequence
	// VariantSequenceHook is the signature for custom VariantSequence hook methods
	VariantSequenceHook func(context.Context, boil.ContextExecutor, *VariantSequence) error

	variantSequenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	variantSequenceType                 = reflect.TypeOf(&VariantSequence{})
	variantSequenceMapping              = queries.MakeStructMapping(variantSequenceType)
	variantSequencePrimaryKeyMapping, _ = queries.BindMapping(variantSequenceType, variantSequenceMapping, variantSequencePrimaryKeyColumns)
	variantSequenceInsertCacheMut       sync.RWMutex
	variantSequenceInsertCache          = make(map[string]insertCache)
	variantSequenceUpdateCacheMut       sync.RWMutex
	variantSequenceUpdateCache          = make(map[string]updateCache)
	variantSequenceUpsertCacheMut       sync.RWMutex
	variantSequenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var variantSequenceAfterSelectHooks []VariantSequenceHook

var variantSequenceBeforeInsertHooks []VariantSequenceHook
var variantSequenceAfterInsertHooks []VariantSequenceHook

var variantSequenceBeforeUpdateHooks []VariantSequenceHook
var variantSequenceAfterUpdateHooks []VariantSequenceHook

var variantSequenceBeforeDeleteHooks []VariantSequenceHook
var variantSequenceAfterDeleteHooks []VariantSequenceHook

var variantSequenceBeforeUpsertHooks []VariantSequenceHook
var variantSequenceAfterUpsertHooks []VariantSequenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VariantSequence) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VariantSequence) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VariantSequence) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VariantSequence) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VariantSequence) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VariantSequence) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VariantSequence) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VariantSequence) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VariantSequence) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantSequenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVariantSequenceHook registers your hook function for all future operations.
func AddVariantSequenceHook(hookPoint boil.HookPoint, variantSequenceHook VariantSequenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		variantSequenceAfterSelectHooks = append(variantSequenceAfterSelectHooks, variantSequenceHook)
	case boil.BeforeInsertHook:
		variantSequenceBeforeInsertHooks = append(variantSequenceBeforeInsertHooks, variantSequenceHook)
	case boil.AfterInsertHook:
		variantSequenceAfterInsertHooks = append(variantSequenceAfterInsertHooks, variantSequenceHook)
	case boil.BeforeUpdateHook:
		variantSequenceBeforeUpdateHooks = append(variantSequenceBeforeUpdateHooks, variantSequenceHook)
	case boil.AfterUpdateHook:
		variantSequenceAfterUpdateHooks = append(variantSequenceAfterUpdateHooks, variantSequenceHook)
	case boil.BeforeDeleteHook:
		variantSequenceBeforeDeleteHooks = append(variantSequenceBeforeDeleteHooks, variantSequenceHook)
	case boil.AfterDeleteHook:
		variantSequenceAfterDeleteHooks = append(variantSequenceAfterDeleteHooks, variantSequenceHook)
	case boil.BeforeUpsertHook:
		variantSequenceBeforeUpsertHooks = append(variantSequenceBeforeUpsertHooks, variantSequenceHook)
	case boil.AfterUpsertHook:
		variantSequenceAfterUpsertHooks = append(variantSequenceAfterUpsertHooks, variantSequenceHook)
	}
}

// One returns a single variantSequence record from the query.
func (q variantSequenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VariantSequence, error) {
	o := &VariantSequence{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for variant_sequences")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VariantSequence records from the query.
func (q variantSequenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (VariantSequenceSlice, error) {
	var o []*VariantSequence

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VariantSequence slice")
	}

	if len(variantSequenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VariantSequence records in the query.
func (q variantSequenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count variant_sequences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q variantSequenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if variant_sequences exists")
	}

	return count > 0, nil
}

// VariantAssays retrieves all the assay's Assays with an executor via variant_id column.
func (o *VariantSequence) VariantAssays(mods ...qm.QueryMod) assayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assays\".\"variant_id\"=?", o.VariantID),
	)

	return Assays(queryMods...)
}

// VariantDrugMechanisms retrieves all the drug_mechanism's DrugMechanisms with an executor via variant_id column.
func (o *VariantSequence) VariantDrugMechanisms(mods ...qm.QueryMod) drugMechanismQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"drug_mechanism\".\"variant_id\"=?", o.VariantID),
	)

	return DrugMechanisms(queryMods...)
}

// LoadVariantAssays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (variantSequenceL) LoadVariantAssays(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVariantSequence interface{}, mods queries.Applicator) error {
	var slice []*VariantSequence
	var object *VariantSequence

	if singular {
		object = maybeVariantSequence.(*VariantSequence)
	} else {
		slice = *maybeVariantSequence.(*[]*VariantSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &variantSequenceR{}
		}
		args = append(args, object.VariantID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantSequenceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VariantID) {
					continue Outer
				}
			}

			args = append(args, obj.VariantID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.variant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assays")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(assayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantAssays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assayR{}
			}
			foreign.R.Variant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.VariantID, foreign.VariantID) {
				local.R.VariantAssays = append(local.R.VariantAssays, foreign)
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.Variant = local
				break
			}
		}
	}

	return nil
}

// LoadVariantDrugMechanisms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (variantSequenceL) LoadVariantDrugMechanisms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVariantSequence interface{}, mods queries.Applicator) error {
	var slice []*VariantSequence
	var object *VariantSequence

	if singular {
		object = maybeVariantSequence.(*VariantSequence)
	} else {
		slice = *maybeVariantSequence.(*[]*VariantSequence)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &variantSequenceR{}
		}
		args = append(args, object.VariantID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantSequenceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VariantID) {
					continue Outer
				}
			}

			args = append(args, obj.VariantID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`drug_mechanism`),
		qm.WhereIn(`drug_mechanism.variant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load drug_mechanism")
	}

	var resultSlice []*DrugMechanism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice drug_mechanism")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on drug_mechanism")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drug_mechanism")
	}

	if len(drugMechanismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantDrugMechanisms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &drugMechanismR{}
			}
			foreign.R.Variant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.VariantID, foreign.VariantID) {
				local.R.VariantDrugMechanisms = append(local.R.VariantDrugMechanisms, foreign)
				if foreign.R == nil {
					foreign.R = &drugMechanismR{}
				}
				foreign.R.Variant = local
				break
			}
		}
	}

	return nil
}

// AddVariantAssays adds the given related objects to the existing relationships
// of the variant_sequence, optionally inserting them as new records.
// Appends related to o.R.VariantAssays.
// Sets related.R.Variant appropriately.
func (o *VariantSequence) AddVariantAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VariantID, o.VariantID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"variant_id"}),
				strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
			)
			values := []interface{}{o.VariantID, rel.AssayID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VariantID, o.VariantID)
		}
	}

	if o.R == nil {
		o.R = &variantSequenceR{
			VariantAssays: related,
		}
	} else {
		o.R.VariantAssays = append(o.R.VariantAssays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assayR{
				Variant: o,
			}
		} else {
			rel.R.Variant = o
		}
	}
	return nil
}

// SetVariantAssays removes all previously related items of the
// variant_sequence replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Variant's VariantAssays accordingly.
// Replaces o.R.VariantAssays with related.
// Sets related.R.Variant's VariantAssays accordingly.
func (o *VariantSequence) SetVariantAssays(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assay) error {
	query := "update \"assays\" set \"variant_id\" = null where \"variant_id\" = ?"
	values := []interface{}{o.VariantID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantAssays {
			queries.SetScanner(&rel.VariantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Variant = nil
		}
		o.R.VariantAssays = nil
	}

	return o.AddVariantAssays(ctx, exec, insert, related...)
}

// RemoveVariantAssays relationships from objects passed in.
// Removes related items from R.VariantAssays (uses pointer comparison, removal does not keep order)
// Sets related.R.Variant.
func (o *VariantSequence) RemoveVariantAssays(ctx context.Context, exec boil.ContextExecutor, related ...*Assay) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VariantID, nil)
		if rel.R != nil {
			rel.R.Variant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantAssays {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantAssays)
			if ln > 1 && i < ln-1 {
				o.R.VariantAssays[i] = o.R.VariantAssays[ln-1]
			}
			o.R.VariantAssays = o.R.VariantAssays[:ln-1]
			break
		}
	}

	return nil
}

// AddVariantDrugMechanisms adds the given related objects to the existing relationships
// of the variant_sequence, optionally inserting them as new records.
// Appends related to o.R.VariantDrugMechanisms.
// Sets related.R.Variant appropriately.
func (o *VariantSequence) AddVariantDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VariantID, o.VariantID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"drug_mechanism\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"variant_id"}),
				strmangle.WhereClause("\"", "\"", 0, drugMechanismPrimaryKeyColumns),
			)
			values := []interface{}{o.VariantID, rel.MecID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VariantID, o.VariantID)
		}
	}

	if o.R == nil {
		o.R = &variantSequenceR{
			VariantDrugMechanisms: related,
		}
	} else {
		o.R.VariantDrugMechanisms = append(o.R.VariantDrugMechanisms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &drugMechanismR{
				Variant: o,
			}
		} else {
			rel.R.Variant = o
		}
	}
	return nil
}

// SetVariantDrugMechanisms removes all previously related items of the
// variant_sequence replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Variant's VariantDrugMechanisms accordingly.
// Replaces o.R.VariantDrugMechanisms with related.
// Sets related.R.Variant's VariantDrugMechanisms accordingly.
func (o *VariantSequence) SetVariantDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DrugMechanism) error {
	query := "update \"drug_mechanism\" set \"variant_id\" = null where \"variant_id\" = ?"
	values := []interface{}{o.VariantID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantDrugMechanisms {
			queries.SetScanner(&rel.VariantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Variant = nil
		}
		o.R.VariantDrugMechanisms = nil
	}

	return o.AddVariantDrugMechanisms(ctx, exec, insert, related...)
}

// RemoveVariantDrugMechanisms relationships from objects passed in.
// Removes related items from R.VariantDrugMechanisms (uses pointer comparison, removal does not keep order)
// Sets related.R.Variant.
func (o *VariantSequence) RemoveVariantDrugMechanisms(ctx context.Context, exec boil.ContextExecutor, related ...*DrugMechanism) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VariantID, nil)
		if rel.R != nil {
			rel.R.Variant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantDrugMechanisms {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantDrugMechanisms)
			if ln > 1 && i < ln-1 {
				o.R.VariantDrugMechanisms[i] = o.R.VariantDrugMechanisms[ln-1]
			}
			o.R.VariantDrugMechanisms = o.R.VariantDrugMechanisms[:ln-1]
			break
		}
	}

	return nil
}

// VariantSequences retrieves all the records using an executor.
func VariantSequences(mods ...qm.QueryMod) variantSequenceQuery {
	mods = append(mods, qm.From("\"variant_sequences\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"variant_sequences\".*"})
	}

	return variantSequenceQuery{q}
}

// FindVariantSequence retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVariantSequence(ctx context.Context, exec boil.ContextExecutor, variantID int64, selectCols ...string) (*VariantSequence, error) {
	variantSequenceObj := &VariantSequence{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"variant_sequences\" where \"variant_id\"=?", sel,
	)

	q := queries.Raw(query, variantID)

	err := q.Bind(ctx, exec, variantSequenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from variant_sequences")
	}

	if err = variantSequenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return variantSequenceObj, err
	}

	return variantSequenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VariantSequence) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no variant_sequences provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variantSequenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	variantSequenceInsertCacheMut.RLock()
	cache, cached := variantSequenceInsertCache[key]
	variantSequenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			variantSequenceAllColumns,
			variantSequenceColumnsWithDefault,
			variantSequenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(variantSequenceType, variantSequenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(variantSequenceType, variantSequenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"variant_sequences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"variant_sequences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into variant_sequences")
	}

	if !cached {
		variantSequenceInsertCacheMut.Lock()
		variantSequenceInsertCache[key] = cache
		variantSequenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VariantSequence.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VariantSequence) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	variantSequenceUpdateCacheMut.RLock()
	cache, cached := variantSequenceUpdateCache[key]
	variantSequenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			variantSequenceAllColumns,
			variantSequencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update variant_sequences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"variant_sequences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, variantSequencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(variantSequenceType, variantSequenceMapping, append(wl, variantSequencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update variant_sequences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for variant_sequences")
	}

	if !cached {
		variantSequenceUpdateCacheMut.Lock()
		variantSequenceUpdateCache[key] = cache
		variantSequenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q variantSequenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for variant_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for variant_sequences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VariantSequenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"variant_sequences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variantSequencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in variantSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all variantSequence")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VariantSequence) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no variant_sequences provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variantSequenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	variantSequenceUpsertCacheMut.RLock()
	cache, cached := variantSequenceUpsertCache[key]
	variantSequenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			variantSequenceAllColumns,
			variantSequenceColumnsWithDefault,
			variantSequenceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			variantSequenceAllColumns,
			variantSequencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert variant_sequences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(variantSequencePrimaryKeyColumns))
			copy(conflict, variantSequencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"variant_sequences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(variantSequenceType, variantSequenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(variantSequenceType, variantSequenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert variant_sequences")
	}

	if !cached {
		variantSequenceUpsertCacheMut.Lock()
		variantSequenceUpsertCache[key] = cache
		variantSequenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VariantSequence record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VariantSequence) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VariantSequence provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), variantSequencePrimaryKeyMapping)
	sql := "DELETE FROM \"variant_sequences\" WHERE \"variant_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from variant_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for variant_sequences")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q variantSequenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no variantSequenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from variant_sequences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for variant_sequences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VariantSequenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(variantSequenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"variant_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variantSequencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from variantSequence slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for variant_sequences")
	}

	if len(variantSequenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VariantSequence) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVariantSequence(ctx, exec, o.VariantID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariantSequenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VariantSequenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantSequencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"variant_sequences\".* FROM \"variant_sequences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variantSequencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VariantSequenceSlice")
	}

	*o = slice

	return nil
}

// VariantSequenceExists checks if the VariantSequence row exists.
func VariantSequenceExists(ctx context.Context, exec boil.ContextExecutor, variantID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"variant_sequences\" where \"variant_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, variantID)
	}
	row := exec.QueryRowContext(ctx, sql, variantID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if variant_sequences exists")
	}

	return exists, nil
}
