// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FracClassification is an object representing the database table.
type FracClassification struct {
	FracClassID       int64       `boil:"frac_class_id" json:"frac_class_id" toml:"frac_class_id" yaml:"frac_class_id"`
	ActiveIngredient  string      `boil:"active_ingredient" json:"active_ingredient" toml:"active_ingredient" yaml:"active_ingredient"`
	Level1            string      `boil:"level1" json:"level1" toml:"level1" yaml:"level1"`
	Level1Description string      `boil:"level1_description" json:"level1_description" toml:"level1_description" yaml:"level1_description"`
	Level2            string      `boil:"level2" json:"level2" toml:"level2" yaml:"level2"`
	Level2Description null.String `boil:"level2_description" json:"level2_description,omitempty" toml:"level2_description" yaml:"level2_description,omitempty"`
	Level3            string      `boil:"level3" json:"level3" toml:"level3" yaml:"level3"`
	Level3Description null.String `boil:"level3_description" json:"level3_description,omitempty" toml:"level3_description" yaml:"level3_description,omitempty"`
	Level4            string      `boil:"level4" json:"level4" toml:"level4" yaml:"level4"`
	Level4Description null.String `boil:"level4_description" json:"level4_description,omitempty" toml:"level4_description" yaml:"level4_description,omitempty"`
	Level5            string      `boil:"level5" json:"level5" toml:"level5" yaml:"level5"`
	FracCode          string      `boil:"frac_code" json:"frac_code" toml:"frac_code" yaml:"frac_code"`

	R *fracClassificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fracClassificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FracClassificationColumns = struct {
	FracClassID       string
	ActiveIngredient  string
	Level1            string
	Level1Description string
	Level2            string
	Level2Description string
	Level3            string
	Level3Description string
	Level4            string
	Level4Description string
	Level5            string
	FracCode          string
}{
	FracClassID:       "frac_class_id",
	ActiveIngredient:  "active_ingredient",
	Level1:            "level1",
	Level1Description: "level1_description",
	Level2:            "level2",
	Level2Description: "level2_description",
	Level3:            "level3",
	Level3Description: "level3_description",
	Level4:            "level4",
	Level4Description: "level4_description",
	Level5:            "level5",
	FracCode:          "frac_code",
}

var FracClassificationTableColumns = struct {
	FracClassID       string
	ActiveIngredient  string
	Level1            string
	Level1Description string
	Level2            string
	Level2Description string
	Level3            string
	Level3Description string
	Level4            string
	Level4Description string
	Level5            string
	FracCode          string
}{
	FracClassID:       "frac_classification.frac_class_id",
	ActiveIngredient:  "frac_classification.active_ingredient",
	Level1:            "frac_classification.level1",
	Level1Description: "frac_classification.level1_description",
	Level2:            "frac_classification.level2",
	Level2Description: "frac_classification.level2_description",
	Level3:            "frac_classification.level3",
	Level3Description: "frac_classification.level3_description",
	Level4:            "frac_classification.level4",
	Level4Description: "frac_classification.level4_description",
	Level5:            "frac_classification.level5",
	FracCode:          "frac_classification.frac_code",
}

// Generated where

var FracClassificationWhere = struct {
	FracClassID       whereHelperint64
	ActiveIngredient  whereHelperstring
	Level1            whereHelperstring
	Level1Description whereHelperstring
	Level2            whereHelperstring
	Level2Description whereHelpernull_String
	Level3            whereHelperstring
	Level3Description whereHelpernull_String
	Level4            whereHelperstring
	Level4Description whereHelpernull_String
	Level5            whereHelperstring
	FracCode          whereHelperstring
}{
	FracClassID:       whereHelperint64{field: "\"frac_classification\".\"frac_class_id\""},
	ActiveIngredient:  whereHelperstring{field: "\"frac_classification\".\"active_ingredient\""},
	Level1:            whereHelperstring{field: "\"frac_classification\".\"level1\""},
	Level1Description: whereHelperstring{field: "\"frac_classification\".\"level1_description\""},
	Level2:            whereHelperstring{field: "\"frac_classification\".\"level2\""},
	Level2Description: whereHelpernull_String{field: "\"frac_classification\".\"level2_description\""},
	Level3:            whereHelperstring{field: "\"frac_classification\".\"level3\""},
	Level3Description: whereHelpernull_String{field: "\"frac_classification\".\"level3_description\""},
	Level4:            whereHelperstring{field: "\"frac_classification\".\"level4\""},
	Level4Description: whereHelpernull_String{field: "\"frac_classification\".\"level4_description\""},
	Level5:            whereHelperstring{field: "\"frac_classification\".\"level5\""},
	FracCode:          whereHelperstring{field: "\"frac_classification\".\"frac_code\""},
}

// FracClassificationRels is where relationship names are stored.
var FracClassificationRels = struct {
	FracClassMoleculeFracClassifications string
}{
	FracClassMoleculeFracClassifications: "FracClassMoleculeFracClassifications",
}

// fracClassificationR is where relationships are stored.
type fracClassificationR struct {
	FracClassMoleculeFracClassifications MoleculeFracClassificationSlice `boil:"FracClassMoleculeFracClassifications" json:"FracClassMoleculeFracClassifications" toml:"FracClassMoleculeFracClassifications" yaml:"FracClassMoleculeFracClassifications"`
}

// NewStruct creates a new relationship struct
func (*fracClassificationR) NewStruct() *fracClassificationR {
	return &fracClassificationR{}
}

func (r *fracClassificationR) GetFracClassMoleculeFracClassifications() MoleculeFracClassificationSlice {
	if r == nil {
		return nil
	}
	return r.FracClassMoleculeFracClassifications
}

// fracClassificationL is where Load methods for each relationship are stored.
type fracClassificationL struct{}

var (
	fracClassificationAllColumns            = []string{"frac_class_id", "active_ingredient", "level1", "level1_description", "level2", "level2_description", "level3", "level3_description", "level4", "level4_description", "level5", "frac_code"}
	fracClassificationColumnsWithoutDefault = []string{"frac_class_id", "active_ingredient", "level1", "level1_description", "level2", "level3", "level4", "level5", "frac_code"}
	fracClassificationColumnsWithDefault    = []string{"level2_description", "level3_description", "level4_description"}
	fracClassificationPrimaryKeyColumns     = []string{"frac_class_id"}
	fracClassificationGeneratedColumns      = []string{}
)

type (
	// FracClassificationSlice is an alias for a slice of pointers to FracClassification.
	// This should almost always be used instead of []FracClassification.
	FracClassificationSlice []*FracClassification
	// FracClassificationHook is the signature for custom FracClassification hook methods
	FracClassificationHook func(context.Context, boil.ContextExecutor, *FracClassification) error

	fracClassificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fracClassificationType                 = reflect.TypeOf(&FracClassification{})
	fracClassificationMapping              = queries.MakeStructMapping(fracClassificationType)
	fracClassificationPrimaryKeyMapping, _ = queries.BindMapping(fracClassificationType, fracClassificationMapping, fracClassificationPrimaryKeyColumns)
	fracClassificationInsertCacheMut       sync.RWMutex
	fracClassificationInsertCache          = make(map[string]insertCache)
	fracClassificationUpdateCacheMut       sync.RWMutex
	fracClassificationUpdateCache          = make(map[string]updateCache)
	fracClassificationUpsertCacheMut       sync.RWMutex
	fracClassificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fracClassificationAfterSelectHooks []FracClassificationHook

var fracClassificationBeforeInsertHooks []FracClassificationHook
var fracClassificationAfterInsertHooks []FracClassificationHook

var fracClassificationBeforeUpdateHooks []FracClassificationHook
var fracClassificationAfterUpdateHooks []FracClassificationHook

var fracClassificationBeforeDeleteHooks []FracClassificationHook
var fracClassificationAfterDeleteHooks []FracClassificationHook

var fracClassificationBeforeUpsertHooks []FracClassificationHook
var fracClassificationAfterUpsertHooks []FracClassificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FracClassification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FracClassification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FracClassification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FracClassification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FracClassification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FracClassification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FracClassification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FracClassification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FracClassification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fracClassificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFracClassificationHook registers your hook function for all future operations.
func AddFracClassificationHook(hookPoint boil.HookPoint, fracClassificationHook FracClassificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fracClassificationAfterSelectHooks = append(fracClassificationAfterSelectHooks, fracClassificationHook)
	case boil.BeforeInsertHook:
		fracClassificationBeforeInsertHooks = append(fracClassificationBeforeInsertHooks, fracClassificationHook)
	case boil.AfterInsertHook:
		fracClassificationAfterInsertHooks = append(fracClassificationAfterInsertHooks, fracClassificationHook)
	case boil.BeforeUpdateHook:
		fracClassificationBeforeUpdateHooks = append(fracClassificationBeforeUpdateHooks, fracClassificationHook)
	case boil.AfterUpdateHook:
		fracClassificationAfterUpdateHooks = append(fracClassificationAfterUpdateHooks, fracClassificationHook)
	case boil.BeforeDeleteHook:
		fracClassificationBeforeDeleteHooks = append(fracClassificationBeforeDeleteHooks, fracClassificationHook)
	case boil.AfterDeleteHook:
		fracClassificationAfterDeleteHooks = append(fracClassificationAfterDeleteHooks, fracClassificationHook)
	case boil.BeforeUpsertHook:
		fracClassificationBeforeUpsertHooks = append(fracClassificationBeforeUpsertHooks, fracClassificationHook)
	case boil.AfterUpsertHook:
		fracClassificationAfterUpsertHooks = append(fracClassificationAfterUpsertHooks, fracClassificationHook)
	}
}

// One returns a single fracClassification record from the query.
func (q fracClassificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FracClassification, error) {
	o := &FracClassification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for frac_classification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FracClassification records from the query.
func (q fracClassificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (FracClassificationSlice, error) {
	var o []*FracClassification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FracClassification slice")
	}

	if len(fracClassificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FracClassification records in the query.
func (q fracClassificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count frac_classification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fracClassificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if frac_classification exists")
	}

	return count > 0, nil
}

// FracClassMoleculeFracClassifications retrieves all the molecule_frac_classification's MoleculeFracClassifications with an executor via frac_class_id column.
func (o *FracClassification) FracClassMoleculeFracClassifications(mods ...qm.QueryMod) moleculeFracClassificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"molecule_frac_classification\".\"frac_class_id\"=?", o.FracClassID),
	)

	return MoleculeFracClassifications(queryMods...)
}

// LoadFracClassMoleculeFracClassifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fracClassificationL) LoadFracClassMoleculeFracClassifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFracClassification interface{}, mods queries.Applicator) error {
	var slice []*FracClassification
	var object *FracClassification

	if singular {
		object = maybeFracClassification.(*FracClassification)
	} else {
		slice = *maybeFracClassification.(*[]*FracClassification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fracClassificationR{}
		}
		args = append(args, object.FracClassID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fracClassificationR{}
			}

			for _, a := range args {
				if a == obj.FracClassID {
					continue Outer
				}
			}

			args = append(args, obj.FracClassID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_frac_classification`),
		qm.WhereIn(`molecule_frac_classification.frac_class_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load molecule_frac_classification")
	}

	var resultSlice []*MoleculeFracClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice molecule_frac_classification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on molecule_frac_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_frac_classification")
	}

	if len(moleculeFracClassificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FracClassMoleculeFracClassifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moleculeFracClassificationR{}
			}
			foreign.R.FracClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FracClassID == foreign.FracClassID {
				local.R.FracClassMoleculeFracClassifications = append(local.R.FracClassMoleculeFracClassifications, foreign)
				if foreign.R == nil {
					foreign.R = &moleculeFracClassificationR{}
				}
				foreign.R.FracClass = local
				break
			}
		}
	}

	return nil
}

// AddFracClassMoleculeFracClassifications adds the given related objects to the existing relationships
// of the frac_classification, optionally inserting them as new records.
// Appends related to o.R.FracClassMoleculeFracClassifications.
// Sets related.R.FracClass appropriately.
func (o *FracClassification) AddFracClassMoleculeFracClassifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MoleculeFracClassification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FracClassID = o.FracClassID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"molecule_frac_classification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"frac_class_id"}),
				strmangle.WhereClause("\"", "\"", 0, moleculeFracClassificationPrimaryKeyColumns),
			)
			values := []interface{}{o.FracClassID, rel.MolFracID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FracClassID = o.FracClassID
		}
	}

	if o.R == nil {
		o.R = &fracClassificationR{
			FracClassMoleculeFracClassifications: related,
		}
	} else {
		o.R.FracClassMoleculeFracClassifications = append(o.R.FracClassMoleculeFracClassifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moleculeFracClassificationR{
				FracClass: o,
			}
		} else {
			rel.R.FracClass = o
		}
	}
	return nil
}

// FracClassifications retrieves all the records using an executor.
func FracClassifications(mods ...qm.QueryMod) fracClassificationQuery {
	mods = append(mods, qm.From("\"frac_classification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"frac_classification\".*"})
	}

	return fracClassificationQuery{q}
}

// FindFracClassification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFracClassification(ctx context.Context, exec boil.ContextExecutor, fracClassID int64, selectCols ...string) (*FracClassification, error) {
	fracClassificationObj := &FracClassification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"frac_classification\" where \"frac_class_id\"=?", sel,
	)

	q := queries.Raw(query, fracClassID)

	err := q.Bind(ctx, exec, fracClassificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from frac_classification")
	}

	if err = fracClassificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fracClassificationObj, err
	}

	return fracClassificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FracClassification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no frac_classification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fracClassificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fracClassificationInsertCacheMut.RLock()
	cache, cached := fracClassificationInsertCache[key]
	fracClassificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fracClassificationAllColumns,
			fracClassificationColumnsWithDefault,
			fracClassificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fracClassificationType, fracClassificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fracClassificationType, fracClassificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"frac_classification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"frac_classification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into frac_classification")
	}

	if !cached {
		fracClassificationInsertCacheMut.Lock()
		fracClassificationInsertCache[key] = cache
		fracClassificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FracClassification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FracClassification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fracClassificationUpdateCacheMut.RLock()
	cache, cached := fracClassificationUpdateCache[key]
	fracClassificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fracClassificationAllColumns,
			fracClassificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update frac_classification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"frac_classification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, fracClassificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fracClassificationType, fracClassificationMapping, append(wl, fracClassificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update frac_classification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for frac_classification")
	}

	if !cached {
		fracClassificationUpdateCacheMut.Lock()
		fracClassificationUpdateCache[key] = cache
		fracClassificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fracClassificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for frac_classification")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FracClassificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"frac_classification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fracClassificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fracClassification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FracClassification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no frac_classification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fracClassificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fracClassificationUpsertCacheMut.RLock()
	cache, cached := fracClassificationUpsertCache[key]
	fracClassificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fracClassificationAllColumns,
			fracClassificationColumnsWithDefault,
			fracClassificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fracClassificationAllColumns,
			fracClassificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert frac_classification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fracClassificationPrimaryKeyColumns))
			copy(conflict, fracClassificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"frac_classification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fracClassificationType, fracClassificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fracClassificationType, fracClassificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert frac_classification")
	}

	if !cached {
		fracClassificationUpsertCacheMut.Lock()
		fracClassificationUpsertCache[key] = cache
		fracClassificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FracClassification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FracClassification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FracClassification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fracClassificationPrimaryKeyMapping)
	sql := "DELETE FROM \"frac_classification\" WHERE \"frac_class_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for frac_classification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fracClassificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fracClassificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from frac_classification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for frac_classification")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FracClassificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fracClassificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"frac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fracClassificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fracClassification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for frac_classification")
	}

	if len(fracClassificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FracClassification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFracClassification(ctx, exec, o.FracClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FracClassificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FracClassificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fracClassificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"frac_classification\".* FROM \"frac_classification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fracClassificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FracClassificationSlice")
	}

	*o = slice

	return nil
}

// FracClassificationExists checks if the FracClassification row exists.
func FracClassificationExists(ctx context.Context, exec boil.ContextExecutor, fracClassID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"frac_classification\" where \"frac_class_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fracClassID)
	}
	row := exec.QueryRowContext(ctx, sql, fracClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if frac_classification exists")
	}

	return exists, nil
}
