// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompoundStructuralAlert is an object representing the database table.
type CompoundStructuralAlert struct {
	CPDSTRAlertID int64 `boil:"cpd_str_alert_id" json:"cpd_str_alert_id" toml:"cpd_str_alert_id" yaml:"cpd_str_alert_id"`
	Molregno      int64 `boil:"molregno" json:"molregno" toml:"molregno" yaml:"molregno"`
	AlertID       int64 `boil:"alert_id" json:"alert_id" toml:"alert_id" yaml:"alert_id"`

	R *compoundStructuralAlertR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L compoundStructuralAlertL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompoundStructuralAlertColumns = struct {
	CPDSTRAlertID string
	Molregno      string
	AlertID       string
}{
	CPDSTRAlertID: "cpd_str_alert_id",
	Molregno:      "molregno",
	AlertID:       "alert_id",
}

var CompoundStructuralAlertTableColumns = struct {
	CPDSTRAlertID string
	Molregno      string
	AlertID       string
}{
	CPDSTRAlertID: "compound_structural_alerts.cpd_str_alert_id",
	Molregno:      "compound_structural_alerts.molregno",
	AlertID:       "compound_structural_alerts.alert_id",
}

// Generated where

var CompoundStructuralAlertWhere = struct {
	CPDSTRAlertID whereHelperint64
	Molregno      whereHelperint64
	AlertID       whereHelperint64
}{
	CPDSTRAlertID: whereHelperint64{field: "\"compound_structural_alerts\".\"cpd_str_alert_id\""},
	Molregno:      whereHelperint64{field: "\"compound_structural_alerts\".\"molregno\""},
	AlertID:       whereHelperint64{field: "\"compound_structural_alerts\".\"alert_id\""},
}

// CompoundStructuralAlertRels is where relationship names are stored.
var CompoundStructuralAlertRels = struct {
	MolregnoMoleculeDictionary string
	Alert                      string
}{
	MolregnoMoleculeDictionary: "MolregnoMoleculeDictionary",
	Alert:                      "Alert",
}

// compoundStructuralAlertR is where relationships are stored.
type compoundStructuralAlertR struct {
	MolregnoMoleculeDictionary *MoleculeDictionary `boil:"MolregnoMoleculeDictionary" json:"MolregnoMoleculeDictionary" toml:"MolregnoMoleculeDictionary" yaml:"MolregnoMoleculeDictionary"`
	Alert                      *StructuralAlert    `boil:"Alert" json:"Alert" toml:"Alert" yaml:"Alert"`
}

// NewStruct creates a new relationship struct
func (*compoundStructuralAlertR) NewStruct() *compoundStructuralAlertR {
	return &compoundStructuralAlertR{}
}

func (r *compoundStructuralAlertR) GetMolregnoMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.MolregnoMoleculeDictionary
}

func (r *compoundStructuralAlertR) GetAlert() *StructuralAlert {
	if r == nil {
		return nil
	}
	return r.Alert
}

// compoundStructuralAlertL is where Load methods for each relationship are stored.
type compoundStructuralAlertL struct{}

var (
	compoundStructuralAlertAllColumns            = []string{"cpd_str_alert_id", "molregno", "alert_id"}
	compoundStructuralAlertColumnsWithoutDefault = []string{"cpd_str_alert_id", "molregno", "alert_id"}
	compoundStructuralAlertColumnsWithDefault    = []string{}
	compoundStructuralAlertPrimaryKeyColumns     = []string{"cpd_str_alert_id"}
	compoundStructuralAlertGeneratedColumns      = []string{}
)

type (
	// CompoundStructuralAlertSlice is an alias for a slice of pointers to CompoundStructuralAlert.
	// This should almost always be used instead of []CompoundStructuralAlert.
	CompoundStructuralAlertSlice []*CompoundStructuralAlert
	// CompoundStructuralAlertHook is the signature for custom CompoundStructuralAlert hook methods
	CompoundStructuralAlertHook func(context.Context, boil.ContextExecutor, *CompoundStructuralAlert) error

	compoundStructuralAlertQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	compoundStructuralAlertType                 = reflect.TypeOf(&CompoundStructuralAlert{})
	compoundStructuralAlertMapping              = queries.MakeStructMapping(compoundStructuralAlertType)
	compoundStructuralAlertPrimaryKeyMapping, _ = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, compoundStructuralAlertPrimaryKeyColumns)
	compoundStructuralAlertInsertCacheMut       sync.RWMutex
	compoundStructuralAlertInsertCache          = make(map[string]insertCache)
	compoundStructuralAlertUpdateCacheMut       sync.RWMutex
	compoundStructuralAlertUpdateCache          = make(map[string]updateCache)
	compoundStructuralAlertUpsertCacheMut       sync.RWMutex
	compoundStructuralAlertUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var compoundStructuralAlertAfterSelectHooks []CompoundStructuralAlertHook

var compoundStructuralAlertBeforeInsertHooks []CompoundStructuralAlertHook
var compoundStructuralAlertAfterInsertHooks []CompoundStructuralAlertHook

var compoundStructuralAlertBeforeUpdateHooks []CompoundStructuralAlertHook
var compoundStructuralAlertAfterUpdateHooks []CompoundStructuralAlertHook

var compoundStructuralAlertBeforeDeleteHooks []CompoundStructuralAlertHook
var compoundStructuralAlertAfterDeleteHooks []CompoundStructuralAlertHook

var compoundStructuralAlertBeforeUpsertHooks []CompoundStructuralAlertHook
var compoundStructuralAlertAfterUpsertHooks []CompoundStructuralAlertHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompoundStructuralAlert) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompoundStructuralAlert) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompoundStructuralAlert) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompoundStructuralAlert) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompoundStructuralAlert) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompoundStructuralAlert) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompoundStructuralAlert) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompoundStructuralAlert) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompoundStructuralAlert) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range compoundStructuralAlertAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompoundStructuralAlertHook registers your hook function for all future operations.
func AddCompoundStructuralAlertHook(hookPoint boil.HookPoint, compoundStructuralAlertHook CompoundStructuralAlertHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		compoundStructuralAlertAfterSelectHooks = append(compoundStructuralAlertAfterSelectHooks, compoundStructuralAlertHook)
	case boil.BeforeInsertHook:
		compoundStructuralAlertBeforeInsertHooks = append(compoundStructuralAlertBeforeInsertHooks, compoundStructuralAlertHook)
	case boil.AfterInsertHook:
		compoundStructuralAlertAfterInsertHooks = append(compoundStructuralAlertAfterInsertHooks, compoundStructuralAlertHook)
	case boil.BeforeUpdateHook:
		compoundStructuralAlertBeforeUpdateHooks = append(compoundStructuralAlertBeforeUpdateHooks, compoundStructuralAlertHook)
	case boil.AfterUpdateHook:
		compoundStructuralAlertAfterUpdateHooks = append(compoundStructuralAlertAfterUpdateHooks, compoundStructuralAlertHook)
	case boil.BeforeDeleteHook:
		compoundStructuralAlertBeforeDeleteHooks = append(compoundStructuralAlertBeforeDeleteHooks, compoundStructuralAlertHook)
	case boil.AfterDeleteHook:
		compoundStructuralAlertAfterDeleteHooks = append(compoundStructuralAlertAfterDeleteHooks, compoundStructuralAlertHook)
	case boil.BeforeUpsertHook:
		compoundStructuralAlertBeforeUpsertHooks = append(compoundStructuralAlertBeforeUpsertHooks, compoundStructuralAlertHook)
	case boil.AfterUpsertHook:
		compoundStructuralAlertAfterUpsertHooks = append(compoundStructuralAlertAfterUpsertHooks, compoundStructuralAlertHook)
	}
}

// One returns a single compoundStructuralAlert record from the query.
func (q compoundStructuralAlertQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompoundStructuralAlert, error) {
	o := &CompoundStructuralAlert{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for compound_structural_alerts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompoundStructuralAlert records from the query.
func (q compoundStructuralAlertQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompoundStructuralAlertSlice, error) {
	var o []*CompoundStructuralAlert

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompoundStructuralAlert slice")
	}

	if len(compoundStructuralAlertAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompoundStructuralAlert records in the query.
func (q compoundStructuralAlertQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count compound_structural_alerts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q compoundStructuralAlertQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if compound_structural_alerts exists")
	}

	return count > 0, nil
}

// MolregnoMoleculeDictionary pointed to by the foreign key.
func (o *CompoundStructuralAlert) MolregnoMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"molregno\" = ?", o.Molregno),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// Alert pointed to by the foreign key.
func (o *CompoundStructuralAlert) Alert(mods ...qm.QueryMod) structuralAlertQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"alert_id\" = ?", o.AlertID),
	}

	queryMods = append(queryMods, mods...)

	return StructuralAlerts(queryMods...)
}

// LoadMolregnoMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundStructuralAlertL) LoadMolregnoMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundStructuralAlert interface{}, mods queries.Applicator) error {
	var slice []*CompoundStructuralAlert
	var object *CompoundStructuralAlert

	if singular {
		object = maybeCompoundStructuralAlert.(*CompoundStructuralAlert)
	} else {
		slice = *maybeCompoundStructuralAlert.(*[]*CompoundStructuralAlert)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundStructuralAlertR{}
		}
		args = append(args, object.Molregno)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundStructuralAlertR{}
			}

			for _, a := range args {
				if a == obj.Molregno {
					continue Outer
				}
			}

			args = append(args, obj.Molregno)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.molregno in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(compoundStructuralAlertAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MolregnoMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.MolregnoCompoundStructuralAlerts = append(foreign.R.MolregnoCompoundStructuralAlerts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Molregno == foreign.Molregno {
				local.R.MolregnoMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.MolregnoCompoundStructuralAlerts = append(foreign.R.MolregnoCompoundStructuralAlerts, local)
				break
			}
		}
	}

	return nil
}

// LoadAlert allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compoundStructuralAlertL) LoadAlert(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompoundStructuralAlert interface{}, mods queries.Applicator) error {
	var slice []*CompoundStructuralAlert
	var object *CompoundStructuralAlert

	if singular {
		object = maybeCompoundStructuralAlert.(*CompoundStructuralAlert)
	} else {
		slice = *maybeCompoundStructuralAlert.(*[]*CompoundStructuralAlert)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compoundStructuralAlertR{}
		}
		args = append(args, object.AlertID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compoundStructuralAlertR{}
			}

			for _, a := range args {
				if a == obj.AlertID {
					continue Outer
				}
			}

			args = append(args, obj.AlertID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`structural_alerts`),
		qm.WhereIn(`structural_alerts.alert_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StructuralAlert")
	}

	var resultSlice []*StructuralAlert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StructuralAlert")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for structural_alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for structural_alerts")
	}

	if len(compoundStructuralAlertAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Alert = foreign
		if foreign.R == nil {
			foreign.R = &structuralAlertR{}
		}
		foreign.R.AlertCompoundStructuralAlerts = append(foreign.R.AlertCompoundStructuralAlerts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AlertID == foreign.AlertID {
				local.R.Alert = foreign
				if foreign.R == nil {
					foreign.R = &structuralAlertR{}
				}
				foreign.R.AlertCompoundStructuralAlerts = append(foreign.R.AlertCompoundStructuralAlerts, local)
				break
			}
		}
	}

	return nil
}

// SetMolregnoMoleculeDictionary of the compoundStructuralAlert to the related item.
// Sets o.R.MolregnoMoleculeDictionary to related.
// Adds o to related.R.MolregnoCompoundStructuralAlerts.
func (o *CompoundStructuralAlert) SetMolregnoMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound_structural_alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"molregno"}),
		strmangle.WhereClause("\"", "\"", 0, compoundStructuralAlertPrimaryKeyColumns),
	)
	values := []interface{}{related.Molregno, o.CPDSTRAlertID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Molregno = related.Molregno
	if o.R == nil {
		o.R = &compoundStructuralAlertR{
			MolregnoMoleculeDictionary: related,
		}
	} else {
		o.R.MolregnoMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			MolregnoCompoundStructuralAlerts: CompoundStructuralAlertSlice{o},
		}
	} else {
		related.R.MolregnoCompoundStructuralAlerts = append(related.R.MolregnoCompoundStructuralAlerts, o)
	}

	return nil
}

// SetAlert of the compoundStructuralAlert to the related item.
// Sets o.R.Alert to related.
// Adds o to related.R.AlertCompoundStructuralAlerts.
func (o *CompoundStructuralAlert) SetAlert(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StructuralAlert) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compound_structural_alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"alert_id"}),
		strmangle.WhereClause("\"", "\"", 0, compoundStructuralAlertPrimaryKeyColumns),
	)
	values := []interface{}{related.AlertID, o.CPDSTRAlertID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AlertID = related.AlertID
	if o.R == nil {
		o.R = &compoundStructuralAlertR{
			Alert: related,
		}
	} else {
		o.R.Alert = related
	}

	if related.R == nil {
		related.R = &structuralAlertR{
			AlertCompoundStructuralAlerts: CompoundStructuralAlertSlice{o},
		}
	} else {
		related.R.AlertCompoundStructuralAlerts = append(related.R.AlertCompoundStructuralAlerts, o)
	}

	return nil
}

// CompoundStructuralAlerts retrieves all the records using an executor.
func CompoundStructuralAlerts(mods ...qm.QueryMod) compoundStructuralAlertQuery {
	mods = append(mods, qm.From("\"compound_structural_alerts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"compound_structural_alerts\".*"})
	}

	return compoundStructuralAlertQuery{q}
}

// FindCompoundStructuralAlert retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompoundStructuralAlert(ctx context.Context, exec boil.ContextExecutor, cPDSTRAlertID int64, selectCols ...string) (*CompoundStructuralAlert, error) {
	compoundStructuralAlertObj := &CompoundStructuralAlert{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"compound_structural_alerts\" where \"cpd_str_alert_id\"=?", sel,
	)

	q := queries.Raw(query, cPDSTRAlertID)

	err := q.Bind(ctx, exec, compoundStructuralAlertObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from compound_structural_alerts")
	}

	if err = compoundStructuralAlertObj.doAfterSelectHooks(ctx, exec); err != nil {
		return compoundStructuralAlertObj, err
	}

	return compoundStructuralAlertObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompoundStructuralAlert) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound_structural_alerts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundStructuralAlertColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	compoundStructuralAlertInsertCacheMut.RLock()
	cache, cached := compoundStructuralAlertInsertCache[key]
	compoundStructuralAlertInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			compoundStructuralAlertAllColumns,
			compoundStructuralAlertColumnsWithDefault,
			compoundStructuralAlertColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"compound_structural_alerts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"compound_structural_alerts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into compound_structural_alerts")
	}

	if !cached {
		compoundStructuralAlertInsertCacheMut.Lock()
		compoundStructuralAlertInsertCache[key] = cache
		compoundStructuralAlertInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompoundStructuralAlert.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompoundStructuralAlert) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	compoundStructuralAlertUpdateCacheMut.RLock()
	cache, cached := compoundStructuralAlertUpdateCache[key]
	compoundStructuralAlertUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			compoundStructuralAlertAllColumns,
			compoundStructuralAlertPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update compound_structural_alerts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"compound_structural_alerts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, compoundStructuralAlertPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, append(wl, compoundStructuralAlertPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update compound_structural_alerts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for compound_structural_alerts")
	}

	if !cached {
		compoundStructuralAlertUpdateCacheMut.Lock()
		compoundStructuralAlertUpdateCache[key] = cache
		compoundStructuralAlertUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q compoundStructuralAlertQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for compound_structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for compound_structural_alerts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompoundStructuralAlertSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundStructuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"compound_structural_alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundStructuralAlertPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in compoundStructuralAlert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all compoundStructuralAlert")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompoundStructuralAlert) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no compound_structural_alerts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(compoundStructuralAlertColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	compoundStructuralAlertUpsertCacheMut.RLock()
	cache, cached := compoundStructuralAlertUpsertCache[key]
	compoundStructuralAlertUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			compoundStructuralAlertAllColumns,
			compoundStructuralAlertColumnsWithDefault,
			compoundStructuralAlertColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			compoundStructuralAlertAllColumns,
			compoundStructuralAlertPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert compound_structural_alerts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(compoundStructuralAlertPrimaryKeyColumns))
			copy(conflict, compoundStructuralAlertPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"compound_structural_alerts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(compoundStructuralAlertType, compoundStructuralAlertMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert compound_structural_alerts")
	}

	if !cached {
		compoundStructuralAlertUpsertCacheMut.Lock()
		compoundStructuralAlertUpsertCache[key] = cache
		compoundStructuralAlertUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompoundStructuralAlert record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompoundStructuralAlert) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompoundStructuralAlert provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), compoundStructuralAlertPrimaryKeyMapping)
	sql := "DELETE FROM \"compound_structural_alerts\" WHERE \"cpd_str_alert_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from compound_structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for compound_structural_alerts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q compoundStructuralAlertQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no compoundStructuralAlertQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compound_structural_alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound_structural_alerts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompoundStructuralAlertSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(compoundStructuralAlertBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundStructuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"compound_structural_alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundStructuralAlertPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compoundStructuralAlert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for compound_structural_alerts")
	}

	if len(compoundStructuralAlertAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompoundStructuralAlert) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompoundStructuralAlert(ctx, exec, o.CPDSTRAlertID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompoundStructuralAlertSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompoundStructuralAlertSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compoundStructuralAlertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"compound_structural_alerts\".* FROM \"compound_structural_alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, compoundStructuralAlertPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompoundStructuralAlertSlice")
	}

	*o = slice

	return nil
}

// CompoundStructuralAlertExists checks if the CompoundStructuralAlert row exists.
func CompoundStructuralAlertExists(ctx context.Context, exec boil.ContextExecutor, cPDSTRAlertID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"compound_structural_alerts\" where \"cpd_str_alert_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cPDSTRAlertID)
	}
	row := exec.QueryRowContext(ctx, sql, cPDSTRAlertID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if compound_structural_alerts exists")
	}

	return exists, nil
}
