// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChemblIDLookup is an object representing the database table.
type ChemblIDLookup struct {
	ChemblID   string     `boil:"chembl_id" json:"chembl_id" toml:"chembl_id" yaml:"chembl_id"`
	EntityType string     `boil:"entity_type" json:"entity_type" toml:"entity_type" yaml:"entity_type"`
	EntityID   int64      `boil:"entity_id" json:"entity_id" toml:"entity_id" yaml:"entity_id"`
	Status     string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	LastActive null.Int64 `boil:"last_active" json:"last_active,omitempty" toml:"last_active" yaml:"last_active,omitempty"`

	R *chemblIDLookupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chemblIDLookupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChemblIDLookupColumns = struct {
	ChemblID   string
	EntityType string
	EntityID   string
	Status     string
	LastActive string
}{
	ChemblID:   "chembl_id",
	EntityType: "entity_type",
	EntityID:   "entity_id",
	Status:     "status",
	LastActive: "last_active",
}

var ChemblIDLookupTableColumns = struct {
	ChemblID   string
	EntityType string
	EntityID   string
	Status     string
	LastActive string
}{
	ChemblID:   "chembl_id_lookup.chembl_id",
	EntityType: "chembl_id_lookup.entity_type",
	EntityID:   "chembl_id_lookup.entity_id",
	Status:     "chembl_id_lookup.status",
	LastActive: "chembl_id_lookup.last_active",
}

// Generated where

var ChemblIDLookupWhere = struct {
	ChemblID   whereHelperstring
	EntityType whereHelperstring
	EntityID   whereHelperint64
	Status     whereHelperstring
	LastActive whereHelpernull_Int64
}{
	ChemblID:   whereHelperstring{field: "\"chembl_id_lookup\".\"chembl_id\""},
	EntityType: whereHelperstring{field: "\"chembl_id_lookup\".\"entity_type\""},
	EntityID:   whereHelperint64{field: "\"chembl_id_lookup\".\"entity_id\""},
	Status:     whereHelperstring{field: "\"chembl_id_lookup\".\"status\""},
	LastActive: whereHelpernull_Int64{field: "\"chembl_id_lookup\".\"last_active\""},
}

// ChemblIDLookupRels is where relationship names are stored.
var ChemblIDLookupRels = struct {
	ChemblAssay              string
	ChemblCellDictionary     string
	ChemblDoc                string
	ChemblMoleculeDictionary string
	ChemblTargetDictionary   string
	ChemblTissueDictionary   string
}{
	ChemblAssay:              "ChemblAssay",
	ChemblCellDictionary:     "ChemblCellDictionary",
	ChemblDoc:                "ChemblDoc",
	ChemblMoleculeDictionary: "ChemblMoleculeDictionary",
	ChemblTargetDictionary:   "ChemblTargetDictionary",
	ChemblTissueDictionary:   "ChemblTissueDictionary",
}

// chemblIDLookupR is where relationships are stored.
type chemblIDLookupR struct {
	ChemblAssay              *Assay              `boil:"ChemblAssay" json:"ChemblAssay" toml:"ChemblAssay" yaml:"ChemblAssay"`
	ChemblCellDictionary     *CellDictionary     `boil:"ChemblCellDictionary" json:"ChemblCellDictionary" toml:"ChemblCellDictionary" yaml:"ChemblCellDictionary"`
	ChemblDoc                *Doc                `boil:"ChemblDoc" json:"ChemblDoc" toml:"ChemblDoc" yaml:"ChemblDoc"`
	ChemblMoleculeDictionary *MoleculeDictionary `boil:"ChemblMoleculeDictionary" json:"ChemblMoleculeDictionary" toml:"ChemblMoleculeDictionary" yaml:"ChemblMoleculeDictionary"`
	ChemblTargetDictionary   *TargetDictionary   `boil:"ChemblTargetDictionary" json:"ChemblTargetDictionary" toml:"ChemblTargetDictionary" yaml:"ChemblTargetDictionary"`
	ChemblTissueDictionary   *TissueDictionary   `boil:"ChemblTissueDictionary" json:"ChemblTissueDictionary" toml:"ChemblTissueDictionary" yaml:"ChemblTissueDictionary"`
}

// NewStruct creates a new relationship struct
func (*chemblIDLookupR) NewStruct() *chemblIDLookupR {
	return &chemblIDLookupR{}
}

func (r *chemblIDLookupR) GetChemblAssay() *Assay {
	if r == nil {
		return nil
	}
	return r.ChemblAssay
}

func (r *chemblIDLookupR) GetChemblCellDictionary() *CellDictionary {
	if r == nil {
		return nil
	}
	return r.ChemblCellDictionary
}

func (r *chemblIDLookupR) GetChemblDoc() *Doc {
	if r == nil {
		return nil
	}
	return r.ChemblDoc
}

func (r *chemblIDLookupR) GetChemblMoleculeDictionary() *MoleculeDictionary {
	if r == nil {
		return nil
	}
	return r.ChemblMoleculeDictionary
}

func (r *chemblIDLookupR) GetChemblTargetDictionary() *TargetDictionary {
	if r == nil {
		return nil
	}
	return r.ChemblTargetDictionary
}

func (r *chemblIDLookupR) GetChemblTissueDictionary() *TissueDictionary {
	if r == nil {
		return nil
	}
	return r.ChemblTissueDictionary
}

// chemblIDLookupL is where Load methods for each relationship are stored.
type chemblIDLookupL struct{}

var (
	chemblIDLookupAllColumns            = []string{"chembl_id", "entity_type", "entity_id", "status", "last_active"}
	chemblIDLookupColumnsWithoutDefault = []string{"chembl_id", "entity_type", "entity_id", "status"}
	chemblIDLookupColumnsWithDefault    = []string{"last_active"}
	chemblIDLookupPrimaryKeyColumns     = []string{"chembl_id"}
	chemblIDLookupGeneratedColumns      = []string{}
)

type (
	// ChemblIDLookupSlice is an alias for a slice of pointers to ChemblIDLookup.
	// This should almost always be used instead of []ChemblIDLookup.
	ChemblIDLookupSlice []*ChemblIDLookup
	// ChemblIDLookupHook is the signature for custom ChemblIDLookup hook methods
	ChemblIDLookupHook func(context.Context, boil.ContextExecutor, *ChemblIDLookup) error

	chemblIDLookupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chemblIDLookupType                 = reflect.TypeOf(&ChemblIDLookup{})
	chemblIDLookupMapping              = queries.MakeStructMapping(chemblIDLookupType)
	chemblIDLookupPrimaryKeyMapping, _ = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, chemblIDLookupPrimaryKeyColumns)
	chemblIDLookupInsertCacheMut       sync.RWMutex
	chemblIDLookupInsertCache          = make(map[string]insertCache)
	chemblIDLookupUpdateCacheMut       sync.RWMutex
	chemblIDLookupUpdateCache          = make(map[string]updateCache)
	chemblIDLookupUpsertCacheMut       sync.RWMutex
	chemblIDLookupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chemblIDLookupAfterSelectHooks []ChemblIDLookupHook

var chemblIDLookupBeforeInsertHooks []ChemblIDLookupHook
var chemblIDLookupAfterInsertHooks []ChemblIDLookupHook

var chemblIDLookupBeforeUpdateHooks []ChemblIDLookupHook
var chemblIDLookupAfterUpdateHooks []ChemblIDLookupHook

var chemblIDLookupBeforeDeleteHooks []ChemblIDLookupHook
var chemblIDLookupAfterDeleteHooks []ChemblIDLookupHook

var chemblIDLookupBeforeUpsertHooks []ChemblIDLookupHook
var chemblIDLookupAfterUpsertHooks []ChemblIDLookupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChemblIDLookup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChemblIDLookup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChemblIDLookup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChemblIDLookup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChemblIDLookup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChemblIDLookup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChemblIDLookup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChemblIDLookup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChemblIDLookup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chemblIDLookupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChemblIDLookupHook registers your hook function for all future operations.
func AddChemblIDLookupHook(hookPoint boil.HookPoint, chemblIDLookupHook ChemblIDLookupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chemblIDLookupAfterSelectHooks = append(chemblIDLookupAfterSelectHooks, chemblIDLookupHook)
	case boil.BeforeInsertHook:
		chemblIDLookupBeforeInsertHooks = append(chemblIDLookupBeforeInsertHooks, chemblIDLookupHook)
	case boil.AfterInsertHook:
		chemblIDLookupAfterInsertHooks = append(chemblIDLookupAfterInsertHooks, chemblIDLookupHook)
	case boil.BeforeUpdateHook:
		chemblIDLookupBeforeUpdateHooks = append(chemblIDLookupBeforeUpdateHooks, chemblIDLookupHook)
	case boil.AfterUpdateHook:
		chemblIDLookupAfterUpdateHooks = append(chemblIDLookupAfterUpdateHooks, chemblIDLookupHook)
	case boil.BeforeDeleteHook:
		chemblIDLookupBeforeDeleteHooks = append(chemblIDLookupBeforeDeleteHooks, chemblIDLookupHook)
	case boil.AfterDeleteHook:
		chemblIDLookupAfterDeleteHooks = append(chemblIDLookupAfterDeleteHooks, chemblIDLookupHook)
	case boil.BeforeUpsertHook:
		chemblIDLookupBeforeUpsertHooks = append(chemblIDLookupBeforeUpsertHooks, chemblIDLookupHook)
	case boil.AfterUpsertHook:
		chemblIDLookupAfterUpsertHooks = append(chemblIDLookupAfterUpsertHooks, chemblIDLookupHook)
	}
}

// One returns a single chemblIDLookup record from the query.
func (q chemblIDLookupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChemblIDLookup, error) {
	o := &ChemblIDLookup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chembl_id_lookup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChemblIDLookup records from the query.
func (q chemblIDLookupQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChemblIDLookupSlice, error) {
	var o []*ChemblIDLookup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChemblIDLookup slice")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChemblIDLookup records in the query.
func (q chemblIDLookupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chembl_id_lookup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chemblIDLookupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chembl_id_lookup exists")
	}

	return count > 0, nil
}

// ChemblAssay pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblAssay(mods ...qm.QueryMod) assayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return Assays(queryMods...)
}

// ChemblCellDictionary pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblCellDictionary(mods ...qm.QueryMod) cellDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return CellDictionaries(queryMods...)
}

// ChemblDoc pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblDoc(mods ...qm.QueryMod) docQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return Docs(queryMods...)
}

// ChemblMoleculeDictionary pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblMoleculeDictionary(mods ...qm.QueryMod) moleculeDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return MoleculeDictionaries(queryMods...)
}

// ChemblTargetDictionary pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblTargetDictionary(mods ...qm.QueryMod) targetDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return TargetDictionaries(queryMods...)
}

// ChemblTissueDictionary pointed to by the foreign key.
func (o *ChemblIDLookup) ChemblTissueDictionary(mods ...qm.QueryMod) tissueDictionaryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chembl_id\" = ?", o.ChemblID),
	}

	queryMods = append(queryMods, mods...)

	return TissueDictionaries(queryMods...)
}

// LoadChemblAssay allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblAssay(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assays`),
		qm.WhereIn(`assays.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assay")
	}

	var resultSlice []*Assay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assay")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assays")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblAssay = foreign
		if foreign.R == nil {
			foreign.R = &assayR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.ChemblAssay = foreign
				if foreign.R == nil {
					foreign.R = &assayR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// LoadChemblCellDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblCellDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChemblID) {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cell_dictionary`),
		qm.WhereIn(`cell_dictionary.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CellDictionary")
	}

	var resultSlice []*CellDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CellDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cell_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cell_dictionary")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblCellDictionary = foreign
		if foreign.R == nil {
			foreign.R = &cellDictionaryR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChemblID, foreign.ChemblID) {
				local.R.ChemblCellDictionary = foreign
				if foreign.R == nil {
					foreign.R = &cellDictionaryR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// LoadChemblDoc allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblDoc(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`docs`),
		qm.WhereIn(`docs.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Doc")
	}

	var resultSlice []*Doc
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Doc")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for docs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for docs")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblDoc = foreign
		if foreign.R == nil {
			foreign.R = &docR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.ChemblDoc = foreign
				if foreign.R == nil {
					foreign.R = &docR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// LoadChemblMoleculeDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblMoleculeDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`molecule_dictionary`),
		qm.WhereIn(`molecule_dictionary.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MoleculeDictionary")
	}

	var resultSlice []*MoleculeDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MoleculeDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for molecule_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for molecule_dictionary")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblMoleculeDictionary = foreign
		if foreign.R == nil {
			foreign.R = &moleculeDictionaryR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.ChemblMoleculeDictionary = foreign
				if foreign.R == nil {
					foreign.R = &moleculeDictionaryR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// LoadChemblTargetDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblTargetDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`target_dictionary`),
		qm.WhereIn(`target_dictionary.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TargetDictionary")
	}

	var resultSlice []*TargetDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TargetDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for target_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for target_dictionary")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblTargetDictionary = foreign
		if foreign.R == nil {
			foreign.R = &targetDictionaryR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.ChemblTargetDictionary = foreign
				if foreign.R == nil {
					foreign.R = &targetDictionaryR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// LoadChemblTissueDictionary allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chemblIDLookupL) LoadChemblTissueDictionary(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChemblIDLookup interface{}, mods queries.Applicator) error {
	var slice []*ChemblIDLookup
	var object *ChemblIDLookup

	if singular {
		object = maybeChemblIDLookup.(*ChemblIDLookup)
	} else {
		slice = *maybeChemblIDLookup.(*[]*ChemblIDLookup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chemblIDLookupR{}
		}
		args = append(args, object.ChemblID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chemblIDLookupR{}
			}

			for _, a := range args {
				if a == obj.ChemblID {
					continue Outer
				}
			}

			args = append(args, obj.ChemblID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tissue_dictionary`),
		qm.WhereIn(`tissue_dictionary.chembl_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TissueDictionary")
	}

	var resultSlice []*TissueDictionary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TissueDictionary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tissue_dictionary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tissue_dictionary")
	}

	if len(chemblIDLookupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChemblTissueDictionary = foreign
		if foreign.R == nil {
			foreign.R = &tissueDictionaryR{}
		}
		foreign.R.Chembl = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChemblID == foreign.ChemblID {
				local.R.ChemblTissueDictionary = foreign
				if foreign.R == nil {
					foreign.R = &tissueDictionaryR{}
				}
				foreign.R.Chembl = local
				break
			}
		}
	}

	return nil
}

// SetChemblAssay of the chemblIDLookup to the related item.
// Sets o.R.ChemblAssay to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblAssay(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Assay) error {
	var err error

	if insert {
		related.ChemblID = o.ChemblID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"assays\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, assayPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.AssayID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChemblID = o.ChemblID
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblAssay: related,
		}
	} else {
		o.R.ChemblAssay = related
	}

	if related.R == nil {
		related.R = &assayR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// SetChemblCellDictionary of the chemblIDLookup to the related item.
// Sets o.R.ChemblCellDictionary to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblCellDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CellDictionary) error {
	var err error

	if insert {
		queries.Assign(&related.ChemblID, o.ChemblID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"cell_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, cellDictionaryPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.CellID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ChemblID, o.ChemblID)
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblCellDictionary: related,
		}
	} else {
		o.R.ChemblCellDictionary = related
	}

	if related.R == nil {
		related.R = &cellDictionaryR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// RemoveChemblCellDictionary relationship.
// Sets o.R.ChemblCellDictionary to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChemblIDLookup) RemoveChemblCellDictionary(ctx context.Context, exec boil.ContextExecutor, related *CellDictionary) error {
	var err error

	queries.SetScanner(&related.ChemblID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("chembl_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChemblCellDictionary = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.Chembl = nil

	return nil
}

// SetChemblDoc of the chemblIDLookup to the related item.
// Sets o.R.ChemblDoc to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblDoc(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Doc) error {
	var err error

	if insert {
		related.ChemblID = o.ChemblID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"docs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, docPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.DocID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChemblID = o.ChemblID
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblDoc: related,
		}
	} else {
		o.R.ChemblDoc = related
	}

	if related.R == nil {
		related.R = &docR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// SetChemblMoleculeDictionary of the chemblIDLookup to the related item.
// Sets o.R.ChemblMoleculeDictionary to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblMoleculeDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MoleculeDictionary) error {
	var err error

	if insert {
		related.ChemblID = o.ChemblID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"molecule_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, moleculeDictionaryPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.Molregno}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChemblID = o.ChemblID
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblMoleculeDictionary: related,
		}
	} else {
		o.R.ChemblMoleculeDictionary = related
	}

	if related.R == nil {
		related.R = &moleculeDictionaryR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// SetChemblTargetDictionary of the chemblIDLookup to the related item.
// Sets o.R.ChemblTargetDictionary to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblTargetDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TargetDictionary) error {
	var err error

	if insert {
		related.ChemblID = o.ChemblID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"target_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, targetDictionaryPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.Tid}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChemblID = o.ChemblID
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblTargetDictionary: related,
		}
	} else {
		o.R.ChemblTargetDictionary = related
	}

	if related.R == nil {
		related.R = &targetDictionaryR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// SetChemblTissueDictionary of the chemblIDLookup to the related item.
// Sets o.R.ChemblTissueDictionary to related.
// Adds o to related.R.Chembl.
func (o *ChemblIDLookup) SetChemblTissueDictionary(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TissueDictionary) error {
	var err error

	if insert {
		related.ChemblID = o.ChemblID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"tissue_dictionary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"chembl_id"}),
			strmangle.WhereClause("\"", "\"", 0, tissueDictionaryPrimaryKeyColumns),
		)
		values := []interface{}{o.ChemblID, related.TissueID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChemblID = o.ChemblID
	}

	if o.R == nil {
		o.R = &chemblIDLookupR{
			ChemblTissueDictionary: related,
		}
	} else {
		o.R.ChemblTissueDictionary = related
	}

	if related.R == nil {
		related.R = &tissueDictionaryR{
			Chembl: o,
		}
	} else {
		related.R.Chembl = o
	}
	return nil
}

// ChemblIDLookups retrieves all the records using an executor.
func ChemblIDLookups(mods ...qm.QueryMod) chemblIDLookupQuery {
	mods = append(mods, qm.From("\"chembl_id_lookup\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chembl_id_lookup\".*"})
	}

	return chemblIDLookupQuery{q}
}

// FindChemblIDLookup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChemblIDLookup(ctx context.Context, exec boil.ContextExecutor, chemblID string, selectCols ...string) (*ChemblIDLookup, error) {
	chemblIDLookupObj := &ChemblIDLookup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chembl_id_lookup\" where \"chembl_id\"=?", sel,
	)

	q := queries.Raw(query, chemblID)

	err := q.Bind(ctx, exec, chemblIDLookupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chembl_id_lookup")
	}

	if err = chemblIDLookupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chemblIDLookupObj, err
	}

	return chemblIDLookupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChemblIDLookup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chembl_id_lookup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chemblIDLookupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chemblIDLookupInsertCacheMut.RLock()
	cache, cached := chemblIDLookupInsertCache[key]
	chemblIDLookupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chemblIDLookupAllColumns,
			chemblIDLookupColumnsWithDefault,
			chemblIDLookupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chembl_id_lookup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chembl_id_lookup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chembl_id_lookup")
	}

	if !cached {
		chemblIDLookupInsertCacheMut.Lock()
		chemblIDLookupInsertCache[key] = cache
		chemblIDLookupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChemblIDLookup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChemblIDLookup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chemblIDLookupUpdateCacheMut.RLock()
	cache, cached := chemblIDLookupUpdateCache[key]
	chemblIDLookupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chemblIDLookupAllColumns,
			chemblIDLookupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chembl_id_lookup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chembl_id_lookup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chemblIDLookupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, append(wl, chemblIDLookupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chembl_id_lookup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chembl_id_lookup")
	}

	if !cached {
		chemblIDLookupUpdateCacheMut.Lock()
		chemblIDLookupUpdateCache[key] = cache
		chemblIDLookupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chemblIDLookupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chembl_id_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chembl_id_lookup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChemblIDLookupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chemblIDLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chembl_id_lookup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chemblIDLookupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chemblIDLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chemblIDLookup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChemblIDLookup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chembl_id_lookup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chemblIDLookupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chemblIDLookupUpsertCacheMut.RLock()
	cache, cached := chemblIDLookupUpsertCache[key]
	chemblIDLookupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chemblIDLookupAllColumns,
			chemblIDLookupColumnsWithDefault,
			chemblIDLookupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chemblIDLookupAllColumns,
			chemblIDLookupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chembl_id_lookup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chemblIDLookupPrimaryKeyColumns))
			copy(conflict, chemblIDLookupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"chembl_id_lookup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chemblIDLookupType, chemblIDLookupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chembl_id_lookup")
	}

	if !cached {
		chemblIDLookupUpsertCacheMut.Lock()
		chemblIDLookupUpsertCache[key] = cache
		chemblIDLookupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChemblIDLookup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChemblIDLookup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChemblIDLookup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chemblIDLookupPrimaryKeyMapping)
	sql := "DELETE FROM \"chembl_id_lookup\" WHERE \"chembl_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chembl_id_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chembl_id_lookup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chemblIDLookupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chemblIDLookupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chembl_id_lookup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chembl_id_lookup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChemblIDLookupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chemblIDLookupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chemblIDLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chembl_id_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chemblIDLookupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chemblIDLookup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chembl_id_lookup")
	}

	if len(chemblIDLookupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChemblIDLookup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChemblIDLookup(ctx, exec, o.ChemblID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChemblIDLookupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChemblIDLookupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chemblIDLookupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chembl_id_lookup\".* FROM \"chembl_id_lookup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chemblIDLookupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChemblIDLookupSlice")
	}

	*o = slice

	return nil
}

// ChemblIDLookupExists checks if the ChemblIDLookup row exists.
func ChemblIDLookupExists(ctx context.Context, exec boil.ContextExecutor, chemblID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chembl_id_lookup\" where \"chembl_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chemblID)
	}
	row := exec.QueryRowContext(ctx, sql, chemblID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chembl_id_lookup exists")
	}

	return exists, nil
}
