// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DefinedDailyDose is an object representing the database table.
type DefinedDailyDose struct {
	AtcCode    string            `boil:"atc_code" json:"atc_code" toml:"atc_code" yaml:"atc_code"`
	DDDUnits   null.String       `boil:"ddd_units" json:"ddd_units,omitempty" toml:"ddd_units" yaml:"ddd_units,omitempty"`
	DDDAdmr    null.String       `boil:"ddd_admr" json:"ddd_admr,omitempty" toml:"ddd_admr" yaml:"ddd_admr,omitempty"`
	DDDComment null.String       `boil:"ddd_comment" json:"ddd_comment,omitempty" toml:"ddd_comment" yaml:"ddd_comment,omitempty"`
	DDDID      int64             `boil:"ddd_id" json:"ddd_id" toml:"ddd_id" yaml:"ddd_id"`
	DDDValue   types.NullDecimal `boil:"ddd_value" json:"ddd_value,omitempty" toml:"ddd_value" yaml:"ddd_value,omitempty"`

	R *definedDailyDoseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L definedDailyDoseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DefinedDailyDoseColumns = struct {
	AtcCode    string
	DDDUnits   string
	DDDAdmr    string
	DDDComment string
	DDDID      string
	DDDValue   string
}{
	AtcCode:    "atc_code",
	DDDUnits:   "ddd_units",
	DDDAdmr:    "ddd_admr",
	DDDComment: "ddd_comment",
	DDDID:      "ddd_id",
	DDDValue:   "ddd_value",
}

var DefinedDailyDoseTableColumns = struct {
	AtcCode    string
	DDDUnits   string
	DDDAdmr    string
	DDDComment string
	DDDID      string
	DDDValue   string
}{
	AtcCode:    "defined_daily_dose.atc_code",
	DDDUnits:   "defined_daily_dose.ddd_units",
	DDDAdmr:    "defined_daily_dose.ddd_admr",
	DDDComment: "defined_daily_dose.ddd_comment",
	DDDID:      "defined_daily_dose.ddd_id",
	DDDValue:   "defined_daily_dose.ddd_value",
}

// Generated where

var DefinedDailyDoseWhere = struct {
	AtcCode    whereHelperstring
	DDDUnits   whereHelpernull_String
	DDDAdmr    whereHelpernull_String
	DDDComment whereHelpernull_String
	DDDID      whereHelperint64
	DDDValue   whereHelpertypes_NullDecimal
}{
	AtcCode:    whereHelperstring{field: "\"defined_daily_dose\".\"atc_code\""},
	DDDUnits:   whereHelpernull_String{field: "\"defined_daily_dose\".\"ddd_units\""},
	DDDAdmr:    whereHelpernull_String{field: "\"defined_daily_dose\".\"ddd_admr\""},
	DDDComment: whereHelpernull_String{field: "\"defined_daily_dose\".\"ddd_comment\""},
	DDDID:      whereHelperint64{field: "\"defined_daily_dose\".\"ddd_id\""},
	DDDValue:   whereHelpertypes_NullDecimal{field: "\"defined_daily_dose\".\"ddd_value\""},
}

// DefinedDailyDoseRels is where relationship names are stored.
var DefinedDailyDoseRels = struct {
	AtcCodeAtcClassification string
}{
	AtcCodeAtcClassification: "AtcCodeAtcClassification",
}

// definedDailyDoseR is where relationships are stored.
type definedDailyDoseR struct {
	AtcCodeAtcClassification *AtcClassification `boil:"AtcCodeAtcClassification" json:"AtcCodeAtcClassification" toml:"AtcCodeAtcClassification" yaml:"AtcCodeAtcClassification"`
}

// NewStruct creates a new relationship struct
func (*definedDailyDoseR) NewStruct() *definedDailyDoseR {
	return &definedDailyDoseR{}
}

func (r *definedDailyDoseR) GetAtcCodeAtcClassification() *AtcClassification {
	if r == nil {
		return nil
	}
	return r.AtcCodeAtcClassification
}

// definedDailyDoseL is where Load methods for each relationship are stored.
type definedDailyDoseL struct{}

var (
	definedDailyDoseAllColumns            = []string{"atc_code", "ddd_units", "ddd_admr", "ddd_comment", "ddd_id", "ddd_value"}
	definedDailyDoseColumnsWithoutDefault = []string{"atc_code", "ddd_id"}
	definedDailyDoseColumnsWithDefault    = []string{"ddd_units", "ddd_admr", "ddd_comment", "ddd_value"}
	definedDailyDosePrimaryKeyColumns     = []string{"ddd_id"}
	definedDailyDoseGeneratedColumns      = []string{}
)

type (
	// DefinedDailyDoseSlice is an alias for a slice of pointers to DefinedDailyDose.
	// This should almost always be used instead of []DefinedDailyDose.
	DefinedDailyDoseSlice []*DefinedDailyDose
	// DefinedDailyDoseHook is the signature for custom DefinedDailyDose hook methods
	DefinedDailyDoseHook func(context.Context, boil.ContextExecutor, *DefinedDailyDose) error

	definedDailyDoseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	definedDailyDoseType                 = reflect.TypeOf(&DefinedDailyDose{})
	definedDailyDoseMapping              = queries.MakeStructMapping(definedDailyDoseType)
	definedDailyDosePrimaryKeyMapping, _ = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, definedDailyDosePrimaryKeyColumns)
	definedDailyDoseInsertCacheMut       sync.RWMutex
	definedDailyDoseInsertCache          = make(map[string]insertCache)
	definedDailyDoseUpdateCacheMut       sync.RWMutex
	definedDailyDoseUpdateCache          = make(map[string]updateCache)
	definedDailyDoseUpsertCacheMut       sync.RWMutex
	definedDailyDoseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var definedDailyDoseAfterSelectHooks []DefinedDailyDoseHook

var definedDailyDoseBeforeInsertHooks []DefinedDailyDoseHook
var definedDailyDoseAfterInsertHooks []DefinedDailyDoseHook

var definedDailyDoseBeforeUpdateHooks []DefinedDailyDoseHook
var definedDailyDoseAfterUpdateHooks []DefinedDailyDoseHook

var definedDailyDoseBeforeDeleteHooks []DefinedDailyDoseHook
var definedDailyDoseAfterDeleteHooks []DefinedDailyDoseHook

var definedDailyDoseBeforeUpsertHooks []DefinedDailyDoseHook
var definedDailyDoseAfterUpsertHooks []DefinedDailyDoseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DefinedDailyDose) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DefinedDailyDose) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DefinedDailyDose) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DefinedDailyDose) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DefinedDailyDose) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DefinedDailyDose) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DefinedDailyDose) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DefinedDailyDose) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DefinedDailyDose) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definedDailyDoseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDefinedDailyDoseHook registers your hook function for all future operations.
func AddDefinedDailyDoseHook(hookPoint boil.HookPoint, definedDailyDoseHook DefinedDailyDoseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		definedDailyDoseAfterSelectHooks = append(definedDailyDoseAfterSelectHooks, definedDailyDoseHook)
	case boil.BeforeInsertHook:
		definedDailyDoseBeforeInsertHooks = append(definedDailyDoseBeforeInsertHooks, definedDailyDoseHook)
	case boil.AfterInsertHook:
		definedDailyDoseAfterInsertHooks = append(definedDailyDoseAfterInsertHooks, definedDailyDoseHook)
	case boil.BeforeUpdateHook:
		definedDailyDoseBeforeUpdateHooks = append(definedDailyDoseBeforeUpdateHooks, definedDailyDoseHook)
	case boil.AfterUpdateHook:
		definedDailyDoseAfterUpdateHooks = append(definedDailyDoseAfterUpdateHooks, definedDailyDoseHook)
	case boil.BeforeDeleteHook:
		definedDailyDoseBeforeDeleteHooks = append(definedDailyDoseBeforeDeleteHooks, definedDailyDoseHook)
	case boil.AfterDeleteHook:
		definedDailyDoseAfterDeleteHooks = append(definedDailyDoseAfterDeleteHooks, definedDailyDoseHook)
	case boil.BeforeUpsertHook:
		definedDailyDoseBeforeUpsertHooks = append(definedDailyDoseBeforeUpsertHooks, definedDailyDoseHook)
	case boil.AfterUpsertHook:
		definedDailyDoseAfterUpsertHooks = append(definedDailyDoseAfterUpsertHooks, definedDailyDoseHook)
	}
}

// One returns a single definedDailyDose record from the query.
func (q definedDailyDoseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DefinedDailyDose, error) {
	o := &DefinedDailyDose{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for defined_daily_dose")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DefinedDailyDose records from the query.
func (q definedDailyDoseQuery) All(ctx context.Context, exec boil.ContextExecutor) (DefinedDailyDoseSlice, error) {
	var o []*DefinedDailyDose

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DefinedDailyDose slice")
	}

	if len(definedDailyDoseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DefinedDailyDose records in the query.
func (q definedDailyDoseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count defined_daily_dose rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q definedDailyDoseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if defined_daily_dose exists")
	}

	return count > 0, nil
}

// AtcCodeAtcClassification pointed to by the foreign key.
func (o *DefinedDailyDose) AtcCodeAtcClassification(mods ...qm.QueryMod) atcClassificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"level5\" = ?", o.AtcCode),
	}

	queryMods = append(queryMods, mods...)

	return AtcClassifications(queryMods...)
}

// LoadAtcCodeAtcClassification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (definedDailyDoseL) LoadAtcCodeAtcClassification(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDefinedDailyDose interface{}, mods queries.Applicator) error {
	var slice []*DefinedDailyDose
	var object *DefinedDailyDose

	if singular {
		object = maybeDefinedDailyDose.(*DefinedDailyDose)
	} else {
		slice = *maybeDefinedDailyDose.(*[]*DefinedDailyDose)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &definedDailyDoseR{}
		}
		args = append(args, object.AtcCode)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &definedDailyDoseR{}
			}

			for _, a := range args {
				if a == obj.AtcCode {
					continue Outer
				}
			}

			args = append(args, obj.AtcCode)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`atc_classification`),
		qm.WhereIn(`atc_classification.level5 in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AtcClassification")
	}

	var resultSlice []*AtcClassification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AtcClassification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for atc_classification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for atc_classification")
	}

	if len(definedDailyDoseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AtcCodeAtcClassification = foreign
		if foreign.R == nil {
			foreign.R = &atcClassificationR{}
		}
		foreign.R.AtcCodeDefinedDailyDoses = append(foreign.R.AtcCodeDefinedDailyDoses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AtcCode == foreign.Level5 {
				local.R.AtcCodeAtcClassification = foreign
				if foreign.R == nil {
					foreign.R = &atcClassificationR{}
				}
				foreign.R.AtcCodeDefinedDailyDoses = append(foreign.R.AtcCodeDefinedDailyDoses, local)
				break
			}
		}
	}

	return nil
}

// SetAtcCodeAtcClassification of the definedDailyDose to the related item.
// Sets o.R.AtcCodeAtcClassification to related.
// Adds o to related.R.AtcCodeDefinedDailyDoses.
func (o *DefinedDailyDose) SetAtcCodeAtcClassification(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AtcClassification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"defined_daily_dose\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"atc_code"}),
		strmangle.WhereClause("\"", "\"", 0, definedDailyDosePrimaryKeyColumns),
	)
	values := []interface{}{related.Level5, o.DDDID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AtcCode = related.Level5
	if o.R == nil {
		o.R = &definedDailyDoseR{
			AtcCodeAtcClassification: related,
		}
	} else {
		o.R.AtcCodeAtcClassification = related
	}

	if related.R == nil {
		related.R = &atcClassificationR{
			AtcCodeDefinedDailyDoses: DefinedDailyDoseSlice{o},
		}
	} else {
		related.R.AtcCodeDefinedDailyDoses = append(related.R.AtcCodeDefinedDailyDoses, o)
	}

	return nil
}

// DefinedDailyDoses retrieves all the records using an executor.
func DefinedDailyDoses(mods ...qm.QueryMod) definedDailyDoseQuery {
	mods = append(mods, qm.From("\"defined_daily_dose\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"defined_daily_dose\".*"})
	}

	return definedDailyDoseQuery{q}
}

// FindDefinedDailyDose retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDefinedDailyDose(ctx context.Context, exec boil.ContextExecutor, dDDID int64, selectCols ...string) (*DefinedDailyDose, error) {
	definedDailyDoseObj := &DefinedDailyDose{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"defined_daily_dose\" where \"ddd_id\"=?", sel,
	)

	q := queries.Raw(query, dDDID)

	err := q.Bind(ctx, exec, definedDailyDoseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from defined_daily_dose")
	}

	if err = definedDailyDoseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return definedDailyDoseObj, err
	}

	return definedDailyDoseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DefinedDailyDose) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no defined_daily_dose provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(definedDailyDoseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	definedDailyDoseInsertCacheMut.RLock()
	cache, cached := definedDailyDoseInsertCache[key]
	definedDailyDoseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			definedDailyDoseAllColumns,
			definedDailyDoseColumnsWithDefault,
			definedDailyDoseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"defined_daily_dose\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"defined_daily_dose\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into defined_daily_dose")
	}

	if !cached {
		definedDailyDoseInsertCacheMut.Lock()
		definedDailyDoseInsertCache[key] = cache
		definedDailyDoseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DefinedDailyDose.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DefinedDailyDose) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	definedDailyDoseUpdateCacheMut.RLock()
	cache, cached := definedDailyDoseUpdateCache[key]
	definedDailyDoseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			definedDailyDoseAllColumns,
			definedDailyDosePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update defined_daily_dose, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"defined_daily_dose\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, definedDailyDosePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, append(wl, definedDailyDosePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update defined_daily_dose row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for defined_daily_dose")
	}

	if !cached {
		definedDailyDoseUpdateCacheMut.Lock()
		definedDailyDoseUpdateCache[key] = cache
		definedDailyDoseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q definedDailyDoseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for defined_daily_dose")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for defined_daily_dose")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DefinedDailyDoseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definedDailyDosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"defined_daily_dose\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, definedDailyDosePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in definedDailyDose slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all definedDailyDose")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DefinedDailyDose) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no defined_daily_dose provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(definedDailyDoseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	definedDailyDoseUpsertCacheMut.RLock()
	cache, cached := definedDailyDoseUpsertCache[key]
	definedDailyDoseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			definedDailyDoseAllColumns,
			definedDailyDoseColumnsWithDefault,
			definedDailyDoseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			definedDailyDoseAllColumns,
			definedDailyDosePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert defined_daily_dose, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(definedDailyDosePrimaryKeyColumns))
			copy(conflict, definedDailyDosePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"defined_daily_dose\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(definedDailyDoseType, definedDailyDoseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert defined_daily_dose")
	}

	if !cached {
		definedDailyDoseUpsertCacheMut.Lock()
		definedDailyDoseUpsertCache[key] = cache
		definedDailyDoseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DefinedDailyDose record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DefinedDailyDose) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DefinedDailyDose provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), definedDailyDosePrimaryKeyMapping)
	sql := "DELETE FROM \"defined_daily_dose\" WHERE \"ddd_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from defined_daily_dose")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for defined_daily_dose")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q definedDailyDoseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no definedDailyDoseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from defined_daily_dose")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for defined_daily_dose")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DefinedDailyDoseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(definedDailyDoseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definedDailyDosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"defined_daily_dose\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, definedDailyDosePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from definedDailyDose slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for defined_daily_dose")
	}

	if len(definedDailyDoseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DefinedDailyDose) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDefinedDailyDose(ctx, exec, o.DDDID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DefinedDailyDoseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DefinedDailyDoseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definedDailyDosePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"defined_daily_dose\".* FROM \"defined_daily_dose\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, definedDailyDosePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DefinedDailyDoseSlice")
	}

	*o = slice

	return nil
}

// DefinedDailyDoseExists checks if the DefinedDailyDose row exists.
func DefinedDailyDoseExists(ctx context.Context, exec boil.ContextExecutor, dDDID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"defined_daily_dose\" where \"ddd_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dDDID)
	}
	row := exec.QueryRowContext(ctx, sql, dDDID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if defined_daily_dose exists")
	}

	return exists, nil
}
