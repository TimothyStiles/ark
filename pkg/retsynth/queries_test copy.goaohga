/*
Package retsynth_test contains tests for the queries.go in the retsynth package.
*/
package retsynth

import (
	"testing"

	"github.com/magiconair/properties/assert"
)

//	func setupSuite() {
//		// Setup the path for the OS environment variable for the Retsynth database
//	}
func TestConnectDB(t *testing.T) {
	data := ConnectDB()
	if data == nil {
		t.Error("Error connecting to database")
	}
}

func TestGetAllCompounds(t *testing.T) {
	compounds := GetAllCompounds()
	assert.Equal(t, len(compounds), 2120)
}

func TestGetAllModels(t *testing.T) {
	models := GetAllModels()
	assert.Equal(t, len(models), 44)
}

func TestGetUniqueMetabolicClusters(t *testing.T) {
	data := GetUniqueMetabolicClusters()
	if data == nil {
		t.Error("Error getting unique metabolic clusters")
	}
}

func TestGetAllModelIDs(t *testing.T) {
	data := GetAllModelIDs()
	if data == nil {
		t.Error("Error getting all model ids")
	}
}

func TestGetOrganismName(t *testing.T) {
	var name string = "Escherichia coli"
	data := GetOrganismName(name)
	assert.Equal(t, data, "")
}

func TestGetOrganismID(t *testing.T) {
	var organismID string = "83333"
	data := GetOrganismID(organismID)
	assert.Equal(t, data, "")
}

func TestGetCompoundID(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCompoundID(compoundID)
	assert.Equal(t, data, "")
}

func TestGetLikeCompoundID(t *testing.T) {
	var compundName string = "glucose"
	data := GetLikeCompoundID(compundName)
	assert.Equal(t, data, "")
}

func TestGetCompoundIDFromInchi(t *testing.T) {
	var inchistring string = "InChI=1S/C3H4O3S/c4-2(1-7)3(5)6/h7H,1H2,(H,5,6)_c0"
	data := GetCompoundIDFromInchi(inchistring)
	assert.Equal(t, data, "")
}

func TestGetCompoundInchi(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCompoundInchi(compoundID)
	assert.Equal(t, data, "")
}

func TestGetCompoundName(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCompoundName(compoundID)
	assert.Equal(t, data, "")
}

func TestGetCompoundNameFromInchi(t *testing.T) {
	var inchistring string = "InChI=1S/C5H11O8P/c6-1-3(7)5(9)4(8)2-13-14(10,11)12/h1,3-5,7-9H,2H2,(H2,10,11,12)/t3-,4-,5+/m1/s1_c0"
	data := GetCompoundNameFromInchi(inchistring)
	assert.Equal(t, data, "")
}

func TestGetCompoundCompartment(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCompoundCompartment(compoundID)
	assert.Equal(t, data, "")
}

func TestGetReactionName(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionName(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionIDsFromCompound(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetReactionIDsFromCompound(compoundID, true)
	assert.Equal(t, data, "")

	// Test for false | Figure out the exact assertions and the test case
	data = GetReactionIDsFromCompound(compoundID, false)
	assert.Equal(t, data, "")

}

func TestGetReactionSpecies(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionSpecies(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactantCompoundIDs(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactantCompoundIDs(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionsWithProduct(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetReactionsWithProduct(compoundID)
	assert.Equal(t, data, "")
}

func TestGetProductCompundIDs(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetProductCompundIDs(reactionID)
	assert.Equal(t, data, "")
}

func TestGetModelCompounds(t *testing.T) {
	var modelID string = "iJO1366"
	data := GetModelCompounds(modelID)
	assert.Equal(t, data, "")
}

func TestGetAllCompoundIDs(t *testing.T) {
	data := GetAllCompoundIDs()
	assert.Equal(t, data, "")
}

func TestGetAllCompoundInchistrings(t *testing.T) {
	data := GetAllCompoundInchistrings()
	assert.Equal(t, data, "")
}

func TestGetModelReactions(t *testing.T) {
	var modelID string = "iJO1366"
	data := GetModelReactions(modelID)
	assert.Equal(t, data, "")
}

func TestGetAllReactions(t *testing.T) {
	data := GetAllReactions()
	assert.Equal(t, data, "")
}

func TestGetReactionReversibility(t *testing.T) {
	var reactionID string = "rxn00001"
	var modelID string = "iJO1366"
	data := GetReactionReversibility(reactionID, modelID)
	assert.Equal(t, data, "")
}

func TestGetReactionReversibilityGlobal(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionReversibilityGlobal(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionGeneAssociations(t *testing.T) {
	var reactionID string = "rxn00001"
	var modelID string = "iJO1366"
	data := GetReactionGeneAssociations(reactionID, modelID)
	assert.Equal(t, data, "")
}

func TestGetReactionProteinAssociations(t *testing.T) {
	var reactionID string = "rxn00001"
	var modelID string = "iJO1366"
	data := GetReactionProteinAssociations(reactionID, modelID)
	assert.Equal(t, data, "")
}

func TestGetStoichiometry(t *testing.T) {
	var reactionID string = "rxn00001"
	var compoundID string = "cpd00001"
	var isProduct bool = true
	data := GetStoichiometry(reactionID, compoundID, isProduct)
	assert.Equal(t, data, "")
}

func TestGetReactionCatalyst(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionCatalysts(reactionID)
	assert.Equal(t, data, "")
}

func TestGetCompartmentID(t *testing.T) {
	var compartmentID string = "c"
	data := GetCompartmentID(compartmentID)
	assert.Equal(t, data, "")
}

func TestGetReactionSolvents(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionSolvents(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionTemperature(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionTemperature(reactionID)
	if data == nil {
		t.Error("Error getting reaction temperature")
	}
}

func TestGetReactionPressure(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionPressure(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionTime(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionTime(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionYield(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionYield(reactionID)
	assert.Equal(t, data, "")
}

func TestGetReactionReference(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionReference(reactionID)
	if data == nil {
		t.Error("Error getting reaction references")
	}
}

func TestGetReactionsByType(t *testing.T) {
	var reactionType string = "bio"
	data := GetReactionsByType(reactionType)
	if data == nil {
		t.Error("Error getting reactions by type")
	}
}

func TestGetReactionType(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionType(reactionID)
	if data == nil {
		t.Error("Error getting reaction type")
	}
}

func TestGetAllReactionKEGGIDs(t *testing.T) {
	data := GetAllReactionKEGGIDs()
	if data == nil {
		t.Error("Error getting all reaction kegg ids")
	}
}

func TestGetReactionKEGGID(t *testing.T) {
	var reactionID string = "rxn00001"
	data := GetReactionKEGGID(reactionID)
	if data == nil {
		t.Error("Error getting reaction kegg id")
	}
}

func TestGetCompoundKEGGID(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCompoundKEGGID(compoundID)
	if data == nil {
		t.Error("Error getting compound kegg id")
	}
}

func TestGetAllCompoundKEGGIDs(t *testing.T) {
	data := GetAllCompoundKEGGIDs()
	if data == nil {
		t.Error("Error getting all compound kegg ids")
	}
}

func TestGetAllChemicalFormulas(t *testing.T) {
	data := GetAllChemicalFormulas()
	if data == nil {
		t.Error("Error getting all chemical formulas")
	}
}

func TestGetChemicalFormula(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetChemicalFormula(compoundID)
	if data == nil {
		t.Error("Error getting chemical formula")
	}
}

func TestGetCASNumber(t *testing.T) {
	var compoundID string = "cpd00001"
	data := GetCASNumber(compoundID)
	if data == nil {
		t.Error("Error getting cas number")
	}
}

func TestGetCompoundIDByFormula(t *testing.T) {
	var formula string = "C6H12O6"
	data := GetCompoundIDByFormula(formula)
	if data == nil {
		t.Error("Error getting compound id by formula")
	}
}

func TestGetCompoundNameBySearchTerm(t *testing.T) {
	var searchTerm string = "glucose"
	data := GetCompoundNameBySearchTerm(searchTerm)
	if data == nil {
		t.Error("Error getting compound name by search term")
	}
}

func TestGetModelIDByFileName(t *testing.T) {
	var fileName string = "iJO1366.xml"
	data := GetModelIDByFileName(fileName)
	if data == nil {
		t.Error("Error getting model id by file name")
	}
}

func TestGetAllFBAModelIDs(t *testing.T) {
	data := GetAllFBAModelIDs()
	if data == nil {
		t.Error("Error getting all fba model ids")
	}
}
